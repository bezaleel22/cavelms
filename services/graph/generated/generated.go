// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/cavelms/internal/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
	RequireAuth func(ctx context.Context, obj interface{}, next graphql.Resolver, token *string) (res interface{}, err error)
}

type ComplexityRoot struct {
	Activity struct {
		ActivityType    func(childComplexity int) int
		CourseContentID func(childComplexity int) int
		CourseID        func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		ID              func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UserID          func(childComplexity int) int
	}

	Answer struct {
		Choices       func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Feedback      func(childComplexity int) int
		ID            func(childComplexity int) int
		IsCorrect     func(childComplexity int) int
		PointsAwarded func(childComplexity int) int
		QuestionID    func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		Value         func(childComplexity int) int
		Weight        func(childComplexity int) int
	}

	AnswerChoice struct {
		Feedback  func(childComplexity int) int
		ID        func(childComplexity int) int
		IsCorrect func(childComplexity int) int
		Text      func(childComplexity int) int
		Weight    func(childComplexity int) int
	}

	Bonus struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Percentage  func(childComplexity int) int
	}

	Claims struct {
		Email  func(childComplexity int) int
		ID     func(childComplexity int) int
		Role   func(childComplexity int) int
		UserID func(childComplexity int) int
	}

	Course struct {
		ActivityIds      func(childComplexity int) int
		AssignmentIds    func(childComplexity int) int
		Code             func(childComplexity int) int
		CoverImageURL    func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		Description      func(childComplexity int) int
		EndDate          func(childComplexity int) int
		ForumID          func(childComplexity int) int
		GradeIds         func(childComplexity int) int
		ID               func(childComplexity int) int
		InstructorIds    func(childComplexity int) int
		MatricNumber     func(childComplexity int) int
		ProgramType      func(childComplexity int) int
		Progress         func(childComplexity int) int
		QuizzeIds        func(childComplexity int) int
		Semester         func(childComplexity int) int
		ShortDescription func(childComplexity int) int
		StartDate        func(childComplexity int) int
		Status           func(childComplexity int) int
		Students         func(childComplexity int) int
		Title            func(childComplexity int) int
		Type             func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UserID           func(childComplexity int) int
		Year             func(childComplexity int) int
	}

	CourseProgress struct {
		AssignmentsCompleted func(childComplexity int) int
		LecturesCompleted    func(childComplexity int) int
		OverallProgress      func(childComplexity int) int
		QuizzesCompleted     func(childComplexity int) int
	}

	EvaluationCriteria struct {
		Bonuses            func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		GradingScale       func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsPassFail         func(childComplexity int) int
		PassingScore       func(childComplexity int) int
		Penalties          func(childComplexity int) int
		QuizID             func(childComplexity int) int
		ResubmissionPolicy func(childComplexity int) int
		ScoreDistribution  func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		Weight             func(childComplexity int) int
	}

	File struct {
		Encoding func(childComplexity int) int
		Mimetype func(childComplexity int) int
		Name     func(childComplexity int) int
		Size     func(childComplexity int) int
		URL      func(childComplexity int) int
	}

	Forum struct {
		CourseID    func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		PostIds     func(childComplexity int) int
		TagIds      func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	ForumComment struct {
		Content   func(childComplexity int) int
		CourseID  func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Downvotes func(childComplexity int) int
		FileIds   func(childComplexity int) int
		ID        func(childComplexity int) int
		ParentID  func(childComplexity int) int
		PostID    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Upvotes   func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	ForumPost struct {
		Author     func(childComplexity int) int
		CommentIds func(childComplexity int) int
		Content    func(childComplexity int) int
		CourseID   func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		Downvotes  func(childComplexity int) int
		FileIds    func(childComplexity int) int
		ForumID    func(childComplexity int) int
		ID         func(childComplexity int) int
		Tags       func(childComplexity int) int
		Title      func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		Upvotes    func(childComplexity int) int
		UserID     func(childComplexity int) int
	}

	GlobalSetting struct {
		ID    func(childComplexity int) int
		Key   func(childComplexity int) int
		Type  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Grade struct {
		Comments  func(childComplexity int) int
		CourseID  func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Criteria  func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		QuizID    func(childComplexity int) int
		StudentID func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	GradeScale struct {
		Grade    func(childComplexity int) int
		ID       func(childComplexity int) int
		MaxScore func(childComplexity int) int
		MinScore func(childComplexity int) int
	}

	MatchingPair struct {
		ID       func(childComplexity int) int
		Left     func(childComplexity int) int
		Question func(childComplexity int) int
		Right    func(childComplexity int) int
	}

	Media struct {
		Category        func(childComplexity int) int
		CourseID        func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		DeletedAt       func(childComplexity int) int
		Description     func(childComplexity int) int
		File            func(childComplexity int) int
		ID              func(childComplexity int) int
		MediaType       func(childComplexity int) int
		Tags            func(childComplexity int) int
		Title           func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		UserID          func(childComplexity int) int
		VideoPlayerInfo func(childComplexity int) int
	}

	Mutation struct {
		ChangePassword           func(childComplexity int, refreshToken string, userID string) int
		CreateActivity           func(childComplexity int, input model.CreateActivityInput) int
		CreateCourse             func(childComplexity int, input *model.CreateCourseInput) int
		CreateEvaluationCriteria func(childComplexity int, input model.CreateEvaluationCriteriaInput) int
		CreateForum              func(childComplexity int, input model.CreateForumInput) int
		CreateForumComment       func(childComplexity int, input model.CreateForumCommentInput) int
		CreateForumPost          func(childComplexity int, input model.CreateForumPostInput) int
		CreateGlobalSetting      func(childComplexity int, input model.NewSetting) int
		CreateGrade              func(childComplexity int, input model.CreateGradeInput) int
		CreateMedia              func(childComplexity int, input model.CreatMediaInput) int
		CreateNotification       func(childComplexity int, input model.CreateNotificationInput) int
		CreateQualification      func(childComplexity int, userID string, input model.NewQualification) int
		CreateQuiz               func(childComplexity int, input model.CreateQuizInput) int
		CreateReferee            func(childComplexity int, userID string, input model.NewReferee) int
		CreateTag                func(childComplexity int, input model.CreateTagInput) int
		CreateTarget             func(childComplexity int, input model.CreateTargetInput) int
		CreateUser               func(childComplexity int, input model.NewUser) int
		CreateUserSetting        func(childComplexity int, userID string, input model.NewSetting) int
		DeleteActivity           func(childComplexity int, id string) int
		DeleteCourse             func(childComplexity int, id string) int
		DeleteEvaluationCriteria func(childComplexity int, id string) int
		DeleteForum              func(childComplexity int, id string) int
		DeleteForumComment       func(childComplexity int, id string) int
		DeleteForumPost          func(childComplexity int, id string) int
		DeleteGlobalSetting      func(childComplexity int, id string) int
		DeleteGrade              func(childComplexity int, id string) int
		DeleteManyUsers          func(childComplexity int, ids []string) int
		DeleteMedia              func(childComplexity int, id string) int
		DeleteNotification       func(childComplexity int, id string) int
		DeleteQuiz               func(childComplexity int, id string) int
		DeleteTag                func(childComplexity int, id string) int
		DeleteTarget             func(childComplexity int, id string) int
		DeleteUser               func(childComplexity int, id string) int
		DeleteUserSetting        func(childComplexity int, id string) int
		ForgetPassword           func(childComplexity int, email string) int
		GrantPermission          func(childComplexity int, input model.PermissionInput) int
		Refresh                  func(childComplexity int, refreshToken string) int
		ResetPassword            func(childComplexity int, refreshToken string, password string) int
		RevokePermission         func(childComplexity int, input model.PermissionInput) int
		SignIn                   func(childComplexity int, input model.AuthUser) int
		SignOut                  func(childComplexity int, refreshToken string) int
		SignUp                   func(childComplexity int, input model.NewUser) int
		SubmitQuiz               func(childComplexity int, quizID string, input model.SubmissionInput) int
		UpdateActivity           func(childComplexity int, input model.UpdateActivityInput) int
		UpdateCourse             func(childComplexity int, input interface{}) int
		UpdateEvaluationCriteria func(childComplexity int, id string, input model.UpdateEvaluationCriteriaInput) int
		UpdateForum              func(childComplexity int, id string, input model.UpdateForumInput) int
		UpdateForumComment       func(childComplexity int, id string, input model.UpdateForumCommentInput) int
		UpdateForumPost          func(childComplexity int, id string, input model.UpdateForumPostInput) int
		UpdateGlobalSetting      func(childComplexity int, id string, input model.UpdateSetting) int
		UpdateGrade              func(childComplexity int, id string, input model.UpdateGradeInput) int
		UpdateMedia              func(childComplexity int, input model.UpdateMediaInput) int
		UpdateNotification       func(childComplexity int, id string, input model.UpdateNotificationInput) int
		UpdatePermission         func(childComplexity int, input model.PermissionInput) int
		UpdateProspective        func(childComplexity int, input *model.UpdateProspective) int
		UpdateQuiz               func(childComplexity int, id string, input model.UpdateQuizInput) int
		UpdateTag                func(childComplexity int, id string, input model.UpdateTagInput) int
		UpdateTarget             func(childComplexity int, id string, input model.UpdateTargetInput) int
		UpdateUser               func(childComplexity int, input interface{}) int
		UpdateUserSetting        func(childComplexity int, id string, input model.UpdateSetting) int
		VerifyEmail              func(childComplexity int, refreshToken string) int
	}

	Notification struct {
		CourseID    func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		Link        func(childComplexity int) int
		RecipientID func(childComplexity int) int
		Seen        func(childComplexity int) int
		SenderID    func(childComplexity int) int
		Text        func(childComplexity int) int
		Title       func(childComplexity int) int
		Type        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	Penalty struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Percentage  func(childComplexity int) int
	}

	Permission struct {
		ID          func(childComplexity int) int
		Model       func(childComplexity int) int
		Permissions func(childComplexity int) int
		Role        func(childComplexity int) int
	}

	PlayerInfo struct {
		CurrentTime  func(childComplexity int) int
		Duration     func(childComplexity int) int
		PosterURL    func(childComplexity int) int
		ThumbnailURL func(childComplexity int) int
	}

	Qualification struct {
		CreatedAt      func(childComplexity int) int
		Degree         func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		GraduationYear func(childComplexity int) int
		ID             func(childComplexity int) int
		Institution    func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	Query struct {
		Activities             func(childComplexity int, courseID *string) int
		Activity               func(childComplexity int, id string) int
		AllMedia               func(childComplexity int) int
		Course                 func(childComplexity int, id string) int
		Courses                func(childComplexity int, userID *string) int
		EvaluationCriteria     func(childComplexity int, id string) int
		EvaluationCriterias    func(childComplexity int) int
		Forum                  func(childComplexity int, id string) int
		ForumComment           func(childComplexity int, id string) int
		ForumComments          func(childComplexity int, courseID *string) int
		ForumPost              func(childComplexity int, id string) int
		ForumPosts             func(childComplexity int, courseID *string, tags []string) int
		Forums                 func(childComplexity int, courseID *string) int
		GetPermissionsForModel func(childComplexity int, model model.AllowedModel) int
		GetPermissionsForUser  func(childComplexity int, userID string) int
		GlobalSetting          func(childComplexity int, id string) int
		GlobalSettings         func(childComplexity int, limit *int, offset *int) int
		Grade                  func(childComplexity int, id string) int
		Grades                 func(childComplexity int) int
		Media                  func(childComplexity int, id string) int
		MediaByType            func(childComplexity int, typeArg model.MediaType) int
		Notifications          func(childComplexity int, courseID *string, recipientID *string, read *bool) int
		Quiz                   func(childComplexity int, id string) int
		Quizzes                func(childComplexity int) int
		Submission             func(childComplexity int, id string) int
		Submissions            func(childComplexity int) int
		Target                 func(childComplexity int, id string) int
		Targets                func(childComplexity int, courseID *string) int
		User                   func(childComplexity int, id string) int
		UserSetting            func(childComplexity int, id string) int
		UserSettings           func(childComplexity int, userID string, limit *int, offset *int) int
		Users                  func(childComplexity int) int
	}

	Question struct {
		Categories    func(childComplexity int) int
		Choices       func(childComplexity int) int
		CorrectAnswer func(childComplexity int) int
		Feedback      func(childComplexity int) int
		Hints         func(childComplexity int) int
		ID            func(childComplexity int) int
		MatchingPairs func(childComplexity int) int
		PointValue    func(childComplexity int) int
		Randomize     func(childComplexity int) int
		Text          func(childComplexity int) int
		Type          func(childComplexity int) int
	}

	Quiz struct {
		Categories         func(childComplexity int) int
		Certificate        func(childComplexity int) int
		CourseID           func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		Description        func(childComplexity int) int
		DueDate            func(childComplexity int) int
		Duration           func(childComplexity int) int
		EndTime            func(childComplexity int) int
		GradeIds           func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsLocked           func(childComplexity int) int
		Name               func(childComplexity int) int
		PassingScore       func(childComplexity int) int
		ProctoringMethod   func(childComplexity int) int
		QuestionIds        func(childComplexity int) int
		Questions          func(childComplexity int) int
		QuizType           func(childComplexity int) int
		RandomizeAnswers   func(childComplexity int) int
		RandomizeQuestions func(childComplexity int) int
		ResultsReleaseDate func(childComplexity int) int
		ShuffleQuestions   func(childComplexity int) int
		StartDate          func(childComplexity int) int
		StartTime          func(childComplexity int) int
		SubmissionIds      func(childComplexity int) int
		TimeLimit          func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		WaitTime           func(childComplexity int) int
		Weight             func(childComplexity int) int
	}

	Referee struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Email     func(childComplexity int) int
		FullName  func(childComplexity int) int
		ID        func(childComplexity int) int
		Phone     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Reminder struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Message   func(childComplexity int) int
		SendTime  func(childComplexity int) int
		Sent      func(childComplexity int) int
		Target    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		User      func(childComplexity int) int
	}

	ScoreDistribution struct {
		Grade      func(childComplexity int) int
		ID         func(childComplexity int) int
		MaxScore   func(childComplexity int) int
		MinScore   func(childComplexity int) int
		Percentage func(childComplexity int) int
	}

	Submission struct {
		Answers     func(childComplexity int) int
		CompletedAt func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		EndTime     func(childComplexity int) int
		Feedback    func(childComplexity int) int
		Grade       func(childComplexity int) int
		ID          func(childComplexity int) int
		Points      func(childComplexity int) int
		QuizID      func(childComplexity int) int
		StartTime   func(childComplexity int) int
		StartedAt   func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UserID      func(childComplexity int) int
		Weight      func(childComplexity int) int
	}

	Subscription struct {
		ActivityAdded     func(childComplexity int) int
		ActivityDeleted   func(childComplexity int) int
		ActivityUpdated   func(childComplexity int) int
		NotificationAdded func(childComplexity int) int
	}

	Tag struct {
		CourseIds func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		PostIds   func(childComplexity int) int
	}

	Target struct {
		CompletionDate func(childComplexity int) int
		CourseID       func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		CurrentValue   func(childComplexity int) int
		Description    func(childComplexity int) int
		DueDate        func(childComplexity int) int
		ID             func(childComplexity int) int
		IsCompleted    func(childComplexity int) int
		Name           func(childComplexity int) int
		Reminders      func(childComplexity int) int
		RepeatEndDate  func(childComplexity int) int
		RepeatInterval func(childComplexity int) int
		StartDate      func(childComplexity int) int
		TargetMetric   func(childComplexity int) int
		TargetType     func(childComplexity int) int
		TargetValue    func(childComplexity int) int
		Units          func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	Token struct {
		ExpiresAt func(childComplexity int) int
		Token     func(childComplexity int) int
	}

	User struct {
		About                  func(childComplexity int) int
		AccessToken            func(childComplexity int) int
		Address                func(childComplexity int) int
		AvatarURL              func(childComplexity int) int
		ChurchAddress          func(childComplexity int) int
		ChurchInvolved         func(childComplexity int) int
		ChurchName             func(childComplexity int) int
		City                   func(childComplexity int) int
		ConfirmationMailSentAt func(childComplexity int) int
		ConfirmedAt            func(childComplexity int) int
		Country                func(childComplexity int) int
		Courses                func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		DeletedAt              func(childComplexity int) int
		Dob                    func(childComplexity int) int
		Email                  func(childComplexity int) int
		Files                  func(childComplexity int) int
		FirstName              func(childComplexity int) int
		FullName               func(childComplexity int) int
		Gender                 func(childComplexity int) int
		GodsWorkings           func(childComplexity int) int
		HealthConditions       func(childComplexity int) int
		HealthIssueDescription func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsAuthenticated        func(childComplexity int) int
		IsVerified             func(childComplexity int) int
		LastName               func(childComplexity int) int
		MatricNumber           func(childComplexity int) int
		MiddleName             func(childComplexity int) int
		Nationality            func(childComplexity int) int
		Notifications          func(childComplexity int) int
		PasswordHash           func(childComplexity int) int
		PasswordSalt           func(childComplexity int) int
		PastorEmail            func(childComplexity int) int
		PastorName             func(childComplexity int) int
		PastorPhone            func(childComplexity int) int
		PermissionIds          func(childComplexity int) int
		Permissions            func(childComplexity int) int
		Phone                  func(childComplexity int) int
		Platform               func(childComplexity int) int
		Profession             func(childComplexity int) int
		Program                func(childComplexity int) int
		Progress               func(childComplexity int) int
		Qualifications         func(childComplexity int) int
		Reason                 func(childComplexity int) int
		Referees               func(childComplexity int) int
		RefreshToken           func(childComplexity int) int
		RegNumber              func(childComplexity int) int
		Role                   func(childComplexity int) int
		SalvationBrief         func(childComplexity int) int
		Scholarship            func(childComplexity int) int
		ScholarshipReason      func(childComplexity int) int
		State                  func(childComplexity int) int
		Status                 func(childComplexity int) int
		TimeZone               func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		Username               func(childComplexity int) int
		VerifycationToken      func(childComplexity int) int
		Wallet                 func(childComplexity int) int
		Zip                    func(childComplexity int) int
	}

	UserSetting struct {
		ID     func(childComplexity int) int
		Key    func(childComplexity int) int
		Type   func(childComplexity int) int
		UserID func(childComplexity int) int
		Value  func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateEvaluationCriteria(ctx context.Context, input model.CreateEvaluationCriteriaInput) (*model.EvaluationCriteria, error)
	UpdateEvaluationCriteria(ctx context.Context, id string, input model.UpdateEvaluationCriteriaInput) (*model.EvaluationCriteria, error)
	DeleteEvaluationCriteria(ctx context.Context, id string) (*model.EvaluationCriteria, error)
	CreateActivity(ctx context.Context, input model.CreateActivityInput) (*model.Activity, error)
	UpdateActivity(ctx context.Context, input model.UpdateActivityInput) (*model.Activity, error)
	DeleteActivity(ctx context.Context, id string) (bool, error)
	Refresh(ctx context.Context, refreshToken string) (*model.User, error)
	SignOut(ctx context.Context, refreshToken string) (*model.User, error)
	SignIn(ctx context.Context, input model.AuthUser) (*model.User, error)
	SignUp(ctx context.Context, input model.NewUser) (*model.User, error)
	ForgetPassword(ctx context.Context, email string) (*model.User, error)
	ResetPassword(ctx context.Context, refreshToken string, password string) (*model.User, error)
	ChangePassword(ctx context.Context, refreshToken string, userID string) (*model.User, error)
	VerifyEmail(ctx context.Context, refreshToken string) (*model.User, error)
	CreateCourse(ctx context.Context, input *model.CreateCourseInput) (*model.Course, error)
	UpdateCourse(ctx context.Context, input interface{}) (*model.Course, error)
	DeleteCourse(ctx context.Context, id string) (*model.Course, error)
	CreateForum(ctx context.Context, input model.CreateForumInput) (*model.Forum, error)
	UpdateForum(ctx context.Context, id string, input model.UpdateForumInput) (*model.Forum, error)
	DeleteForum(ctx context.Context, id string) (*model.Forum, error)
	CreateForumPost(ctx context.Context, input model.CreateForumPostInput) (*model.ForumPost, error)
	UpdateForumPost(ctx context.Context, id string, input model.UpdateForumPostInput) (*model.ForumPost, error)
	DeleteForumPost(ctx context.Context, id string) (*model.ForumPost, error)
	CreateForumComment(ctx context.Context, input model.CreateForumCommentInput) (*model.ForumComment, error)
	UpdateForumComment(ctx context.Context, id string, input model.UpdateForumCommentInput) (*model.ForumComment, error)
	DeleteForumComment(ctx context.Context, id string) (*model.ForumComment, error)
	CreateTag(ctx context.Context, input model.CreateTagInput) (*model.Tag, error)
	UpdateTag(ctx context.Context, id string, input model.UpdateTagInput) (*model.Tag, error)
	DeleteTag(ctx context.Context, id string) (*model.Tag, error)
	CreateGrade(ctx context.Context, input model.CreateGradeInput) (*model.Grade, error)
	UpdateGrade(ctx context.Context, id string, input model.UpdateGradeInput) (*model.Grade, error)
	DeleteGrade(ctx context.Context, id string) (bool, error)
	CreateMedia(ctx context.Context, input model.CreatMediaInput) (*model.Media, error)
	UpdateMedia(ctx context.Context, input model.UpdateMediaInput) (*model.Media, error)
	DeleteMedia(ctx context.Context, id string) (*model.Media, error)
	CreateNotification(ctx context.Context, input model.CreateNotificationInput) (*model.Notification, error)
	UpdateNotification(ctx context.Context, id string, input model.UpdateNotificationInput) (*model.Notification, error)
	DeleteNotification(ctx context.Context, id string) (*model.Notification, error)
	UpdatePermission(ctx context.Context, input model.PermissionInput) (*model.Permission, error)
	GrantPermission(ctx context.Context, input model.PermissionInput) (*model.Permission, error)
	RevokePermission(ctx context.Context, input model.PermissionInput) (*model.Permission, error)
	CreateQuiz(ctx context.Context, input model.CreateQuizInput) (*model.Quiz, error)
	UpdateQuiz(ctx context.Context, id string, input model.UpdateQuizInput) (*model.Quiz, error)
	DeleteQuiz(ctx context.Context, id string) (bool, error)
	SubmitQuiz(ctx context.Context, quizID string, input model.SubmissionInput) (*model.Submission, error)
	CreateUserSetting(ctx context.Context, userID string, input model.NewSetting) (*model.UserSetting, error)
	UpdateUserSetting(ctx context.Context, id string, input model.UpdateSetting) (*model.UserSetting, error)
	DeleteUserSetting(ctx context.Context, id string) (bool, error)
	CreateGlobalSetting(ctx context.Context, input model.NewSetting) (*model.GlobalSetting, error)
	UpdateGlobalSetting(ctx context.Context, id string, input model.UpdateSetting) (*model.GlobalSetting, error)
	DeleteGlobalSetting(ctx context.Context, id string) (bool, error)
	CreateTarget(ctx context.Context, input model.CreateTargetInput) (*model.Target, error)
	UpdateTarget(ctx context.Context, id string, input model.UpdateTargetInput) (*model.Target, error)
	DeleteTarget(ctx context.Context, id string) (*model.Target, error)
	CreateUser(ctx context.Context, input model.NewUser) (*model.User, error)
	CreateReferee(ctx context.Context, userID string, input model.NewReferee) (*model.Referee, error)
	CreateQualification(ctx context.Context, userID string, input model.NewQualification) (*model.Qualification, error)
	UpdateUser(ctx context.Context, input interface{}) (*model.User, error)
	UpdateProspective(ctx context.Context, input *model.UpdateProspective) (*model.User, error)
	DeleteUser(ctx context.Context, id string) (*model.User, error)
	DeleteManyUsers(ctx context.Context, ids []string) (*model.User, error)
}
type QueryResolver interface {
	EvaluationCriterias(ctx context.Context) ([]model.EvaluationCriteria, error)
	EvaluationCriteria(ctx context.Context, id string) (*model.EvaluationCriteria, error)
	Activities(ctx context.Context, courseID *string) ([]model.Activity, error)
	Activity(ctx context.Context, id string) (*model.Activity, error)
	Courses(ctx context.Context, userID *string) ([]model.Course, error)
	Course(ctx context.Context, id string) (*model.Course, error)
	Forums(ctx context.Context, courseID *string) ([]model.Forum, error)
	Forum(ctx context.Context, id string) (*model.Forum, error)
	ForumPosts(ctx context.Context, courseID *string, tags []string) ([]model.ForumPost, error)
	ForumPost(ctx context.Context, id string) (*model.ForumPost, error)
	ForumComments(ctx context.Context, courseID *string) ([]model.ForumComment, error)
	ForumComment(ctx context.Context, id string) (*model.ForumComment, error)
	Grades(ctx context.Context) ([]model.Grade, error)
	Grade(ctx context.Context, id string) (*model.Grade, error)
	Media(ctx context.Context, id string) (*model.Media, error)
	MediaByType(ctx context.Context, typeArg model.MediaType) ([]model.Media, error)
	AllMedia(ctx context.Context) ([]model.Media, error)
	Notifications(ctx context.Context, courseID *string, recipientID *string, read *bool) ([]model.Notification, error)
	GetPermissionsForUser(ctx context.Context, userID string) ([]model.Permission, error)
	GetPermissionsForModel(ctx context.Context, model model.AllowedModel) ([]model.Permission, error)
	Quiz(ctx context.Context, id string) (*model.Quiz, error)
	Quizzes(ctx context.Context) ([]model.Quiz, error)
	Submission(ctx context.Context, id string) (*model.Submission, error)
	Submissions(ctx context.Context) ([]model.Submission, error)
	UserSetting(ctx context.Context, id string) (*model.UserSetting, error)
	UserSettings(ctx context.Context, userID string, limit *int, offset *int) ([]model.UserSetting, error)
	GlobalSetting(ctx context.Context, id string) (*model.GlobalSetting, error)
	GlobalSettings(ctx context.Context, limit *int, offset *int) ([]model.GlobalSetting, error)
	Targets(ctx context.Context, courseID *string) ([]model.Target, error)
	Target(ctx context.Context, id string) (*model.Target, error)
	Users(ctx context.Context) ([]*model.User, error)
	User(ctx context.Context, id string) (*model.User, error)
}
type SubscriptionResolver interface {
	NotificationAdded(ctx context.Context) (<-chan *model.Notification, error)
	ActivityAdded(ctx context.Context) (<-chan *model.Activity, error)
	ActivityUpdated(ctx context.Context) (<-chan *model.Activity, error)
	ActivityDeleted(ctx context.Context) (<-chan *string, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Activity.activityType":
		if e.complexity.Activity.ActivityType == nil {
			break
		}

		return e.complexity.Activity.ActivityType(childComplexity), true

	case "Activity.courseContentID":
		if e.complexity.Activity.CourseContentID == nil {
			break
		}

		return e.complexity.Activity.CourseContentID(childComplexity), true

	case "Activity.courseID":
		if e.complexity.Activity.CourseID == nil {
			break
		}

		return e.complexity.Activity.CourseID(childComplexity), true

	case "Activity.createdAt":
		if e.complexity.Activity.CreatedAt == nil {
			break
		}

		return e.complexity.Activity.CreatedAt(childComplexity), true

	case "Activity.deletedAt":
		if e.complexity.Activity.DeletedAt == nil {
			break
		}

		return e.complexity.Activity.DeletedAt(childComplexity), true

	case "Activity.id":
		if e.complexity.Activity.ID == nil {
			break
		}

		return e.complexity.Activity.ID(childComplexity), true

	case "Activity.updatedAt":
		if e.complexity.Activity.UpdatedAt == nil {
			break
		}

		return e.complexity.Activity.UpdatedAt(childComplexity), true

	case "Activity.userID":
		if e.complexity.Activity.UserID == nil {
			break
		}

		return e.complexity.Activity.UserID(childComplexity), true

	case "Answer.choices":
		if e.complexity.Answer.Choices == nil {
			break
		}

		return e.complexity.Answer.Choices(childComplexity), true

	case "Answer.createdAt":
		if e.complexity.Answer.CreatedAt == nil {
			break
		}

		return e.complexity.Answer.CreatedAt(childComplexity), true

	case "Answer.feedback":
		if e.complexity.Answer.Feedback == nil {
			break
		}

		return e.complexity.Answer.Feedback(childComplexity), true

	case "Answer.id":
		if e.complexity.Answer.ID == nil {
			break
		}

		return e.complexity.Answer.ID(childComplexity), true

	case "Answer.isCorrect":
		if e.complexity.Answer.IsCorrect == nil {
			break
		}

		return e.complexity.Answer.IsCorrect(childComplexity), true

	case "Answer.pointsAwarded":
		if e.complexity.Answer.PointsAwarded == nil {
			break
		}

		return e.complexity.Answer.PointsAwarded(childComplexity), true

	case "Answer.questionId":
		if e.complexity.Answer.QuestionID == nil {
			break
		}

		return e.complexity.Answer.QuestionID(childComplexity), true

	case "Answer.updatedAt":
		if e.complexity.Answer.UpdatedAt == nil {
			break
		}

		return e.complexity.Answer.UpdatedAt(childComplexity), true

	case "Answer.value":
		if e.complexity.Answer.Value == nil {
			break
		}

		return e.complexity.Answer.Value(childComplexity), true

	case "Answer.weight":
		if e.complexity.Answer.Weight == nil {
			break
		}

		return e.complexity.Answer.Weight(childComplexity), true

	case "AnswerChoice.feedback":
		if e.complexity.AnswerChoice.Feedback == nil {
			break
		}

		return e.complexity.AnswerChoice.Feedback(childComplexity), true

	case "AnswerChoice.id":
		if e.complexity.AnswerChoice.ID == nil {
			break
		}

		return e.complexity.AnswerChoice.ID(childComplexity), true

	case "AnswerChoice.isCorrect":
		if e.complexity.AnswerChoice.IsCorrect == nil {
			break
		}

		return e.complexity.AnswerChoice.IsCorrect(childComplexity), true

	case "AnswerChoice.text":
		if e.complexity.AnswerChoice.Text == nil {
			break
		}

		return e.complexity.AnswerChoice.Text(childComplexity), true

	case "AnswerChoice.weight":
		if e.complexity.AnswerChoice.Weight == nil {
			break
		}

		return e.complexity.AnswerChoice.Weight(childComplexity), true

	case "Bonus.description":
		if e.complexity.Bonus.Description == nil {
			break
		}

		return e.complexity.Bonus.Description(childComplexity), true

	case "Bonus.id":
		if e.complexity.Bonus.ID == nil {
			break
		}

		return e.complexity.Bonus.ID(childComplexity), true

	case "Bonus.name":
		if e.complexity.Bonus.Name == nil {
			break
		}

		return e.complexity.Bonus.Name(childComplexity), true

	case "Bonus.percentage":
		if e.complexity.Bonus.Percentage == nil {
			break
		}

		return e.complexity.Bonus.Percentage(childComplexity), true

	case "Claims.email":
		if e.complexity.Claims.Email == nil {
			break
		}

		return e.complexity.Claims.Email(childComplexity), true

	case "Claims.id":
		if e.complexity.Claims.ID == nil {
			break
		}

		return e.complexity.Claims.ID(childComplexity), true

	case "Claims.Role":
		if e.complexity.Claims.Role == nil {
			break
		}

		return e.complexity.Claims.Role(childComplexity), true

	case "Claims.userId":
		if e.complexity.Claims.UserID == nil {
			break
		}

		return e.complexity.Claims.UserID(childComplexity), true

	case "Course.activityIds":
		if e.complexity.Course.ActivityIds == nil {
			break
		}

		return e.complexity.Course.ActivityIds(childComplexity), true

	case "Course.assignmentIds":
		if e.complexity.Course.AssignmentIds == nil {
			break
		}

		return e.complexity.Course.AssignmentIds(childComplexity), true

	case "Course.code":
		if e.complexity.Course.Code == nil {
			break
		}

		return e.complexity.Course.Code(childComplexity), true

	case "Course.coverImageUrl":
		if e.complexity.Course.CoverImageURL == nil {
			break
		}

		return e.complexity.Course.CoverImageURL(childComplexity), true

	case "Course.createdAt":
		if e.complexity.Course.CreatedAt == nil {
			break
		}

		return e.complexity.Course.CreatedAt(childComplexity), true

	case "Course.deletedAt":
		if e.complexity.Course.DeletedAt == nil {
			break
		}

		return e.complexity.Course.DeletedAt(childComplexity), true

	case "Course.description":
		if e.complexity.Course.Description == nil {
			break
		}

		return e.complexity.Course.Description(childComplexity), true

	case "Course.endDate":
		if e.complexity.Course.EndDate == nil {
			break
		}

		return e.complexity.Course.EndDate(childComplexity), true

	case "Course.forumId":
		if e.complexity.Course.ForumID == nil {
			break
		}

		return e.complexity.Course.ForumID(childComplexity), true

	case "Course.gradeIds":
		if e.complexity.Course.GradeIds == nil {
			break
		}

		return e.complexity.Course.GradeIds(childComplexity), true

	case "Course.id":
		if e.complexity.Course.ID == nil {
			break
		}

		return e.complexity.Course.ID(childComplexity), true

	case "Course.instructorIds":
		if e.complexity.Course.InstructorIds == nil {
			break
		}

		return e.complexity.Course.InstructorIds(childComplexity), true

	case "Course.matricNumber":
		if e.complexity.Course.MatricNumber == nil {
			break
		}

		return e.complexity.Course.MatricNumber(childComplexity), true

	case "Course.programType":
		if e.complexity.Course.ProgramType == nil {
			break
		}

		return e.complexity.Course.ProgramType(childComplexity), true

	case "Course.progress":
		if e.complexity.Course.Progress == nil {
			break
		}

		return e.complexity.Course.Progress(childComplexity), true

	case "Course.quizzeIds":
		if e.complexity.Course.QuizzeIds == nil {
			break
		}

		return e.complexity.Course.QuizzeIds(childComplexity), true

	case "Course.semester":
		if e.complexity.Course.Semester == nil {
			break
		}

		return e.complexity.Course.Semester(childComplexity), true

	case "Course.shortDescription":
		if e.complexity.Course.ShortDescription == nil {
			break
		}

		return e.complexity.Course.ShortDescription(childComplexity), true

	case "Course.startDate":
		if e.complexity.Course.StartDate == nil {
			break
		}

		return e.complexity.Course.StartDate(childComplexity), true

	case "Course.status":
		if e.complexity.Course.Status == nil {
			break
		}

		return e.complexity.Course.Status(childComplexity), true

	case "Course.students":
		if e.complexity.Course.Students == nil {
			break
		}

		return e.complexity.Course.Students(childComplexity), true

	case "Course.title":
		if e.complexity.Course.Title == nil {
			break
		}

		return e.complexity.Course.Title(childComplexity), true

	case "Course.type":
		if e.complexity.Course.Type == nil {
			break
		}

		return e.complexity.Course.Type(childComplexity), true

	case "Course.updatedAt":
		if e.complexity.Course.UpdatedAt == nil {
			break
		}

		return e.complexity.Course.UpdatedAt(childComplexity), true

	case "Course.userId":
		if e.complexity.Course.UserID == nil {
			break
		}

		return e.complexity.Course.UserID(childComplexity), true

	case "Course.year":
		if e.complexity.Course.Year == nil {
			break
		}

		return e.complexity.Course.Year(childComplexity), true

	case "CourseProgress.assignmentsCompleted":
		if e.complexity.CourseProgress.AssignmentsCompleted == nil {
			break
		}

		return e.complexity.CourseProgress.AssignmentsCompleted(childComplexity), true

	case "CourseProgress.lecturesCompleted":
		if e.complexity.CourseProgress.LecturesCompleted == nil {
			break
		}

		return e.complexity.CourseProgress.LecturesCompleted(childComplexity), true

	case "CourseProgress.overallProgress":
		if e.complexity.CourseProgress.OverallProgress == nil {
			break
		}

		return e.complexity.CourseProgress.OverallProgress(childComplexity), true

	case "CourseProgress.quizzesCompleted":
		if e.complexity.CourseProgress.QuizzesCompleted == nil {
			break
		}

		return e.complexity.CourseProgress.QuizzesCompleted(childComplexity), true

	case "EvaluationCriteria.bonuses":
		if e.complexity.EvaluationCriteria.Bonuses == nil {
			break
		}

		return e.complexity.EvaluationCriteria.Bonuses(childComplexity), true

	case "EvaluationCriteria.createdAt":
		if e.complexity.EvaluationCriteria.CreatedAt == nil {
			break
		}

		return e.complexity.EvaluationCriteria.CreatedAt(childComplexity), true

	case "EvaluationCriteria.deletedAt":
		if e.complexity.EvaluationCriteria.DeletedAt == nil {
			break
		}

		return e.complexity.EvaluationCriteria.DeletedAt(childComplexity), true

	case "EvaluationCriteria.gradingScale":
		if e.complexity.EvaluationCriteria.GradingScale == nil {
			break
		}

		return e.complexity.EvaluationCriteria.GradingScale(childComplexity), true

	case "EvaluationCriteria.id":
		if e.complexity.EvaluationCriteria.ID == nil {
			break
		}

		return e.complexity.EvaluationCriteria.ID(childComplexity), true

	case "EvaluationCriteria.isPassFail":
		if e.complexity.EvaluationCriteria.IsPassFail == nil {
			break
		}

		return e.complexity.EvaluationCriteria.IsPassFail(childComplexity), true

	case "EvaluationCriteria.passingScore":
		if e.complexity.EvaluationCriteria.PassingScore == nil {
			break
		}

		return e.complexity.EvaluationCriteria.PassingScore(childComplexity), true

	case "EvaluationCriteria.penalties":
		if e.complexity.EvaluationCriteria.Penalties == nil {
			break
		}

		return e.complexity.EvaluationCriteria.Penalties(childComplexity), true

	case "EvaluationCriteria.quizId":
		if e.complexity.EvaluationCriteria.QuizID == nil {
			break
		}

		return e.complexity.EvaluationCriteria.QuizID(childComplexity), true

	case "EvaluationCriteria.resubmissionPolicy":
		if e.complexity.EvaluationCriteria.ResubmissionPolicy == nil {
			break
		}

		return e.complexity.EvaluationCriteria.ResubmissionPolicy(childComplexity), true

	case "EvaluationCriteria.scoreDistribution":
		if e.complexity.EvaluationCriteria.ScoreDistribution == nil {
			break
		}

		return e.complexity.EvaluationCriteria.ScoreDistribution(childComplexity), true

	case "EvaluationCriteria.updatedAt":
		if e.complexity.EvaluationCriteria.UpdatedAt == nil {
			break
		}

		return e.complexity.EvaluationCriteria.UpdatedAt(childComplexity), true

	case "EvaluationCriteria.weight":
		if e.complexity.EvaluationCriteria.Weight == nil {
			break
		}

		return e.complexity.EvaluationCriteria.Weight(childComplexity), true

	case "File.encoding":
		if e.complexity.File.Encoding == nil {
			break
		}

		return e.complexity.File.Encoding(childComplexity), true

	case "File.mimetype":
		if e.complexity.File.Mimetype == nil {
			break
		}

		return e.complexity.File.Mimetype(childComplexity), true

	case "File.name":
		if e.complexity.File.Name == nil {
			break
		}

		return e.complexity.File.Name(childComplexity), true

	case "File.size":
		if e.complexity.File.Size == nil {
			break
		}

		return e.complexity.File.Size(childComplexity), true

	case "File.url":
		if e.complexity.File.URL == nil {
			break
		}

		return e.complexity.File.URL(childComplexity), true

	case "Forum.courseId":
		if e.complexity.Forum.CourseID == nil {
			break
		}

		return e.complexity.Forum.CourseID(childComplexity), true

	case "Forum.createdAt":
		if e.complexity.Forum.CreatedAt == nil {
			break
		}

		return e.complexity.Forum.CreatedAt(childComplexity), true

	case "Forum.deletedAt":
		if e.complexity.Forum.DeletedAt == nil {
			break
		}

		return e.complexity.Forum.DeletedAt(childComplexity), true

	case "Forum.description":
		if e.complexity.Forum.Description == nil {
			break
		}

		return e.complexity.Forum.Description(childComplexity), true

	case "Forum.id":
		if e.complexity.Forum.ID == nil {
			break
		}

		return e.complexity.Forum.ID(childComplexity), true

	case "Forum.name":
		if e.complexity.Forum.Name == nil {
			break
		}

		return e.complexity.Forum.Name(childComplexity), true

	case "Forum.postIds":
		if e.complexity.Forum.PostIds == nil {
			break
		}

		return e.complexity.Forum.PostIds(childComplexity), true

	case "Forum.tagIds":
		if e.complexity.Forum.TagIds == nil {
			break
		}

		return e.complexity.Forum.TagIds(childComplexity), true

	case "Forum.updatedAt":
		if e.complexity.Forum.UpdatedAt == nil {
			break
		}

		return e.complexity.Forum.UpdatedAt(childComplexity), true

	case "ForumComment.content":
		if e.complexity.ForumComment.Content == nil {
			break
		}

		return e.complexity.ForumComment.Content(childComplexity), true

	case "ForumComment.courseId":
		if e.complexity.ForumComment.CourseID == nil {
			break
		}

		return e.complexity.ForumComment.CourseID(childComplexity), true

	case "ForumComment.createdAt":
		if e.complexity.ForumComment.CreatedAt == nil {
			break
		}

		return e.complexity.ForumComment.CreatedAt(childComplexity), true

	case "ForumComment.deletedAt":
		if e.complexity.ForumComment.DeletedAt == nil {
			break
		}

		return e.complexity.ForumComment.DeletedAt(childComplexity), true

	case "ForumComment.downvotes":
		if e.complexity.ForumComment.Downvotes == nil {
			break
		}

		return e.complexity.ForumComment.Downvotes(childComplexity), true

	case "ForumComment.fileIds":
		if e.complexity.ForumComment.FileIds == nil {
			break
		}

		return e.complexity.ForumComment.FileIds(childComplexity), true

	case "ForumComment.id":
		if e.complexity.ForumComment.ID == nil {
			break
		}

		return e.complexity.ForumComment.ID(childComplexity), true

	case "ForumComment.parentId":
		if e.complexity.ForumComment.ParentID == nil {
			break
		}

		return e.complexity.ForumComment.ParentID(childComplexity), true

	case "ForumComment.postId":
		if e.complexity.ForumComment.PostID == nil {
			break
		}

		return e.complexity.ForumComment.PostID(childComplexity), true

	case "ForumComment.updatedAt":
		if e.complexity.ForumComment.UpdatedAt == nil {
			break
		}

		return e.complexity.ForumComment.UpdatedAt(childComplexity), true

	case "ForumComment.upvotes":
		if e.complexity.ForumComment.Upvotes == nil {
			break
		}

		return e.complexity.ForumComment.Upvotes(childComplexity), true

	case "ForumComment.userId":
		if e.complexity.ForumComment.UserID == nil {
			break
		}

		return e.complexity.ForumComment.UserID(childComplexity), true

	case "ForumPost.author":
		if e.complexity.ForumPost.Author == nil {
			break
		}

		return e.complexity.ForumPost.Author(childComplexity), true

	case "ForumPost.commentIds":
		if e.complexity.ForumPost.CommentIds == nil {
			break
		}

		return e.complexity.ForumPost.CommentIds(childComplexity), true

	case "ForumPost.content":
		if e.complexity.ForumPost.Content == nil {
			break
		}

		return e.complexity.ForumPost.Content(childComplexity), true

	case "ForumPost.courseID":
		if e.complexity.ForumPost.CourseID == nil {
			break
		}

		return e.complexity.ForumPost.CourseID(childComplexity), true

	case "ForumPost.createdAt":
		if e.complexity.ForumPost.CreatedAt == nil {
			break
		}

		return e.complexity.ForumPost.CreatedAt(childComplexity), true

	case "ForumPost.deletedAt":
		if e.complexity.ForumPost.DeletedAt == nil {
			break
		}

		return e.complexity.ForumPost.DeletedAt(childComplexity), true

	case "ForumPost.downvotes":
		if e.complexity.ForumPost.Downvotes == nil {
			break
		}

		return e.complexity.ForumPost.Downvotes(childComplexity), true

	case "ForumPost.fileIds":
		if e.complexity.ForumPost.FileIds == nil {
			break
		}

		return e.complexity.ForumPost.FileIds(childComplexity), true

	case "ForumPost.forumId":
		if e.complexity.ForumPost.ForumID == nil {
			break
		}

		return e.complexity.ForumPost.ForumID(childComplexity), true

	case "ForumPost.id":
		if e.complexity.ForumPost.ID == nil {
			break
		}

		return e.complexity.ForumPost.ID(childComplexity), true

	case "ForumPost.tags":
		if e.complexity.ForumPost.Tags == nil {
			break
		}

		return e.complexity.ForumPost.Tags(childComplexity), true

	case "ForumPost.title":
		if e.complexity.ForumPost.Title == nil {
			break
		}

		return e.complexity.ForumPost.Title(childComplexity), true

	case "ForumPost.updatedAt":
		if e.complexity.ForumPost.UpdatedAt == nil {
			break
		}

		return e.complexity.ForumPost.UpdatedAt(childComplexity), true

	case "ForumPost.upvotes":
		if e.complexity.ForumPost.Upvotes == nil {
			break
		}

		return e.complexity.ForumPost.Upvotes(childComplexity), true

	case "ForumPost.userId":
		if e.complexity.ForumPost.UserID == nil {
			break
		}

		return e.complexity.ForumPost.UserID(childComplexity), true

	case "GlobalSetting.id":
		if e.complexity.GlobalSetting.ID == nil {
			break
		}

		return e.complexity.GlobalSetting.ID(childComplexity), true

	case "GlobalSetting.key":
		if e.complexity.GlobalSetting.Key == nil {
			break
		}

		return e.complexity.GlobalSetting.Key(childComplexity), true

	case "GlobalSetting.type":
		if e.complexity.GlobalSetting.Type == nil {
			break
		}

		return e.complexity.GlobalSetting.Type(childComplexity), true

	case "GlobalSetting.value":
		if e.complexity.GlobalSetting.Value == nil {
			break
		}

		return e.complexity.GlobalSetting.Value(childComplexity), true

	case "Grade.comments":
		if e.complexity.Grade.Comments == nil {
			break
		}

		return e.complexity.Grade.Comments(childComplexity), true

	case "Grade.courseId":
		if e.complexity.Grade.CourseID == nil {
			break
		}

		return e.complexity.Grade.CourseID(childComplexity), true

	case "Grade.createdAt":
		if e.complexity.Grade.CreatedAt == nil {
			break
		}

		return e.complexity.Grade.CreatedAt(childComplexity), true

	case "Grade.criteria":
		if e.complexity.Grade.Criteria == nil {
			break
		}

		return e.complexity.Grade.Criteria(childComplexity), true

	case "Grade.deletedAt":
		if e.complexity.Grade.DeletedAt == nil {
			break
		}

		return e.complexity.Grade.DeletedAt(childComplexity), true

	case "Grade.id":
		if e.complexity.Grade.ID == nil {
			break
		}

		return e.complexity.Grade.ID(childComplexity), true

	case "Grade.quizId":
		if e.complexity.Grade.QuizID == nil {
			break
		}

		return e.complexity.Grade.QuizID(childComplexity), true

	case "Grade.studentId":
		if e.complexity.Grade.StudentID == nil {
			break
		}

		return e.complexity.Grade.StudentID(childComplexity), true

	case "Grade.updatedAt":
		if e.complexity.Grade.UpdatedAt == nil {
			break
		}

		return e.complexity.Grade.UpdatedAt(childComplexity), true

	case "Grade.value":
		if e.complexity.Grade.Value == nil {
			break
		}

		return e.complexity.Grade.Value(childComplexity), true

	case "GradeScale.grade":
		if e.complexity.GradeScale.Grade == nil {
			break
		}

		return e.complexity.GradeScale.Grade(childComplexity), true

	case "GradeScale.id":
		if e.complexity.GradeScale.ID == nil {
			break
		}

		return e.complexity.GradeScale.ID(childComplexity), true

	case "GradeScale.maxScore":
		if e.complexity.GradeScale.MaxScore == nil {
			break
		}

		return e.complexity.GradeScale.MaxScore(childComplexity), true

	case "GradeScale.minScore":
		if e.complexity.GradeScale.MinScore == nil {
			break
		}

		return e.complexity.GradeScale.MinScore(childComplexity), true

	case "MatchingPair.id":
		if e.complexity.MatchingPair.ID == nil {
			break
		}

		return e.complexity.MatchingPair.ID(childComplexity), true

	case "MatchingPair.left":
		if e.complexity.MatchingPair.Left == nil {
			break
		}

		return e.complexity.MatchingPair.Left(childComplexity), true

	case "MatchingPair.question":
		if e.complexity.MatchingPair.Question == nil {
			break
		}

		return e.complexity.MatchingPair.Question(childComplexity), true

	case "MatchingPair.right":
		if e.complexity.MatchingPair.Right == nil {
			break
		}

		return e.complexity.MatchingPair.Right(childComplexity), true

	case "Media.category":
		if e.complexity.Media.Category == nil {
			break
		}

		return e.complexity.Media.Category(childComplexity), true

	case "Media.courseId":
		if e.complexity.Media.CourseID == nil {
			break
		}

		return e.complexity.Media.CourseID(childComplexity), true

	case "Media.createdAt":
		if e.complexity.Media.CreatedAt == nil {
			break
		}

		return e.complexity.Media.CreatedAt(childComplexity), true

	case "Media.deletedAt":
		if e.complexity.Media.DeletedAt == nil {
			break
		}

		return e.complexity.Media.DeletedAt(childComplexity), true

	case "Media.description":
		if e.complexity.Media.Description == nil {
			break
		}

		return e.complexity.Media.Description(childComplexity), true

	case "Media.file":
		if e.complexity.Media.File == nil {
			break
		}

		return e.complexity.Media.File(childComplexity), true

	case "Media.id":
		if e.complexity.Media.ID == nil {
			break
		}

		return e.complexity.Media.ID(childComplexity), true

	case "Media.mediaType":
		if e.complexity.Media.MediaType == nil {
			break
		}

		return e.complexity.Media.MediaType(childComplexity), true

	case "Media.tags":
		if e.complexity.Media.Tags == nil {
			break
		}

		return e.complexity.Media.Tags(childComplexity), true

	case "Media.title":
		if e.complexity.Media.Title == nil {
			break
		}

		return e.complexity.Media.Title(childComplexity), true

	case "Media.updatedAt":
		if e.complexity.Media.UpdatedAt == nil {
			break
		}

		return e.complexity.Media.UpdatedAt(childComplexity), true

	case "Media.userId":
		if e.complexity.Media.UserID == nil {
			break
		}

		return e.complexity.Media.UserID(childComplexity), true

	case "Media.videoPlayerInfo":
		if e.complexity.Media.VideoPlayerInfo == nil {
			break
		}

		return e.complexity.Media.VideoPlayerInfo(childComplexity), true

	case "Mutation.changePassword":
		if e.complexity.Mutation.ChangePassword == nil {
			break
		}

		args, err := ec.field_Mutation_changePassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangePassword(childComplexity, args["refreshToken"].(string), args["userId"].(string)), true

	case "Mutation.createActivity":
		if e.complexity.Mutation.CreateActivity == nil {
			break
		}

		args, err := ec.field_Mutation_createActivity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateActivity(childComplexity, args["input"].(model.CreateActivityInput)), true

	case "Mutation.createCourse":
		if e.complexity.Mutation.CreateCourse == nil {
			break
		}

		args, err := ec.field_Mutation_createCourse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCourse(childComplexity, args["input"].(*model.CreateCourseInput)), true

	case "Mutation.createEvaluationCriteria":
		if e.complexity.Mutation.CreateEvaluationCriteria == nil {
			break
		}

		args, err := ec.field_Mutation_createEvaluationCriteria_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEvaluationCriteria(childComplexity, args["input"].(model.CreateEvaluationCriteriaInput)), true

	case "Mutation.createForum":
		if e.complexity.Mutation.CreateForum == nil {
			break
		}

		args, err := ec.field_Mutation_createForum_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateForum(childComplexity, args["input"].(model.CreateForumInput)), true

	case "Mutation.createForumComment":
		if e.complexity.Mutation.CreateForumComment == nil {
			break
		}

		args, err := ec.field_Mutation_createForumComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateForumComment(childComplexity, args["input"].(model.CreateForumCommentInput)), true

	case "Mutation.createForumPost":
		if e.complexity.Mutation.CreateForumPost == nil {
			break
		}

		args, err := ec.field_Mutation_createForumPost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateForumPost(childComplexity, args["input"].(model.CreateForumPostInput)), true

	case "Mutation.createGlobalSetting":
		if e.complexity.Mutation.CreateGlobalSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createGlobalSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGlobalSetting(childComplexity, args["input"].(model.NewSetting)), true

	case "Mutation.createGrade":
		if e.complexity.Mutation.CreateGrade == nil {
			break
		}

		args, err := ec.field_Mutation_createGrade_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateGrade(childComplexity, args["input"].(model.CreateGradeInput)), true

	case "Mutation.createMedia":
		if e.complexity.Mutation.CreateMedia == nil {
			break
		}

		args, err := ec.field_Mutation_createMedia_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMedia(childComplexity, args["input"].(model.CreatMediaInput)), true

	case "Mutation.createNotification":
		if e.complexity.Mutation.CreateNotification == nil {
			break
		}

		args, err := ec.field_Mutation_createNotification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateNotification(childComplexity, args["input"].(model.CreateNotificationInput)), true

	case "Mutation.createQualification":
		if e.complexity.Mutation.CreateQualification == nil {
			break
		}

		args, err := ec.field_Mutation_createQualification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateQualification(childComplexity, args["userId"].(string), args["input"].(model.NewQualification)), true

	case "Mutation.createQuiz":
		if e.complexity.Mutation.CreateQuiz == nil {
			break
		}

		args, err := ec.field_Mutation_createQuiz_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateQuiz(childComplexity, args["input"].(model.CreateQuizInput)), true

	case "Mutation.createReferee":
		if e.complexity.Mutation.CreateReferee == nil {
			break
		}

		args, err := ec.field_Mutation_createReferee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateReferee(childComplexity, args["userId"].(string), args["input"].(model.NewReferee)), true

	case "Mutation.createTag":
		if e.complexity.Mutation.CreateTag == nil {
			break
		}

		args, err := ec.field_Mutation_createTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTag(childComplexity, args["input"].(model.CreateTagInput)), true

	case "Mutation.createTarget":
		if e.complexity.Mutation.CreateTarget == nil {
			break
		}

		args, err := ec.field_Mutation_createTarget_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTarget(childComplexity, args["input"].(model.CreateTargetInput)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(model.NewUser)), true

	case "Mutation.createUserSetting":
		if e.complexity.Mutation.CreateUserSetting == nil {
			break
		}

		args, err := ec.field_Mutation_createUserSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUserSetting(childComplexity, args["userId"].(string), args["input"].(model.NewSetting)), true

	case "Mutation.deleteActivity":
		if e.complexity.Mutation.DeleteActivity == nil {
			break
		}

		args, err := ec.field_Mutation_deleteActivity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteActivity(childComplexity, args["id"].(string)), true

	case "Mutation.deleteCourse":
		if e.complexity.Mutation.DeleteCourse == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCourse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCourse(childComplexity, args["id"].(string)), true

	case "Mutation.deleteEvaluationCriteria":
		if e.complexity.Mutation.DeleteEvaluationCriteria == nil {
			break
		}

		args, err := ec.field_Mutation_deleteEvaluationCriteria_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteEvaluationCriteria(childComplexity, args["id"].(string)), true

	case "Mutation.deleteForum":
		if e.complexity.Mutation.DeleteForum == nil {
			break
		}

		args, err := ec.field_Mutation_deleteForum_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteForum(childComplexity, args["id"].(string)), true

	case "Mutation.deleteForumComment":
		if e.complexity.Mutation.DeleteForumComment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteForumComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteForumComment(childComplexity, args["id"].(string)), true

	case "Mutation.deleteForumPost":
		if e.complexity.Mutation.DeleteForumPost == nil {
			break
		}

		args, err := ec.field_Mutation_deleteForumPost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteForumPost(childComplexity, args["id"].(string)), true

	case "Mutation.deleteGlobalSetting":
		if e.complexity.Mutation.DeleteGlobalSetting == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGlobalSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGlobalSetting(childComplexity, args["id"].(string)), true

	case "Mutation.deleteGrade":
		if e.complexity.Mutation.DeleteGrade == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGrade_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGrade(childComplexity, args["id"].(string)), true

	case "Mutation.deleteManyUsers":
		if e.complexity.Mutation.DeleteManyUsers == nil {
			break
		}

		args, err := ec.field_Mutation_deleteManyUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteManyUsers(childComplexity, args["ids"].([]string)), true

	case "Mutation.deleteMedia":
		if e.complexity.Mutation.DeleteMedia == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMedia_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMedia(childComplexity, args["id"].(string)), true

	case "Mutation.deleteNotification":
		if e.complexity.Mutation.DeleteNotification == nil {
			break
		}

		args, err := ec.field_Mutation_deleteNotification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNotification(childComplexity, args["id"].(string)), true

	case "Mutation.deleteQuiz":
		if e.complexity.Mutation.DeleteQuiz == nil {
			break
		}

		args, err := ec.field_Mutation_deleteQuiz_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteQuiz(childComplexity, args["id"].(string)), true

	case "Mutation.deleteTag":
		if e.complexity.Mutation.DeleteTag == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTag(childComplexity, args["id"].(string)), true

	case "Mutation.deleteTarget":
		if e.complexity.Mutation.DeleteTarget == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTarget_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTarget(childComplexity, args["id"].(string)), true

	case "Mutation.deleteUser":
		if e.complexity.Mutation.DeleteUser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUser(childComplexity, args["id"].(string)), true

	case "Mutation.deleteUserSetting":
		if e.complexity.Mutation.DeleteUserSetting == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUserSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUserSetting(childComplexity, args["id"].(string)), true

	case "Mutation.forgetPassword":
		if e.complexity.Mutation.ForgetPassword == nil {
			break
		}

		args, err := ec.field_Mutation_forgetPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ForgetPassword(childComplexity, args["email"].(string)), true

	case "Mutation.grantPermission":
		if e.complexity.Mutation.GrantPermission == nil {
			break
		}

		args, err := ec.field_Mutation_grantPermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GrantPermission(childComplexity, args["input"].(model.PermissionInput)), true

	case "Mutation.refresh":
		if e.complexity.Mutation.Refresh == nil {
			break
		}

		args, err := ec.field_Mutation_refresh_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Refresh(childComplexity, args["refreshToken"].(string)), true

	case "Mutation.resetPassword":
		if e.complexity.Mutation.ResetPassword == nil {
			break
		}

		args, err := ec.field_Mutation_resetPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResetPassword(childComplexity, args["refreshToken"].(string), args["password"].(string)), true

	case "Mutation.revokePermission":
		if e.complexity.Mutation.RevokePermission == nil {
			break
		}

		args, err := ec.field_Mutation_revokePermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokePermission(childComplexity, args["input"].(model.PermissionInput)), true

	case "Mutation.signIn":
		if e.complexity.Mutation.SignIn == nil {
			break
		}

		args, err := ec.field_Mutation_signIn_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SignIn(childComplexity, args["input"].(model.AuthUser)), true

	case "Mutation.signOut":
		if e.complexity.Mutation.SignOut == nil {
			break
		}

		args, err := ec.field_Mutation_signOut_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SignOut(childComplexity, args["refreshToken"].(string)), true

	case "Mutation.signUp":
		if e.complexity.Mutation.SignUp == nil {
			break
		}

		args, err := ec.field_Mutation_signUp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SignUp(childComplexity, args["input"].(model.NewUser)), true

	case "Mutation.submitQuiz":
		if e.complexity.Mutation.SubmitQuiz == nil {
			break
		}

		args, err := ec.field_Mutation_submitQuiz_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitQuiz(childComplexity, args["quizId"].(string), args["input"].(model.SubmissionInput)), true

	case "Mutation.updateActivity":
		if e.complexity.Mutation.UpdateActivity == nil {
			break
		}

		args, err := ec.field_Mutation_updateActivity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateActivity(childComplexity, args["input"].(model.UpdateActivityInput)), true

	case "Mutation.updateCourse":
		if e.complexity.Mutation.UpdateCourse == nil {
			break
		}

		args, err := ec.field_Mutation_updateCourse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCourse(childComplexity, args["input"].(interface{})), true

	case "Mutation.updateEvaluationCriteria":
		if e.complexity.Mutation.UpdateEvaluationCriteria == nil {
			break
		}

		args, err := ec.field_Mutation_updateEvaluationCriteria_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEvaluationCriteria(childComplexity, args["id"].(string), args["input"].(model.UpdateEvaluationCriteriaInput)), true

	case "Mutation.updateForum":
		if e.complexity.Mutation.UpdateForum == nil {
			break
		}

		args, err := ec.field_Mutation_updateForum_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateForum(childComplexity, args["id"].(string), args["input"].(model.UpdateForumInput)), true

	case "Mutation.updateForumComment":
		if e.complexity.Mutation.UpdateForumComment == nil {
			break
		}

		args, err := ec.field_Mutation_updateForumComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateForumComment(childComplexity, args["id"].(string), args["input"].(model.UpdateForumCommentInput)), true

	case "Mutation.updateForumPost":
		if e.complexity.Mutation.UpdateForumPost == nil {
			break
		}

		args, err := ec.field_Mutation_updateForumPost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateForumPost(childComplexity, args["id"].(string), args["input"].(model.UpdateForumPostInput)), true

	case "Mutation.updateGlobalSetting":
		if e.complexity.Mutation.UpdateGlobalSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateGlobalSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGlobalSetting(childComplexity, args["id"].(string), args["input"].(model.UpdateSetting)), true

	case "Mutation.updateGrade":
		if e.complexity.Mutation.UpdateGrade == nil {
			break
		}

		args, err := ec.field_Mutation_updateGrade_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGrade(childComplexity, args["id"].(string), args["input"].(model.UpdateGradeInput)), true

	case "Mutation.updateMedia":
		if e.complexity.Mutation.UpdateMedia == nil {
			break
		}

		args, err := ec.field_Mutation_updateMedia_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMedia(childComplexity, args["input"].(model.UpdateMediaInput)), true

	case "Mutation.updateNotification":
		if e.complexity.Mutation.UpdateNotification == nil {
			break
		}

		args, err := ec.field_Mutation_updateNotification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNotification(childComplexity, args["id"].(string), args["input"].(model.UpdateNotificationInput)), true

	case "Mutation.updatePermission":
		if e.complexity.Mutation.UpdatePermission == nil {
			break
		}

		args, err := ec.field_Mutation_updatePermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePermission(childComplexity, args["input"].(model.PermissionInput)), true

	case "Mutation.updateProspective":
		if e.complexity.Mutation.UpdateProspective == nil {
			break
		}

		args, err := ec.field_Mutation_updateProspective_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProspective(childComplexity, args["input"].(*model.UpdateProspective)), true

	case "Mutation.updateQuiz":
		if e.complexity.Mutation.UpdateQuiz == nil {
			break
		}

		args, err := ec.field_Mutation_updateQuiz_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateQuiz(childComplexity, args["id"].(string), args["input"].(model.UpdateQuizInput)), true

	case "Mutation.updateTag":
		if e.complexity.Mutation.UpdateTag == nil {
			break
		}

		args, err := ec.field_Mutation_updateTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTag(childComplexity, args["id"].(string), args["input"].(model.UpdateTagInput)), true

	case "Mutation.updateTarget":
		if e.complexity.Mutation.UpdateTarget == nil {
			break
		}

		args, err := ec.field_Mutation_updateTarget_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTarget(childComplexity, args["id"].(string), args["input"].(model.UpdateTargetInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["input"].(interface{})), true

	case "Mutation.updateUserSetting":
		if e.complexity.Mutation.UpdateUserSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserSetting(childComplexity, args["id"].(string), args["input"].(model.UpdateSetting)), true

	case "Mutation.verifyEmail":
		if e.complexity.Mutation.VerifyEmail == nil {
			break
		}

		args, err := ec.field_Mutation_verifyEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VerifyEmail(childComplexity, args["refreshToken"].(string)), true

	case "Notification.courseId":
		if e.complexity.Notification.CourseID == nil {
			break
		}

		return e.complexity.Notification.CourseID(childComplexity), true

	case "Notification.createdAt":
		if e.complexity.Notification.CreatedAt == nil {
			break
		}

		return e.complexity.Notification.CreatedAt(childComplexity), true

	case "Notification.deletedAt":
		if e.complexity.Notification.DeletedAt == nil {
			break
		}

		return e.complexity.Notification.DeletedAt(childComplexity), true

	case "Notification.id":
		if e.complexity.Notification.ID == nil {
			break
		}

		return e.complexity.Notification.ID(childComplexity), true

	case "Notification.link":
		if e.complexity.Notification.Link == nil {
			break
		}

		return e.complexity.Notification.Link(childComplexity), true

	case "Notification.recipientId":
		if e.complexity.Notification.RecipientID == nil {
			break
		}

		return e.complexity.Notification.RecipientID(childComplexity), true

	case "Notification.seen":
		if e.complexity.Notification.Seen == nil {
			break
		}

		return e.complexity.Notification.Seen(childComplexity), true

	case "Notification.senderId":
		if e.complexity.Notification.SenderID == nil {
			break
		}

		return e.complexity.Notification.SenderID(childComplexity), true

	case "Notification.text":
		if e.complexity.Notification.Text == nil {
			break
		}

		return e.complexity.Notification.Text(childComplexity), true

	case "Notification.title":
		if e.complexity.Notification.Title == nil {
			break
		}

		return e.complexity.Notification.Title(childComplexity), true

	case "Notification.type":
		if e.complexity.Notification.Type == nil {
			break
		}

		return e.complexity.Notification.Type(childComplexity), true

	case "Notification.updatedAt":
		if e.complexity.Notification.UpdatedAt == nil {
			break
		}

		return e.complexity.Notification.UpdatedAt(childComplexity), true

	case "Penalty.description":
		if e.complexity.Penalty.Description == nil {
			break
		}

		return e.complexity.Penalty.Description(childComplexity), true

	case "Penalty.id":
		if e.complexity.Penalty.ID == nil {
			break
		}

		return e.complexity.Penalty.ID(childComplexity), true

	case "Penalty.name":
		if e.complexity.Penalty.Name == nil {
			break
		}

		return e.complexity.Penalty.Name(childComplexity), true

	case "Penalty.percentage":
		if e.complexity.Penalty.Percentage == nil {
			break
		}

		return e.complexity.Penalty.Percentage(childComplexity), true

	case "Permission.id":
		if e.complexity.Permission.ID == nil {
			break
		}

		return e.complexity.Permission.ID(childComplexity), true

	case "Permission.model":
		if e.complexity.Permission.Model == nil {
			break
		}

		return e.complexity.Permission.Model(childComplexity), true

	case "Permission.permissions":
		if e.complexity.Permission.Permissions == nil {
			break
		}

		return e.complexity.Permission.Permissions(childComplexity), true

	case "Permission.role":
		if e.complexity.Permission.Role == nil {
			break
		}

		return e.complexity.Permission.Role(childComplexity), true

	case "PlayerInfo.currentTime":
		if e.complexity.PlayerInfo.CurrentTime == nil {
			break
		}

		return e.complexity.PlayerInfo.CurrentTime(childComplexity), true

	case "PlayerInfo.duration":
		if e.complexity.PlayerInfo.Duration == nil {
			break
		}

		return e.complexity.PlayerInfo.Duration(childComplexity), true

	case "PlayerInfo.posterUrl":
		if e.complexity.PlayerInfo.PosterURL == nil {
			break
		}

		return e.complexity.PlayerInfo.PosterURL(childComplexity), true

	case "PlayerInfo.thumbnailUrl":
		if e.complexity.PlayerInfo.ThumbnailURL == nil {
			break
		}

		return e.complexity.PlayerInfo.ThumbnailURL(childComplexity), true

	case "Qualification.createdAt":
		if e.complexity.Qualification.CreatedAt == nil {
			break
		}

		return e.complexity.Qualification.CreatedAt(childComplexity), true

	case "Qualification.degree":
		if e.complexity.Qualification.Degree == nil {
			break
		}

		return e.complexity.Qualification.Degree(childComplexity), true

	case "Qualification.deletedAt":
		if e.complexity.Qualification.DeletedAt == nil {
			break
		}

		return e.complexity.Qualification.DeletedAt(childComplexity), true

	case "Qualification.graduationYear":
		if e.complexity.Qualification.GraduationYear == nil {
			break
		}

		return e.complexity.Qualification.GraduationYear(childComplexity), true

	case "Qualification.id":
		if e.complexity.Qualification.ID == nil {
			break
		}

		return e.complexity.Qualification.ID(childComplexity), true

	case "Qualification.institution":
		if e.complexity.Qualification.Institution == nil {
			break
		}

		return e.complexity.Qualification.Institution(childComplexity), true

	case "Qualification.updatedAt":
		if e.complexity.Qualification.UpdatedAt == nil {
			break
		}

		return e.complexity.Qualification.UpdatedAt(childComplexity), true

	case "Query.activities":
		if e.complexity.Query.Activities == nil {
			break
		}

		args, err := ec.field_Query_activities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Activities(childComplexity, args["courseID"].(*string)), true

	case "Query.activity":
		if e.complexity.Query.Activity == nil {
			break
		}

		args, err := ec.field_Query_activity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Activity(childComplexity, args["id"].(string)), true

	case "Query.allMedia":
		if e.complexity.Query.AllMedia == nil {
			break
		}

		return e.complexity.Query.AllMedia(childComplexity), true

	case "Query.course":
		if e.complexity.Query.Course == nil {
			break
		}

		args, err := ec.field_Query_course_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Course(childComplexity, args["id"].(string)), true

	case "Query.courses":
		if e.complexity.Query.Courses == nil {
			break
		}

		args, err := ec.field_Query_courses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Courses(childComplexity, args["userId"].(*string)), true

	case "Query.evaluationCriteria":
		if e.complexity.Query.EvaluationCriteria == nil {
			break
		}

		args, err := ec.field_Query_evaluationCriteria_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EvaluationCriteria(childComplexity, args["id"].(string)), true

	case "Query.evaluationCriterias":
		if e.complexity.Query.EvaluationCriterias == nil {
			break
		}

		return e.complexity.Query.EvaluationCriterias(childComplexity), true

	case "Query.forum":
		if e.complexity.Query.Forum == nil {
			break
		}

		args, err := ec.field_Query_forum_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Forum(childComplexity, args["id"].(string)), true

	case "Query.forumComment":
		if e.complexity.Query.ForumComment == nil {
			break
		}

		args, err := ec.field_Query_forumComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ForumComment(childComplexity, args["id"].(string)), true

	case "Query.forumComments":
		if e.complexity.Query.ForumComments == nil {
			break
		}

		args, err := ec.field_Query_forumComments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ForumComments(childComplexity, args["courseId"].(*string)), true

	case "Query.forumPost":
		if e.complexity.Query.ForumPost == nil {
			break
		}

		args, err := ec.field_Query_forumPost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ForumPost(childComplexity, args["id"].(string)), true

	case "Query.forumPosts":
		if e.complexity.Query.ForumPosts == nil {
			break
		}

		args, err := ec.field_Query_forumPosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ForumPosts(childComplexity, args["courseId"].(*string), args["tags"].([]string)), true

	case "Query.forums":
		if e.complexity.Query.Forums == nil {
			break
		}

		args, err := ec.field_Query_forums_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Forums(childComplexity, args["courseId"].(*string)), true

	case "Query.getPermissionsForModel":
		if e.complexity.Query.GetPermissionsForModel == nil {
			break
		}

		args, err := ec.field_Query_getPermissionsForModel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPermissionsForModel(childComplexity, args["model"].(model.AllowedModel)), true

	case "Query.getPermissionsForUser":
		if e.complexity.Query.GetPermissionsForUser == nil {
			break
		}

		args, err := ec.field_Query_getPermissionsForUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPermissionsForUser(childComplexity, args["userID"].(string)), true

	case "Query.globalSetting":
		if e.complexity.Query.GlobalSetting == nil {
			break
		}

		args, err := ec.field_Query_globalSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GlobalSetting(childComplexity, args["id"].(string)), true

	case "Query.globalSettings":
		if e.complexity.Query.GlobalSettings == nil {
			break
		}

		args, err := ec.field_Query_globalSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GlobalSettings(childComplexity, args["limit"].(*int), args["offset"].(*int)), true

	case "Query.grade":
		if e.complexity.Query.Grade == nil {
			break
		}

		args, err := ec.field_Query_grade_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Grade(childComplexity, args["id"].(string)), true

	case "Query.grades":
		if e.complexity.Query.Grades == nil {
			break
		}

		return e.complexity.Query.Grades(childComplexity), true

	case "Query.media":
		if e.complexity.Query.Media == nil {
			break
		}

		args, err := ec.field_Query_media_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Media(childComplexity, args["id"].(string)), true

	case "Query.mediaByType":
		if e.complexity.Query.MediaByType == nil {
			break
		}

		args, err := ec.field_Query_mediaByType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MediaByType(childComplexity, args["type"].(model.MediaType)), true

	case "Query.notifications":
		if e.complexity.Query.Notifications == nil {
			break
		}

		args, err := ec.field_Query_notifications_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Notifications(childComplexity, args["courseId"].(*string), args["recipientId"].(*string), args["read"].(*bool)), true

	case "Query.quiz":
		if e.complexity.Query.Quiz == nil {
			break
		}

		args, err := ec.field_Query_quiz_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Quiz(childComplexity, args["id"].(string)), true

	case "Query.quizzes":
		if e.complexity.Query.Quizzes == nil {
			break
		}

		return e.complexity.Query.Quizzes(childComplexity), true

	case "Query.submission":
		if e.complexity.Query.Submission == nil {
			break
		}

		args, err := ec.field_Query_submission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Submission(childComplexity, args["id"].(string)), true

	case "Query.submissions":
		if e.complexity.Query.Submissions == nil {
			break
		}

		return e.complexity.Query.Submissions(childComplexity), true

	case "Query.target":
		if e.complexity.Query.Target == nil {
			break
		}

		args, err := ec.field_Query_target_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Target(childComplexity, args["id"].(string)), true

	case "Query.targets":
		if e.complexity.Query.Targets == nil {
			break
		}

		args, err := ec.field_Query_targets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Targets(childComplexity, args["courseId"].(*string)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(string)), true

	case "Query.userSetting":
		if e.complexity.Query.UserSetting == nil {
			break
		}

		args, err := ec.field_Query_userSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserSetting(childComplexity, args["id"].(string)), true

	case "Query.userSettings":
		if e.complexity.Query.UserSettings == nil {
			break
		}

		args, err := ec.field_Query_userSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserSettings(childComplexity, args["userId"].(string), args["limit"].(*int), args["offset"].(*int)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		return e.complexity.Query.Users(childComplexity), true

	case "Question.categories":
		if e.complexity.Question.Categories == nil {
			break
		}

		return e.complexity.Question.Categories(childComplexity), true

	case "Question.choices":
		if e.complexity.Question.Choices == nil {
			break
		}

		return e.complexity.Question.Choices(childComplexity), true

	case "Question.correctAnswer":
		if e.complexity.Question.CorrectAnswer == nil {
			break
		}

		return e.complexity.Question.CorrectAnswer(childComplexity), true

	case "Question.feedback":
		if e.complexity.Question.Feedback == nil {
			break
		}

		return e.complexity.Question.Feedback(childComplexity), true

	case "Question.hints":
		if e.complexity.Question.Hints == nil {
			break
		}

		return e.complexity.Question.Hints(childComplexity), true

	case "Question.id":
		if e.complexity.Question.ID == nil {
			break
		}

		return e.complexity.Question.ID(childComplexity), true

	case "Question.matchingPairs":
		if e.complexity.Question.MatchingPairs == nil {
			break
		}

		return e.complexity.Question.MatchingPairs(childComplexity), true

	case "Question.pointValue":
		if e.complexity.Question.PointValue == nil {
			break
		}

		return e.complexity.Question.PointValue(childComplexity), true

	case "Question.randomize":
		if e.complexity.Question.Randomize == nil {
			break
		}

		return e.complexity.Question.Randomize(childComplexity), true

	case "Question.text":
		if e.complexity.Question.Text == nil {
			break
		}

		return e.complexity.Question.Text(childComplexity), true

	case "Question.type":
		if e.complexity.Question.Type == nil {
			break
		}

		return e.complexity.Question.Type(childComplexity), true

	case "Quiz.categories":
		if e.complexity.Quiz.Categories == nil {
			break
		}

		return e.complexity.Quiz.Categories(childComplexity), true

	case "Quiz.certificate":
		if e.complexity.Quiz.Certificate == nil {
			break
		}

		return e.complexity.Quiz.Certificate(childComplexity), true

	case "Quiz.courseId":
		if e.complexity.Quiz.CourseID == nil {
			break
		}

		return e.complexity.Quiz.CourseID(childComplexity), true

	case "Quiz.createdAt":
		if e.complexity.Quiz.CreatedAt == nil {
			break
		}

		return e.complexity.Quiz.CreatedAt(childComplexity), true

	case "Quiz.deletedAt":
		if e.complexity.Quiz.DeletedAt == nil {
			break
		}

		return e.complexity.Quiz.DeletedAt(childComplexity), true

	case "Quiz.description":
		if e.complexity.Quiz.Description == nil {
			break
		}

		return e.complexity.Quiz.Description(childComplexity), true

	case "Quiz.dueDate":
		if e.complexity.Quiz.DueDate == nil {
			break
		}

		return e.complexity.Quiz.DueDate(childComplexity), true

	case "Quiz.duration":
		if e.complexity.Quiz.Duration == nil {
			break
		}

		return e.complexity.Quiz.Duration(childComplexity), true

	case "Quiz.endTime":
		if e.complexity.Quiz.EndTime == nil {
			break
		}

		return e.complexity.Quiz.EndTime(childComplexity), true

	case "Quiz.gradeIds":
		if e.complexity.Quiz.GradeIds == nil {
			break
		}

		return e.complexity.Quiz.GradeIds(childComplexity), true

	case "Quiz.id":
		if e.complexity.Quiz.ID == nil {
			break
		}

		return e.complexity.Quiz.ID(childComplexity), true

	case "Quiz.isLocked":
		if e.complexity.Quiz.IsLocked == nil {
			break
		}

		return e.complexity.Quiz.IsLocked(childComplexity), true

	case "Quiz.name":
		if e.complexity.Quiz.Name == nil {
			break
		}

		return e.complexity.Quiz.Name(childComplexity), true

	case "Quiz.passingScore":
		if e.complexity.Quiz.PassingScore == nil {
			break
		}

		return e.complexity.Quiz.PassingScore(childComplexity), true

	case "Quiz.proctoringMethod":
		if e.complexity.Quiz.ProctoringMethod == nil {
			break
		}

		return e.complexity.Quiz.ProctoringMethod(childComplexity), true

	case "Quiz.questionIds":
		if e.complexity.Quiz.QuestionIds == nil {
			break
		}

		return e.complexity.Quiz.QuestionIds(childComplexity), true

	case "Quiz.questions":
		if e.complexity.Quiz.Questions == nil {
			break
		}

		return e.complexity.Quiz.Questions(childComplexity), true

	case "Quiz.quizType":
		if e.complexity.Quiz.QuizType == nil {
			break
		}

		return e.complexity.Quiz.QuizType(childComplexity), true

	case "Quiz.randomizeAnswers":
		if e.complexity.Quiz.RandomizeAnswers == nil {
			break
		}

		return e.complexity.Quiz.RandomizeAnswers(childComplexity), true

	case "Quiz.randomizeQuestions":
		if e.complexity.Quiz.RandomizeQuestions == nil {
			break
		}

		return e.complexity.Quiz.RandomizeQuestions(childComplexity), true

	case "Quiz.resultsReleaseDate":
		if e.complexity.Quiz.ResultsReleaseDate == nil {
			break
		}

		return e.complexity.Quiz.ResultsReleaseDate(childComplexity), true

	case "Quiz.shuffleQuestions":
		if e.complexity.Quiz.ShuffleQuestions == nil {
			break
		}

		return e.complexity.Quiz.ShuffleQuestions(childComplexity), true

	case "Quiz.startDate":
		if e.complexity.Quiz.StartDate == nil {
			break
		}

		return e.complexity.Quiz.StartDate(childComplexity), true

	case "Quiz.startTime":
		if e.complexity.Quiz.StartTime == nil {
			break
		}

		return e.complexity.Quiz.StartTime(childComplexity), true

	case "Quiz.submissionIds":
		if e.complexity.Quiz.SubmissionIds == nil {
			break
		}

		return e.complexity.Quiz.SubmissionIds(childComplexity), true

	case "Quiz.timeLimit":
		if e.complexity.Quiz.TimeLimit == nil {
			break
		}

		return e.complexity.Quiz.TimeLimit(childComplexity), true

	case "Quiz.updatedAt":
		if e.complexity.Quiz.UpdatedAt == nil {
			break
		}

		return e.complexity.Quiz.UpdatedAt(childComplexity), true

	case "Quiz.waitTime":
		if e.complexity.Quiz.WaitTime == nil {
			break
		}

		return e.complexity.Quiz.WaitTime(childComplexity), true

	case "Quiz.weight":
		if e.complexity.Quiz.Weight == nil {
			break
		}

		return e.complexity.Quiz.Weight(childComplexity), true

	case "Referee.createdAt":
		if e.complexity.Referee.CreatedAt == nil {
			break
		}

		return e.complexity.Referee.CreatedAt(childComplexity), true

	case "Referee.deletedAt":
		if e.complexity.Referee.DeletedAt == nil {
			break
		}

		return e.complexity.Referee.DeletedAt(childComplexity), true

	case "Referee.email":
		if e.complexity.Referee.Email == nil {
			break
		}

		return e.complexity.Referee.Email(childComplexity), true

	case "Referee.fullName":
		if e.complexity.Referee.FullName == nil {
			break
		}

		return e.complexity.Referee.FullName(childComplexity), true

	case "Referee.id":
		if e.complexity.Referee.ID == nil {
			break
		}

		return e.complexity.Referee.ID(childComplexity), true

	case "Referee.phone":
		if e.complexity.Referee.Phone == nil {
			break
		}

		return e.complexity.Referee.Phone(childComplexity), true

	case "Referee.updatedAt":
		if e.complexity.Referee.UpdatedAt == nil {
			break
		}

		return e.complexity.Referee.UpdatedAt(childComplexity), true

	case "Reminder.createdAt":
		if e.complexity.Reminder.CreatedAt == nil {
			break
		}

		return e.complexity.Reminder.CreatedAt(childComplexity), true

	case "Reminder.id":
		if e.complexity.Reminder.ID == nil {
			break
		}

		return e.complexity.Reminder.ID(childComplexity), true

	case "Reminder.message":
		if e.complexity.Reminder.Message == nil {
			break
		}

		return e.complexity.Reminder.Message(childComplexity), true

	case "Reminder.sendTime":
		if e.complexity.Reminder.SendTime == nil {
			break
		}

		return e.complexity.Reminder.SendTime(childComplexity), true

	case "Reminder.sent":
		if e.complexity.Reminder.Sent == nil {
			break
		}

		return e.complexity.Reminder.Sent(childComplexity), true

	case "Reminder.target":
		if e.complexity.Reminder.Target == nil {
			break
		}

		return e.complexity.Reminder.Target(childComplexity), true

	case "Reminder.updatedAt":
		if e.complexity.Reminder.UpdatedAt == nil {
			break
		}

		return e.complexity.Reminder.UpdatedAt(childComplexity), true

	case "Reminder.user":
		if e.complexity.Reminder.User == nil {
			break
		}

		return e.complexity.Reminder.User(childComplexity), true

	case "ScoreDistribution.grade":
		if e.complexity.ScoreDistribution.Grade == nil {
			break
		}

		return e.complexity.ScoreDistribution.Grade(childComplexity), true

	case "ScoreDistribution.id":
		if e.complexity.ScoreDistribution.ID == nil {
			break
		}

		return e.complexity.ScoreDistribution.ID(childComplexity), true

	case "ScoreDistribution.maxScore":
		if e.complexity.ScoreDistribution.MaxScore == nil {
			break
		}

		return e.complexity.ScoreDistribution.MaxScore(childComplexity), true

	case "ScoreDistribution.minScore":
		if e.complexity.ScoreDistribution.MinScore == nil {
			break
		}

		return e.complexity.ScoreDistribution.MinScore(childComplexity), true

	case "ScoreDistribution.percentage":
		if e.complexity.ScoreDistribution.Percentage == nil {
			break
		}

		return e.complexity.ScoreDistribution.Percentage(childComplexity), true

	case "Submission.answers":
		if e.complexity.Submission.Answers == nil {
			break
		}

		return e.complexity.Submission.Answers(childComplexity), true

	case "Submission.completedAt":
		if e.complexity.Submission.CompletedAt == nil {
			break
		}

		return e.complexity.Submission.CompletedAt(childComplexity), true

	case "Submission.createdAt":
		if e.complexity.Submission.CreatedAt == nil {
			break
		}

		return e.complexity.Submission.CreatedAt(childComplexity), true

	case "Submission.endTime":
		if e.complexity.Submission.EndTime == nil {
			break
		}

		return e.complexity.Submission.EndTime(childComplexity), true

	case "Submission.feedback":
		if e.complexity.Submission.Feedback == nil {
			break
		}

		return e.complexity.Submission.Feedback(childComplexity), true

	case "Submission.grade":
		if e.complexity.Submission.Grade == nil {
			break
		}

		return e.complexity.Submission.Grade(childComplexity), true

	case "Submission.id":
		if e.complexity.Submission.ID == nil {
			break
		}

		return e.complexity.Submission.ID(childComplexity), true

	case "Submission.points":
		if e.complexity.Submission.Points == nil {
			break
		}

		return e.complexity.Submission.Points(childComplexity), true

	case "Submission.quizID":
		if e.complexity.Submission.QuizID == nil {
			break
		}

		return e.complexity.Submission.QuizID(childComplexity), true

	case "Submission.startTime":
		if e.complexity.Submission.StartTime == nil {
			break
		}

		return e.complexity.Submission.StartTime(childComplexity), true

	case "Submission.startedAt":
		if e.complexity.Submission.StartedAt == nil {
			break
		}

		return e.complexity.Submission.StartedAt(childComplexity), true

	case "Submission.updatedAt":
		if e.complexity.Submission.UpdatedAt == nil {
			break
		}

		return e.complexity.Submission.UpdatedAt(childComplexity), true

	case "Submission.userID":
		if e.complexity.Submission.UserID == nil {
			break
		}

		return e.complexity.Submission.UserID(childComplexity), true

	case "Submission.weight":
		if e.complexity.Submission.Weight == nil {
			break
		}

		return e.complexity.Submission.Weight(childComplexity), true

	case "Subscription.activityAdded":
		if e.complexity.Subscription.ActivityAdded == nil {
			break
		}

		return e.complexity.Subscription.ActivityAdded(childComplexity), true

	case "Subscription.activityDeleted":
		if e.complexity.Subscription.ActivityDeleted == nil {
			break
		}

		return e.complexity.Subscription.ActivityDeleted(childComplexity), true

	case "Subscription.activityUpdated":
		if e.complexity.Subscription.ActivityUpdated == nil {
			break
		}

		return e.complexity.Subscription.ActivityUpdated(childComplexity), true

	case "Subscription.notificationAdded":
		if e.complexity.Subscription.NotificationAdded == nil {
			break
		}

		return e.complexity.Subscription.NotificationAdded(childComplexity), true

	case "Tag.courseIds":
		if e.complexity.Tag.CourseIds == nil {
			break
		}

		return e.complexity.Tag.CourseIds(childComplexity), true

	case "Tag.id":
		if e.complexity.Tag.ID == nil {
			break
		}

		return e.complexity.Tag.ID(childComplexity), true

	case "Tag.name":
		if e.complexity.Tag.Name == nil {
			break
		}

		return e.complexity.Tag.Name(childComplexity), true

	case "Tag.postIds":
		if e.complexity.Tag.PostIds == nil {
			break
		}

		return e.complexity.Tag.PostIds(childComplexity), true

	case "Target.completionDate":
		if e.complexity.Target.CompletionDate == nil {
			break
		}

		return e.complexity.Target.CompletionDate(childComplexity), true

	case "Target.courseId":
		if e.complexity.Target.CourseID == nil {
			break
		}

		return e.complexity.Target.CourseID(childComplexity), true

	case "Target.createdAt":
		if e.complexity.Target.CreatedAt == nil {
			break
		}

		return e.complexity.Target.CreatedAt(childComplexity), true

	case "Target.currentValue":
		if e.complexity.Target.CurrentValue == nil {
			break
		}

		return e.complexity.Target.CurrentValue(childComplexity), true

	case "Target.description":
		if e.complexity.Target.Description == nil {
			break
		}

		return e.complexity.Target.Description(childComplexity), true

	case "Target.dueDate":
		if e.complexity.Target.DueDate == nil {
			break
		}

		return e.complexity.Target.DueDate(childComplexity), true

	case "Target.id":
		if e.complexity.Target.ID == nil {
			break
		}

		return e.complexity.Target.ID(childComplexity), true

	case "Target.isCompleted":
		if e.complexity.Target.IsCompleted == nil {
			break
		}

		return e.complexity.Target.IsCompleted(childComplexity), true

	case "Target.name":
		if e.complexity.Target.Name == nil {
			break
		}

		return e.complexity.Target.Name(childComplexity), true

	case "Target.reminders":
		if e.complexity.Target.Reminders == nil {
			break
		}

		return e.complexity.Target.Reminders(childComplexity), true

	case "Target.repeatEndDate":
		if e.complexity.Target.RepeatEndDate == nil {
			break
		}

		return e.complexity.Target.RepeatEndDate(childComplexity), true

	case "Target.repeatInterval":
		if e.complexity.Target.RepeatInterval == nil {
			break
		}

		return e.complexity.Target.RepeatInterval(childComplexity), true

	case "Target.startDate":
		if e.complexity.Target.StartDate == nil {
			break
		}

		return e.complexity.Target.StartDate(childComplexity), true

	case "Target.targetMetric":
		if e.complexity.Target.TargetMetric == nil {
			break
		}

		return e.complexity.Target.TargetMetric(childComplexity), true

	case "Target.targetType":
		if e.complexity.Target.TargetType == nil {
			break
		}

		return e.complexity.Target.TargetType(childComplexity), true

	case "Target.targetValue":
		if e.complexity.Target.TargetValue == nil {
			break
		}

		return e.complexity.Target.TargetValue(childComplexity), true

	case "Target.units":
		if e.complexity.Target.Units == nil {
			break
		}

		return e.complexity.Target.Units(childComplexity), true

	case "Target.updatedAt":
		if e.complexity.Target.UpdatedAt == nil {
			break
		}

		return e.complexity.Target.UpdatedAt(childComplexity), true

	case "Token.expiresAt":
		if e.complexity.Token.ExpiresAt == nil {
			break
		}

		return e.complexity.Token.ExpiresAt(childComplexity), true

	case "Token.token":
		if e.complexity.Token.Token == nil {
			break
		}

		return e.complexity.Token.Token(childComplexity), true

	case "User.about":
		if e.complexity.User.About == nil {
			break
		}

		return e.complexity.User.About(childComplexity), true

	case "User.accessToken":
		if e.complexity.User.AccessToken == nil {
			break
		}

		return e.complexity.User.AccessToken(childComplexity), true

	case "User.address":
		if e.complexity.User.Address == nil {
			break
		}

		return e.complexity.User.Address(childComplexity), true

	case "User.avatarUrl":
		if e.complexity.User.AvatarURL == nil {
			break
		}

		return e.complexity.User.AvatarURL(childComplexity), true

	case "User.churchAddress":
		if e.complexity.User.ChurchAddress == nil {
			break
		}

		return e.complexity.User.ChurchAddress(childComplexity), true

	case "User.churchInvolved":
		if e.complexity.User.ChurchInvolved == nil {
			break
		}

		return e.complexity.User.ChurchInvolved(childComplexity), true

	case "User.churchName":
		if e.complexity.User.ChurchName == nil {
			break
		}

		return e.complexity.User.ChurchName(childComplexity), true

	case "User.city":
		if e.complexity.User.City == nil {
			break
		}

		return e.complexity.User.City(childComplexity), true

	case "User.confirmationMailSentAt":
		if e.complexity.User.ConfirmationMailSentAt == nil {
			break
		}

		return e.complexity.User.ConfirmationMailSentAt(childComplexity), true

	case "User.confirmedAt":
		if e.complexity.User.ConfirmedAt == nil {
			break
		}

		return e.complexity.User.ConfirmedAt(childComplexity), true

	case "User.country":
		if e.complexity.User.Country == nil {
			break
		}

		return e.complexity.User.Country(childComplexity), true

	case "User.courses":
		if e.complexity.User.Courses == nil {
			break
		}

		return e.complexity.User.Courses(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.deletedAt":
		if e.complexity.User.DeletedAt == nil {
			break
		}

		return e.complexity.User.DeletedAt(childComplexity), true

	case "User.dob":
		if e.complexity.User.Dob == nil {
			break
		}

		return e.complexity.User.Dob(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.files":
		if e.complexity.User.Files == nil {
			break
		}

		return e.complexity.User.Files(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.fullName":
		if e.complexity.User.FullName == nil {
			break
		}

		return e.complexity.User.FullName(childComplexity), true

	case "User.gender":
		if e.complexity.User.Gender == nil {
			break
		}

		return e.complexity.User.Gender(childComplexity), true

	case "User.godsWorkings":
		if e.complexity.User.GodsWorkings == nil {
			break
		}

		return e.complexity.User.GodsWorkings(childComplexity), true

	case "User.healthConditions":
		if e.complexity.User.HealthConditions == nil {
			break
		}

		return e.complexity.User.HealthConditions(childComplexity), true

	case "User.healthIssueDescription":
		if e.complexity.User.HealthIssueDescription == nil {
			break
		}

		return e.complexity.User.HealthIssueDescription(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.isAuthenticated":
		if e.complexity.User.IsAuthenticated == nil {
			break
		}

		return e.complexity.User.IsAuthenticated(childComplexity), true

	case "User.isVerified":
		if e.complexity.User.IsVerified == nil {
			break
		}

		return e.complexity.User.IsVerified(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.matricNumber":
		if e.complexity.User.MatricNumber == nil {
			break
		}

		return e.complexity.User.MatricNumber(childComplexity), true

	case "User.middleName":
		if e.complexity.User.MiddleName == nil {
			break
		}

		return e.complexity.User.MiddleName(childComplexity), true

	case "User.nationality":
		if e.complexity.User.Nationality == nil {
			break
		}

		return e.complexity.User.Nationality(childComplexity), true

	case "User.notifications":
		if e.complexity.User.Notifications == nil {
			break
		}

		return e.complexity.User.Notifications(childComplexity), true

	case "User.passwordHash":
		if e.complexity.User.PasswordHash == nil {
			break
		}

		return e.complexity.User.PasswordHash(childComplexity), true

	case "User.passwordSalt":
		if e.complexity.User.PasswordSalt == nil {
			break
		}

		return e.complexity.User.PasswordSalt(childComplexity), true

	case "User.pastorEmail":
		if e.complexity.User.PastorEmail == nil {
			break
		}

		return e.complexity.User.PastorEmail(childComplexity), true

	case "User.pastorName":
		if e.complexity.User.PastorName == nil {
			break
		}

		return e.complexity.User.PastorName(childComplexity), true

	case "User.pastorPhone":
		if e.complexity.User.PastorPhone == nil {
			break
		}

		return e.complexity.User.PastorPhone(childComplexity), true

	case "User.permissionIds":
		if e.complexity.User.PermissionIds == nil {
			break
		}

		return e.complexity.User.PermissionIds(childComplexity), true

	case "User.permissions":
		if e.complexity.User.Permissions == nil {
			break
		}

		return e.complexity.User.Permissions(childComplexity), true

	case "User.phone":
		if e.complexity.User.Phone == nil {
			break
		}

		return e.complexity.User.Phone(childComplexity), true

	case "User.platform":
		if e.complexity.User.Platform == nil {
			break
		}

		return e.complexity.User.Platform(childComplexity), true

	case "User.profession":
		if e.complexity.User.Profession == nil {
			break
		}

		return e.complexity.User.Profession(childComplexity), true

	case "User.program":
		if e.complexity.User.Program == nil {
			break
		}

		return e.complexity.User.Program(childComplexity), true

	case "User.progress":
		if e.complexity.User.Progress == nil {
			break
		}

		return e.complexity.User.Progress(childComplexity), true

	case "User.qualifications":
		if e.complexity.User.Qualifications == nil {
			break
		}

		return e.complexity.User.Qualifications(childComplexity), true

	case "User.reason":
		if e.complexity.User.Reason == nil {
			break
		}

		return e.complexity.User.Reason(childComplexity), true

	case "User.referees":
		if e.complexity.User.Referees == nil {
			break
		}

		return e.complexity.User.Referees(childComplexity), true

	case "User.refreshToken":
		if e.complexity.User.RefreshToken == nil {
			break
		}

		return e.complexity.User.RefreshToken(childComplexity), true

	case "User.regNumber":
		if e.complexity.User.RegNumber == nil {
			break
		}

		return e.complexity.User.RegNumber(childComplexity), true

	case "User.role":
		if e.complexity.User.Role == nil {
			break
		}

		return e.complexity.User.Role(childComplexity), true

	case "User.salvationBrief":
		if e.complexity.User.SalvationBrief == nil {
			break
		}

		return e.complexity.User.SalvationBrief(childComplexity), true

	case "User.scholarship":
		if e.complexity.User.Scholarship == nil {
			break
		}

		return e.complexity.User.Scholarship(childComplexity), true

	case "User.scholarshipReason":
		if e.complexity.User.ScholarshipReason == nil {
			break
		}

		return e.complexity.User.ScholarshipReason(childComplexity), true

	case "User.state":
		if e.complexity.User.State == nil {
			break
		}

		return e.complexity.User.State(childComplexity), true

	case "User.status":
		if e.complexity.User.Status == nil {
			break
		}

		return e.complexity.User.Status(childComplexity), true

	case "User.timeZone":
		if e.complexity.User.TimeZone == nil {
			break
		}

		return e.complexity.User.TimeZone(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	case "User.verifycationToken":
		if e.complexity.User.VerifycationToken == nil {
			break
		}

		return e.complexity.User.VerifycationToken(childComplexity), true

	case "User.wallet":
		if e.complexity.User.Wallet == nil {
			break
		}

		return e.complexity.User.Wallet(childComplexity), true

	case "User.zip":
		if e.complexity.User.Zip == nil {
			break
		}

		return e.complexity.User.Zip(childComplexity), true

	case "UserSetting.id":
		if e.complexity.UserSetting.ID == nil {
			break
		}

		return e.complexity.UserSetting.ID(childComplexity), true

	case "UserSetting.key":
		if e.complexity.UserSetting.Key == nil {
			break
		}

		return e.complexity.UserSetting.Key(childComplexity), true

	case "UserSetting.type":
		if e.complexity.UserSetting.Type == nil {
			break
		}

		return e.complexity.UserSetting.Type(childComplexity), true

	case "UserSetting.userId":
		if e.complexity.UserSetting.UserID == nil {
			break
		}

		return e.complexity.UserSetting.UserID(childComplexity), true

	case "UserSetting.value":
		if e.complexity.UserSetting.Value == nil {
			break
		}

		return e.complexity.UserSetting.Value(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAnswerChoiceInput,
		ec.unmarshalInputAnswerInput,
		ec.unmarshalInputAuthUser,
		ec.unmarshalInputCreatMediaInput,
		ec.unmarshalInputCreateActivityInput,
		ec.unmarshalInputCreateCourseInput,
		ec.unmarshalInputCreateEvaluationCriteriaInput,
		ec.unmarshalInputCreateFileInput,
		ec.unmarshalInputCreateForumCommentInput,
		ec.unmarshalInputCreateForumInput,
		ec.unmarshalInputCreateForumPostInput,
		ec.unmarshalInputCreateGradeInput,
		ec.unmarshalInputCreateNotificationInput,
		ec.unmarshalInputCreateQuestionInput,
		ec.unmarshalInputCreateQuizInput,
		ec.unmarshalInputCreateTagInput,
		ec.unmarshalInputCreateTargetInput,
		ec.unmarshalInputMatchingPairInput,
		ec.unmarshalInputNewCourse,
		ec.unmarshalInputNewQualification,
		ec.unmarshalInputNewReferee,
		ec.unmarshalInputNewSetting,
		ec.unmarshalInputNewUser,
		ec.unmarshalInputPermissionInput,
		ec.unmarshalInputPlayerInfoInput,
		ec.unmarshalInputSubmissionInput,
		ec.unmarshalInputUpdateActivityInput,
		ec.unmarshalInputUpdateCourseInput,
		ec.unmarshalInputUpdateEvaluationCriteriaInput,
		ec.unmarshalInputUpdateFileInput,
		ec.unmarshalInputUpdateForumCommentInput,
		ec.unmarshalInputUpdateForumInput,
		ec.unmarshalInputUpdateForumPostInput,
		ec.unmarshalInputUpdateGradeInput,
		ec.unmarshalInputUpdateMediaInput,
		ec.unmarshalInputUpdateNotificationInput,
		ec.unmarshalInputUpdateProspective,
		ec.unmarshalInputUpdateQuestionInput,
		ec.unmarshalInputUpdateQuizInput,
		ec.unmarshalInputUpdateSetting,
		ec.unmarshalInputUpdateTagInput,
		ec.unmarshalInputUpdateTargetInput,
		ec.unmarshalInputVerifyInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/activity.gql", Input: `type Activity {
  id: ID!
  userID: ID!
  courseID: ID!
  courseContentID: ID
  activityType: ActivityType!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

enum ActivityType {
  COURSE_VIEW
  COURSE_ENROLLED
  COURSE_COMPLETED
  COURSE_PROGRESS
  FORUM_POST_CREATED
  FORUM_POST_UPDATED
  FORUM_COMMENT_CREATED
  FORUM_COMMENT_UPDATED
  GRADE_RECEIVED
  QUIZ_TAKEN
  QUIZ_GRADE_RECEIVED
  ASSIGNMENT_SUBMITTED
  ASSIGNMENT_GRADE_RECEIVED
  RESOURCE_ACCESSED
  MEDIA_INTERACTION
  PAGE_VIEW
}

input CreateActivityInput {
  userID: ID!
  courseID: ID!
  courseContentID: ID
  activityType: ActivityType!
}

input UpdateActivityInput {
  id: ID!
  courseContentID: ID
  activityType: ActivityType!
}

extend type Query {
  activities(courseID: ID): [Activity!]!
  activity(id: ID!): Activity
}

extend type Mutation {
  createActivity(input: CreateActivityInput!): Activity
  updateActivity(input: UpdateActivityInput!): Activity
  deleteActivity(id: ID!): Boolean!
}

extend type Subscription {
  activityAdded: Activity
  activityUpdated: Activity
  activityDeleted: ID
}


`, BuiltIn: false},
	{Name: "../schema/auth.gql", Input: `type Claims {
  id: ID!
  userId: String!
  email: String!
  Role: String!
}

type Token {
  token: String!
  expiresAt: Int64!
}

input AuthUser {
  email: String!
  password: String!
}

input NewUser {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  platform: String!
  program: String!
}

extend type Mutation {
  refresh(refreshToken: String!): User
  signOut(refreshToken: String!): User
  signIn(input: AuthUser!): User
  signUp(input: NewUser!): User
  forgetPassword(email: String!): User
  resetPassword(refreshToken: String!, password: String!): User
  changePassword(refreshToken: String!, userId: String!): User
  verifyEmail(refreshToken: String!): User
}
`, BuiltIn: false},
	{Name: "../schema/course.gql", Input: `type Course {
  id: ID!
  userId: String!
  code: String!
  title: String!
  shortDescription: String!
  description: String
  semester: String!
  year: String!
  startDate: Time
  endDate: Time
  matricNumber: String!
  coverImageUrl: String
  type: CourseType!
  status: CourseStatus!
  progress: CourseProgress!
  programType: ProgramType!
  instructorIds: [ID!]!
  students: [User!]!
  assignmentIds: [ID!]!
  quizzeIds: [ID!]!
  forumId: ID!
  activityIds: [ID!]!
  gradeIds: [ID!]!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

type CourseProgress {
  lecturesCompleted: Int!
  assignmentsCompleted: Int!
  quizzesCompleted: Int!
  overallProgress: Int!
}

enum CourseType {
  PRACTICUM
  LESSONS
  SHORT_COURSE
}

enum ProgramType {
  PGDT
  DIPLOMA
}

enum CourseStatus {
  DELAYED
  IN_PROGRESS
  COMPLETED
}

input CreateCourseInput {
  code: String!
  title: String!
  userId: ID!
  shortDescription: String!
  description: String
  semester: String!
  startDate: Time
  endDate: Time
  coverImageUrl: String
  type: CourseType!
  status: CourseStatus!
  programType: ProgramType!
  instructorIds: [ID!]!
}

input UpdateCourseInput {
  id: ID!
  code: String!
  title: String!
  shortDescription: String!
  description: String
  semester: String!
  startDate: Time
  endDate: Time
  matricNumber: String!
  coverImageUrl: String
  type: CourseType!
  status: CourseStatus!
  programType: ProgramType!
  instructorIds: [ID!]!
  studentIds: [ID!]
  courseContentIds: [ID!]
  assignmentIds: [ID!]
  quizIds: [ID!]
  forumId: ID
  activityIds: [ID!]
  gradeIds: [ID!]
}

input NewCourse {
  id: ID!
  userId: ID!
  title: String!
  code: String!
  coverImg: String!
  type: String!
  semester: String!
  program: String!
  tutors: [ID!]
  shortDescription: String!
  longDescription: String!
}

extend type Mutation {
  createCourse(input: CreateCourseInput): Course!
  updateCourse(input: Any): Course!
  deleteCourse(id: ID!): Course!
}

extend type Query {
  courses(userId: ID): [Course!]!
  course(id: ID!): Course!
}

# - Course Category (Diploma or PGDT; First semester or second semester; For diploma they would have year one or year 2)
# - Course Lecturer Details ( Name, short description, email)
# - Students should be able to register for the courses they take themselves
# - Lecture Videos
# - Lecture Note
# - Assignment (PDF & Essay that can be typed directly in a text box)
# - Examination (Objective & Essay) The examination would have number of attempts and time duration
# - Students should be able to send the lecturer messages regarding questions and grey areas as they watch the videos. And the lecturer should be able to give them answers.
# - The examination and Assignment would have a timeline
# - Students should be able to see their results after taking their exams or assignment. They should be able to also see their results whenever they login.
# - The admin should be able to view the grades of students in one page.
# - after watching the lecture video a grade should be assigned to the student.
# - Grading is as follows ( Exams 40%, Assignment 20%, Online meeting attendance 20%, lecture video watching attendance 20%)
`, BuiltIn: false},
	{Name: "../schema/evaluation_criterial.gql", Input: `type EvaluationCriteria {
  id: ID!
  passingScore: Int!
  scoreDistribution: [ScoreDistribution!]!
  gradingScale: [GradeScale!]!
  weight: Int!
  penalties: [Penalty!]!
  bonuses: [Bonus!]!
  resubmissionPolicy: ResubmissionPolicy!
  isPassFail: Boolean!
  quizId: ID!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

type ScoreDistribution {
  id: ID!
  minScore: Int!
  maxScore: Int!
  grade: String!
  percentage: Int!
}

type GradeScale {
  id: ID!
  minScore: Int!
  maxScore: Int!
  grade: String!
}

type Penalty {
  id: ID!
  name: String!
  description: String!
  percentage: Int!
}

type Bonus {
  id: ID!
  name: String!
  description: String!
  percentage: Int!
}

enum ResubmissionPolicy {
  ALLOWED
  NOT_ALLOWED
  LIMIT_NUMBER
  LIMIT_TIME
}

input CreateEvaluationCriteriaInput {
  passingScore: Int!
  weight: Int!
  resubmissionPolicy: ResubmissionPolicy
  isPassFail: Boolean!
  quizId: ID!
}

input UpdateEvaluationCriteriaInput {
  passingScore: Int
  weight: Int
  resubmissionPolicy: ResubmissionPolicy
  isPassFail: Boolean
  quizId: ID
}

type Query {
  evaluationCriterias: [EvaluationCriteria!]!
  evaluationCriteria(id: ID!): EvaluationCriteria
}

type Mutation {
  createEvaluationCriteria(input: CreateEvaluationCriteriaInput!): EvaluationCriteria!
  updateEvaluationCriteria(id: ID!, input: UpdateEvaluationCriteriaInput!): EvaluationCriteria!
  deleteEvaluationCriteria(id: ID!): EvaluationCriteria!
}
`, BuiltIn: false},
	{Name: "../schema/forum.gql", Input: `type Forum {
  id: ID!
  name: String!
  description: String
  courseId: ID!
  postIds: [ID!]!
  tagIds: [ID!]!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

type ForumPost {
  id: ID!
  title: String!
  content: String!
  courseID: ID!
  author: ID!
  commentIds: [ID!]!
  fileIds: [ID!]!
  forumId: ID!
  userId: ID!
  tags: [ID!]!
  upvotes: Int!
  downvotes: Int!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

type ForumComment {
  id: ID!
  content: String!
  courseId: ID!
  userId: ID!
  postId: ID!
  parentId: ID!
  fileIds: [ID!]!
  upvotes: Int!
  downvotes: Int!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

type Tag {
  id: ID!
  name: String!
  postIds: [ID!]!
  courseIds: [ID!]!
}

input CreateForumInput {
  name: String!
  description: String
  courseId: ID!
  tags: [ID!]
}

input UpdateForumInput {
  name: String
  description: String
  tags: [ID!]
}

input CreateForumPostInput {
  title: String!
  content: String!
  courseId: ID!
  forumId: ID!
  userId: ID!
  tags: [ID!]
  files: [ID!]
}

input UpdateForumPostInput {
  title: String
  content: String
  tags: [ID!]
  files: [ID!]
}

input CreateForumCommentInput {
  userId: ID!
  parentId: ID!
  content: String!
  courseId: ID!
  postId: ID!
  files: [ID!]
}

input UpdateForumCommentInput {
  content: String
  files: [ID!]
}

input CreateTagInput {
  name: String!
}

input UpdateTagInput {
  name: String
}

extend type Query {
  forums(courseId: ID): [Forum!]!
  forum(id: ID!): Forum
  forumPosts(courseId: ID, tags: [ID!]!): [ForumPost!]!
  forumPost(id: ID!): ForumPost
  forumComments(courseId: ID): [ForumComment!]!
  forumComment(id: ID!): ForumComment
}

extend type Mutation {
  createForum(input: CreateForumInput!): Forum!
  updateForum(id: ID!, input: UpdateForumInput!): Forum!
  deleteForum(id: ID!): Forum!

  createForumPost(input: CreateForumPostInput!): ForumPost!
  updateForumPost(id: ID!, input: UpdateForumPostInput!): ForumPost!
  deleteForumPost(id: ID!): ForumPost!

  createForumComment(input: CreateForumCommentInput!): ForumComment!
  updateForumComment(id: ID!, input: UpdateForumCommentInput!): ForumComment!
  deleteForumComment(id: ID!): ForumComment!

  createTag(input: CreateTagInput!): Tag!
  updateTag(id: ID!, input: UpdateTagInput!): Tag!
  deleteTag(id: ID!): Tag!
}
`, BuiltIn: false},
	{Name: "../schema/grade.gql", Input: `type Grade {
  id: ID!
  studentId: ID!
  courseId: ID!
  quizId: ID!
  value: Int!
  criteria: String!
  comments: String!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

input CreateGradeInput {
  courseId: ID!
  studentId: ID!
  quizId: ID!
  value: Int!
  criteria: String!
  comments: String!
}

input UpdateGradeInput {
  id: ID!
  studentId: ID!
  courseId: ID!
  quizId: ID!
  value: Int!
  criteria: String!
  comments: String!
}

extend type Mutation {
  createGrade(input: CreateGradeInput!): Grade
  updateGrade(id: ID!, input: UpdateGradeInput!): Grade
  deleteGrade(id: ID!): Boolean!
}

extend type Query {
  grades: [Grade!]!
  grade(id: ID!): Grade
}
`, BuiltIn: false},
	{Name: "../schema/media.gql", Input: `type File {
  name: String!
  mimetype: String!
  encoding: String!
  size: Int!
  url: String!
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  PDF
  WORD_DOC
  TEXT
  PPT
  SPREADSHEET
  ARCHIVE
  OTHERS
}

type Media {
  id: ID!
  courseId: ID!
  userId: ID!
  title: String!
  description: String
  category: String!
  mediaType: MediaType!
  tags: [String!]!
  videoPlayerInfo: PlayerInfo
  file: File!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

type PlayerInfo {
  currentTime: Int!
  duration: Int!
  thumbnailUrl: String!
  posterUrl: String
}

input PlayerInfoInput {
  currentTime: Int
  duration: Int
  thumbnailUrl: String
  posterUrl: String
}

input UpdateMediaInput {
  id: ID!
  title: String!
  description: String
  category: String!
  mediaType: MediaType!
  duration: Int64!
  videoPlayerInfo: PlayerInfoInput
  file: UpdateFileInput!
}

input CreatMediaInput {
  userId: ID!
  courseID: ID!
  title: String!
  description: String
  category: String!
  mediaType: MediaType!
  file: CreateFileInput!
}

input CreateFileInput {
  name: String!
  mimeType: String!
  size: Int!
  url: String!
}

input UpdateFileInput {
  name: String!
  mimetype: String!
  encoding: String!
  size: Int!
  url: String!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

extend type Query {
  media(id: ID!): Media
  mediaByType(type: MediaType!): [Media!]!
  allMedia: [Media!]!
}

extend type Mutation {
  createMedia(input: CreatMediaInput!): Media
  updateMedia(input: UpdateMediaInput!): Media
  deleteMedia(id: ID!): Media
}
`, BuiltIn: false},
	{Name: "../schema/notification.gql", Input: `type Notification {
  id: ID!
  senderId: ID!
  recipientId: ID!
  courseId: ID!
  seen: Boolean!
  text: String!
  title: String!
  type: NotificationType!
  link: String
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
}

enum NotificationType {
  MESSAGE
  ANNOUNCEMENT
  COURSE_UPDATE
  GRADE_UPDATE
  FORUM_UPDATE
}

input CreateNotificationInput {
  senderId: ID!
  recipientId: ID!
  courseId: ID!
  text: String!
  title: String!
  type: NotificationType!
  link: String
}

input UpdateNotificationInput {
  read: Boolean
}

extend type Query {
  notifications(courseId: ID, recipientId: ID, read: Boolean): [Notification!]!
}

extend type Mutation {
  createNotification(input: CreateNotificationInput!): Notification!
  updateNotification(id: ID!, input: UpdateNotificationInput!): Notification!
  deleteNotification(id: ID!): Notification!
}

type Subscription {
  notificationAdded: Notification!
}
`, BuiltIn: false},
	{Name: "../schema/permission.gql", Input: `type Permission {
  id: ID!
  role: Role!
  model: AllowedModel!
  permissions: [AllowedPermission!]!
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
  SUPER_ADMIN
  SUPPORT
  ALUMNI
  PARTNER
  GUEST
}

enum AllowedModel {
  COURSE
  ACTIVITY
  COURSE_CONTENT
  FILE
  FORUM
  FORUM_POST
  FORUM_COMMENT
  GRADE
  QUIZ
  QUESTION
  SUBMISSION
  ANSWER_CHOICE
  MATCHING_PAIR
  NOTIFICATION
  TARGET
  USER
}

enum AllowedPermission {
  CREATE
  READ
  UPDATE
  DELETE
  UPDATE_PERMISSIONS
  GRANT_PERMISSIONS
  REVOKE_PERMISSIONS
}

input PermissionInput {
  role: Role!
  model: AllowedModel!
  permissions: [AllowedPermission!]!
}

extend type Query {
  getPermissionsForUser(userID: ID!): [Permission!]!
  getPermissionsForModel(model: AllowedModel!): [Permission!]!
}

extend type Mutation {
  updatePermission(input: PermissionInput!): Permission
  grantPermission(input: PermissionInput!): Permission
  revokePermission(input: PermissionInput!): Permission
}
`, BuiltIn: false},
	{Name: "../schema/quiz.gql", Input: `type Quiz {
  id: ID!
  name: String!
  description: String!
  quizType: QuizType!
  duration: Int!
  passingScore: Int!
  proctoringMethod: ProctoringMethod!
  questions: [Question!]!
  resultsReleaseDate: Time
  certificate: Boolean!
  startTime: Time!
  endTime: Time!
  startDate: Time!
  dueDate: String!
  timeLimit: Int!
  shuffleQuestions: Boolean!
  randomizeQuestions: Boolean
  randomizeAnswers: Boolean
  categories: [String!]
  courseId: ID!
  questionIds: [ID!]!
  gradeIds: [ID!]!
  submissionIds: [ID]
  isLocked: Boolean!
  waitTime: Int!
  weight: Int!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time!
}


enum QuizType {
  EXAM
  ASSIGNMENT
}

enum ProctoringMethod {
  NONE
  MANUAL
  AUTOMATED
}

input CreateQuizInput {
  name: String!
  timeLimit: Int!
  shuffleQuestions: Boolean!
  categories: [String!]
  questions: [CreateQuestionInput!]!
}

input UpdateQuizInput {
  id: ID!
  name: String!
  timeLimit: Int!
  shuffleQuestions: Boolean!
  categories: [String!]
  questions: [UpdateQuestionInput!]
}

type Question {
  id: ID!
  type: QuestionType!
  text: String!
  choices: [AnswerChoice!]!
  correctAnswer: String!
  feedback: String!
  hints: [String!]!
  randomize: Boolean!
  pointValue: Int!
  categories: [String!]!
  matchingPairs: [MatchingPair!]!
}

input UpdateQuestionInput {
  id: ID!
  type: QuestionType!
  text: String!
  choices: [AnswerChoiceInput!]!
  correctAnswer: String!
  feedback: String!
  hints: [String!]!
  randomize: Boolean!
  pointValue: Int!
  categories: [String!]!
  matchingPairs: [MatchingPairInput!]!
}

input CreateQuestionInput {
  type: QuestionType!
  text: String!
  choices: [AnswerChoiceInput!]!
  correctAnswer: String!
  feedback: String!
  hints: [String!]!
  randomize: Boolean!
  pointValue: Int!
  categories: [String!]!
  matchingPairs: [MatchingPairInput!]!
}

enum QuestionType {
  MULTIPLE_CHOICE
  MULTIPLE_CORRECT
  SHORT_ANSWER
  ESSAY
  MATCHING
  TRUE_FALSE
}

type MatchingPair {
  id: ID!
  question: Question!
  left: String!
  right: String!
}

input MatchingPairInput {
  left: String!
  right: String!
}

type Answer {
  id: ID!
  questionId: ID!
  choices: [AnswerChoice!]!
  value: String!
  isCorrect: Boolean!
  weight: Int!
  pointsAwarded: Int!
  feedback: String!
  createdAt: Time!
  updatedAt: Time!
}

input AnswerInput {
  submission: SubmissionInput!
  questionId: ID!
  choices: [AnswerChoiceInput!]!
  value: String!
  isCorrect: Boolean!
  weight: Int!
  pointsAwarded: Int!
  feedback: String!
}

type AnswerChoice {
  id: ID!
  text: String!
  isCorrect: Boolean!
  feedback: String!
  weight: Int!
}

input AnswerChoiceInput {
  id: ID!
  text: String!
  isCorrect: Boolean!
  feedback: String!
  weight: Int!
}

type Submission {
  id: ID!
  quizID: ID!
  userID: String!
  startTime: Time!
  endTime: Time!
  answers: [Answer!]!
  points: Int!
  grade: Float!
  weight: Int!
  feedback: [String!]
  startedAt: Time!
  completedAt: Time!
  createdAt: Time!
  updatedAt: Time!
}

input SubmissionInput {
  quiz: UpdateQuizInput!
  userID: String!
  startTime: Time!
  endTime: Time!
  answers: [AnswerInput!]!
  points: Int!
  grade: Float!
  weight: Int!
  feedback: [String!]!
  startedAt: Time!
}

extend type Query {
  quiz(id: ID!): Quiz!
  quizzes: [Quiz!]!
  submission(id: ID!): Submission!
  submissions: [Submission!]!
}

extend type Mutation {
  createQuiz(input: CreateQuizInput!): Quiz
  updateQuiz(id: ID!, input: UpdateQuizInput!): Quiz
  deleteQuiz(id: ID!): Boolean!
  submitQuiz(quizId: ID!, input: SubmissionInput!): Submission
}
`, BuiltIn: false},
	{Name: "../schema/schema.gql", Input: `directive @requireAuth(token: String) on FIELD_DEFINITION
directive @goTag(key: String!, value: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

scalar Time
scalar Date
scalar Any
scalar Int64
scalar Upload
`, BuiltIn: false},
	{Name: "../schema/settings.gql", Input: `type UserSetting {
  id: ID!
  userId: ID!
  type: SettingType!
  key: UserSettingKeys!
  value: String!
}

type GlobalSetting {
  id: ID!
  type: SettingType!
  key: GlobalSettingKeys!
  value: String!
}

enum SettingType {
  BOOLEAN
  STRING
  NUMBER
  DATE
  TIME
}

enum UserSettingKeys {
  EMAIL_NOTIFICATIONS_ENABLED
  DEFAULT_TIMEZONE
  DEFAULT_LANGUAGE
  DARK_MODE_ENABLED
  SHOW_UNFINISHED_COURSES
  SHOW_COMPLETED_COURSES
  AUTO_ENROLLMENT_ENABLED
  SHOW_COURSE_PROGRESS
  DEFAULT_FONT_SIZE
  ENABLE_TTS
  SHOW_ENROLLED_COURSES_COUNT
  SHOW_INSTRUCTOR_AVAILABILITY
  SHOW_RELATED_COURSES
  SHOW_COURSE_RATINGS
  SHOW_COURSE_REVIEWS
  ALLOW_PUSH_NOTIFICATIONS
  ENABLE_OFFLINE_MODE
  SHOW_COURSE_ACTIVITY_FEED
}

enum GlobalSettingKeys {
  ENROLLMENT_OPEN
  MAX_ENROLLMENT
  DEFAULT_TIMEZONE
  DEFAULT_LANGUAGE
  SHOW_INSTRUCTOR_INFO
  ALLOW_STUDENT_MESSAGES
  COURSE_PASSING_GRADE
  SHOW_POPULAR_COURSES
  SHOW_RECOMMENDED_COURSES
  DEFAULT_COURSE_TEMPLATE
  SHOW_ALL_COURSES
  ALLOW_COURSE_DISCOVERY
  ENABLE_BADGES
  SHOW_COURSE_TAGS
  ALLOW_COURSE_COMMENTS
  ENABLE_SSO_LOGIN
  SHOW_ANNOUNCEMENTS
  SHOW_COURSE_SCHEDULE
}

input NewSetting {
  type: SettingType!
  userKey: UserSettingKeys
  globalKey: GlobalSettingKeys
  value: String!
}

input UpdateSetting {
  value: String
}

extend type Mutation {
  createUserSetting(userId: ID!, input: NewSetting!): UserSetting!
  updateUserSetting(id: ID!, input: UpdateSetting!): UserSetting!
  deleteUserSetting(id: ID!): Boolean!

  createGlobalSetting(input: NewSetting!): GlobalSetting!
  updateGlobalSetting(id: ID!, input: UpdateSetting!): GlobalSetting!
  deleteGlobalSetting(id: ID!): Boolean!
}

extend type Query {
  userSetting(id: ID!): UserSetting!
  userSettings(userId: ID!, limit: Int = 25, offset: Int = 0): [UserSetting!]!

  globalSetting(id: ID!): GlobalSetting!
  globalSettings(limit: Int = 25, offset: Int = 0): [GlobalSetting!]!
}`, BuiltIn: false},
	{Name: "../schema/target.gql", Input: `type Target {
  id: ID!
  name: String!
  description: String
  dueDate: Time
  startDate:Time
  courseId: ID!
  completionDate: Time
  isCompleted: Boolean!
  targetType: TargetType!
  targetValue: Int
  currentValue: Int
  targetMetric: String!
  reminders: [Reminder]
  units: String!
  repeatInterval: RepeatInterval!
  repeatEndDate: Time
  createdAt: Time
  updatedAt: Time
}

type Reminder {
  id: ID!
  target: Target!
  user: User!
  message: String!
  sendTime: Time!
  sent: Boolean!
  createdAt: Time!
  updatedAt: Time!
}

enum TargetType {
  TARGET
  MINIMUM
  MAXIMUM
}

enum RepeatInterval {
  DAY
  WEEK
  MONTH
  YEAR
}

input CreateTargetInput {
  name: String!
  description: String
  startDate: Time
  endDate: Time
  courseId: ID!
  targetType: TargetType
  targetMetric: String!
  targetValue: Int!
  units: String
}

input UpdateTargetInput {
  name: String
  description: String
  startDate: Time
  endDate: Time
  courseId: ID
  targetValue: Int
  units: String
}

extend type Query {
  targets(courseId: ID): [Target!]!
  target(id: ID!): Target
}

extend type Mutation {
  createTarget(input: CreateTargetInput!): Target
  updateTarget(id: ID!, input: UpdateTargetInput!): Target
  deleteTarget(id: ID!): Target
}
`, BuiltIn: false},
	{Name: "../schema/user.gql", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/
type User {
  id: String!
  firstName: String!
  lastName: String!
  middleName: String!
  fullName: String!
  email: String!
  role: Role!
  permissionIds: [ID!]!
  phone: String!
  avatarUrl: String!
  dob: String!
  gender: String!
  address: String!
  city: String!
  state: String!
  country: String!
  zip: String!
  nationality: String!
  profession: String!
  passwordSalt: String!
  passwordHash: String! @goTag(key: "json", value: "-")
  permissions: [String]
  username: String!
  isVerified: Boolean!
  about: String!
  wallet: Float!
  timeZone: String!
  progress: Int!
  accessToken: Token!
  refreshToken: Token!
  verifycationToken: Token!
  isAuthenticated: Boolean!
  status: RegistrationStatus

  # School Data
  matricNumber: String!
  platform: String!
  program: String!
  regNumber: String!
  files: [ID!]
  courses: [ID!]

  # Spiritual Background
  salvationBrief: String!
  godsWorkings: String!
  reason: String!
  churchName: String!
  churchAddress: String!
  pastorName: String!
  pastorEmail: String!
  pastorPhone: String!
  churchInvolved: String!

  # Health Information
  healthConditions: String!
  healthIssueDescription: String!

  scholarship: Boolean
  scholarshipReason: String!

  qualifications: [Qualification!]!
  referees: [Referee!]!
  notifications: [Notification!]!

  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  confirmedAt: Time
  confirmationMailSentAt: Time
}

enum RegistrationStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
  REJECTED
}

input UpdateProspective {
  firstName: String
  lastName: String
  email: String
  dob: String
  phone: String
  address: String
  city: String
  state: String
  country: String
  zip: String
  nationality: String
  platform: String
  program: String
  salvationBrief: String!
  godsWorkings: [String!]
  reason: String!
  churchName: String!
  churchAddress: String
  pastorName: String
  pastorEmail: String
  pastorPhone: String
  churchInvolved: String
  healthConditions: [String]
  healthIssueDescription: String
  status: RegistrationStatus!
}

type Qualification {
  id: ID!
  degree: String!
  institution: String!
  graduationYear: String!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

input NewQualification {
  degree: String!
  institution: String!
  graduationYear: String!
}

type Referee {
  id: ID!
  fullName: String!
  email: String!
  phone: String!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

input NewReferee {
  userId: ID!
  fullName: String!
  email: String!
  phone: String!
}

input VerifyInput {
  email: String!
  password: String
  code: String!
  resend: Boolean
}

extend type Query {
  users: [User]
  user(id: ID!): User
}

extend type Mutation {
  createUser(input: NewUser!): User
  createReferee(userId: ID!, input: NewReferee!): Referee
  createQualification(userId: ID!, input: NewQualification!): Qualification
  updateUser(input: Any): User
  updateProspective(input: UpdateProspective): User
  deleteUser(id: ID!): User
  deleteManyUsers(ids: [ID!]): User
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_requireAuth_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_changePassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["refreshToken"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshToken"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["refreshToken"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createActivity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateActivityInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateActivityInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateActivityInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCourse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateCourseInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOCreateCourseInput2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateCourseInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createEvaluationCriteria_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateEvaluationCriteriaInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateEvaluationCriteriaInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateEvaluationCriteriaInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createForumComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateForumCommentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateForumCommentInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateForumCommentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createForumPost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateForumPostInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateForumPostInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateForumPostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createForum_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateForumInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateForumInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateForumInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createGlobalSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewSetting
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewSetting2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNewSetting(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createGrade_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateGradeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateGradeInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateGradeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMedia_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreatMediaInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreatMediaInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreatMediaInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createNotification_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateNotificationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateNotificationInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateNotificationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createQualification_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 model.NewQualification
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNNewQualification2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNewQualification(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createQuiz_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateQuizInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateQuizInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateQuizInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createReferee_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 model.NewReferee
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNNewReferee2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNewReferee(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateTagInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateTagInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateTagInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTarget_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateTargetInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateTargetInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateTargetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUserSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 model.NewSetting
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNNewSetting2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNewSetting(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewUser
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewUser2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNewUser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteActivity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCourse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteEvaluationCriteria_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteForumComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteForumPost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteForum_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteGlobalSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteGrade_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteManyUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalOID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMedia_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteNotification_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteQuiz_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTarget_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUserSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_forgetPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_grantPermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PermissionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPermissionInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPermissionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_refresh_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["refreshToken"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshToken"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["refreshToken"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_resetPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["refreshToken"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshToken"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["refreshToken"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["password"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_revokePermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PermissionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPermissionInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPermissionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_signIn_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AuthUser
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAuthUser2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAuthUser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_signOut_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["refreshToken"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshToken"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["refreshToken"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_signUp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewUser
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewUser2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNewUser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_submitQuiz_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["quizId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quizId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["quizId"] = arg0
	var arg1 model.SubmissionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNSubmissionInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSubmissionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateActivity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateActivityInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateActivityInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateActivityInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCourse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOAny2interface(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEvaluationCriteria_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.UpdateEvaluationCriteriaInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateEvaluationCriteriaInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateEvaluationCriteriaInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateForumComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.UpdateForumCommentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateForumCommentInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateForumCommentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateForumPost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.UpdateForumPostInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateForumPostInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateForumPostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateForum_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.UpdateForumInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateForumInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateForumInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateGlobalSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.UpdateSetting
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateSetting2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateSetting(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateGrade_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.UpdateGradeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateGradeInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateGradeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMedia_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateMediaInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateMediaInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateMediaInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateNotification_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.UpdateNotificationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateNotificationInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateNotificationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PermissionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPermissionInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPermissionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProspective_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UpdateProspective
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOUpdateProspective2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateProspective(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateQuiz_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.UpdateQuizInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateQuizInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateQuizInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.UpdateTagInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateTagInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateTagInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTarget_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.UpdateTargetInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateTargetInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateTargetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.UpdateSetting
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateSetting2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateSetting(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 interface{}
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOAny2interface(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_verifyEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["refreshToken"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("refreshToken"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["refreshToken"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_activities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["courseID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseID"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["courseID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_activity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_course_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_courses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_evaluationCriteria_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_forumComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_forumComments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["courseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["courseId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_forumPost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_forumPosts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["courseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["courseId"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["tags"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
		arg1, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tags"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_forum_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_forums_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["courseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["courseId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPermissionsForModel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AllowedModel
	if tmp, ok := rawArgs["model"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("model"))
		arg0, err = ec.unmarshalNAllowedModel2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAllowedModel(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["model"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPermissionsForUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_globalSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_globalSettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_grade_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_mediaByType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MediaType
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalNMediaType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMediaType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_media_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_notifications_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["courseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["courseId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["recipientId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipientId"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["recipientId"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["read"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("read"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["read"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_quiz_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_submission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_target_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_targets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["courseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["courseId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_userSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_userSettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Activity_id(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_userID(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_courseID(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_courseID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_courseID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_courseContentID(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_courseContentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseContentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_courseContentID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_activityType(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_activityType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActivityType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActivityType)
	fc.Result = res
	return ec.marshalNActivityType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐActivityType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_activityType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActivityType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Activity_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Activity_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Activity_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Answer_id(ctx context.Context, field graphql.CollectedField, obj *model.Answer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Answer_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Answer_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Answer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Answer_questionId(ctx context.Context, field graphql.CollectedField, obj *model.Answer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Answer_questionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuestionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Answer_questionId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Answer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Answer_choices(ctx context.Context, field graphql.CollectedField, obj *model.Answer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Answer_choices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Choices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.AnswerChoice)
	fc.Result = res
	return ec.marshalNAnswerChoice2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerChoiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Answer_choices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Answer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AnswerChoice_id(ctx, field)
			case "text":
				return ec.fieldContext_AnswerChoice_text(ctx, field)
			case "isCorrect":
				return ec.fieldContext_AnswerChoice_isCorrect(ctx, field)
			case "feedback":
				return ec.fieldContext_AnswerChoice_feedback(ctx, field)
			case "weight":
				return ec.fieldContext_AnswerChoice_weight(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AnswerChoice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Answer_value(ctx context.Context, field graphql.CollectedField, obj *model.Answer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Answer_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Answer_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Answer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Answer_isCorrect(ctx context.Context, field graphql.CollectedField, obj *model.Answer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Answer_isCorrect(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCorrect, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Answer_isCorrect(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Answer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Answer_weight(ctx context.Context, field graphql.CollectedField, obj *model.Answer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Answer_weight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Answer_weight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Answer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Answer_pointsAwarded(ctx context.Context, field graphql.CollectedField, obj *model.Answer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Answer_pointsAwarded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointsAwarded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Answer_pointsAwarded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Answer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Answer_feedback(ctx context.Context, field graphql.CollectedField, obj *model.Answer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Answer_feedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Feedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Answer_feedback(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Answer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Answer_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Answer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Answer_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Answer_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Answer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Answer_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Answer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Answer_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Answer_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Answer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnswerChoice_id(ctx context.Context, field graphql.CollectedField, obj *model.AnswerChoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnswerChoice_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnswerChoice_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnswerChoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnswerChoice_text(ctx context.Context, field graphql.CollectedField, obj *model.AnswerChoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnswerChoice_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnswerChoice_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnswerChoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnswerChoice_isCorrect(ctx context.Context, field graphql.CollectedField, obj *model.AnswerChoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnswerChoice_isCorrect(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCorrect, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnswerChoice_isCorrect(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnswerChoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnswerChoice_feedback(ctx context.Context, field graphql.CollectedField, obj *model.AnswerChoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnswerChoice_feedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Feedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnswerChoice_feedback(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnswerChoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AnswerChoice_weight(ctx context.Context, field graphql.CollectedField, obj *model.AnswerChoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AnswerChoice_weight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AnswerChoice_weight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AnswerChoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Bonus_id(ctx context.Context, field graphql.CollectedField, obj *model.Bonus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Bonus_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Bonus_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Bonus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Bonus_name(ctx context.Context, field graphql.CollectedField, obj *model.Bonus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Bonus_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Bonus_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Bonus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Bonus_description(ctx context.Context, field graphql.CollectedField, obj *model.Bonus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Bonus_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Bonus_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Bonus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Bonus_percentage(ctx context.Context, field graphql.CollectedField, obj *model.Bonus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Bonus_percentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Percentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Bonus_percentage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Bonus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_id(ctx context.Context, field graphql.CollectedField, obj *model.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_userId(ctx context.Context, field graphql.CollectedField, obj *model.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_email(ctx context.Context, field graphql.CollectedField, obj *model.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Claims_Role(ctx context.Context, field graphql.CollectedField, obj *model.Claims) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Claims_Role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Claims_Role(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Claims",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_id(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_userId(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_code(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_title(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_shortDescription(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_shortDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_shortDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_description(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_semester(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_semester(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Semester, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_semester(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_year(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_year(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_startDate(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_startDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_startDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_endDate(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_endDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_endDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_matricNumber(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_matricNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatricNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_matricNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_coverImageUrl(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_coverImageUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CoverImageURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_coverImageUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_type(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CourseType)
	fc.Result = res
	return ec.marshalNCourseType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourseType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CourseType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_status(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CourseStatus)
	fc.Result = res
	return ec.marshalNCourseStatus2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourseStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CourseStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_progress(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_progress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CourseProgress)
	fc.Result = res
	return ec.marshalNCourseProgress2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourseProgress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_progress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lecturesCompleted":
				return ec.fieldContext_CourseProgress_lecturesCompleted(ctx, field)
			case "assignmentsCompleted":
				return ec.fieldContext_CourseProgress_assignmentsCompleted(ctx, field)
			case "quizzesCompleted":
				return ec.fieldContext_CourseProgress_quizzesCompleted(ctx, field)
			case "overallProgress":
				return ec.fieldContext_CourseProgress_overallProgress(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CourseProgress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_programType(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_programType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProgramType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ProgramType)
	fc.Result = res
	return ec.marshalNProgramType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐProgramType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_programType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ProgramType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_instructorIds(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_instructorIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstructorIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_instructorIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_students(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_students(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Students, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.User)
	fc.Result = res
	return ec.marshalNUser2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_students(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_assignmentIds(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_assignmentIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignmentIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_assignmentIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_quizzeIds(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_quizzeIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizzeIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_quizzeIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_forumId(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_forumId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ForumID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_forumId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_activityIds(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_activityIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActivityIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_activityIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_gradeIds(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_gradeIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GradeIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_gradeIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Course_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Course) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Course_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Course_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Course",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseProgress_lecturesCompleted(ctx context.Context, field graphql.CollectedField, obj *model.CourseProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseProgress_lecturesCompleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LecturesCompleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseProgress_lecturesCompleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseProgress_assignmentsCompleted(ctx context.Context, field graphql.CollectedField, obj *model.CourseProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseProgress_assignmentsCompleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssignmentsCompleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseProgress_assignmentsCompleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseProgress_quizzesCompleted(ctx context.Context, field graphql.CollectedField, obj *model.CourseProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseProgress_quizzesCompleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizzesCompleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseProgress_quizzesCompleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CourseProgress_overallProgress(ctx context.Context, field graphql.CollectedField, obj *model.CourseProgress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CourseProgress_overallProgress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverallProgress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CourseProgress_overallProgress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CourseProgress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationCriteria_id(ctx context.Context, field graphql.CollectedField, obj *model.EvaluationCriteria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationCriteria_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationCriteria_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationCriteria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationCriteria_passingScore(ctx context.Context, field graphql.CollectedField, obj *model.EvaluationCriteria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationCriteria_passingScore(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassingScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationCriteria_passingScore(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationCriteria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationCriteria_scoreDistribution(ctx context.Context, field graphql.CollectedField, obj *model.EvaluationCriteria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationCriteria_scoreDistribution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScoreDistribution, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ScoreDistribution)
	fc.Result = res
	return ec.marshalNScoreDistribution2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐScoreDistributionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationCriteria_scoreDistribution(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationCriteria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ScoreDistribution_id(ctx, field)
			case "minScore":
				return ec.fieldContext_ScoreDistribution_minScore(ctx, field)
			case "maxScore":
				return ec.fieldContext_ScoreDistribution_maxScore(ctx, field)
			case "grade":
				return ec.fieldContext_ScoreDistribution_grade(ctx, field)
			case "percentage":
				return ec.fieldContext_ScoreDistribution_percentage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ScoreDistribution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationCriteria_gradingScale(ctx context.Context, field graphql.CollectedField, obj *model.EvaluationCriteria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationCriteria_gradingScale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GradingScale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.GradeScale)
	fc.Result = res
	return ec.marshalNGradeScale2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGradeScaleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationCriteria_gradingScale(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationCriteria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GradeScale_id(ctx, field)
			case "minScore":
				return ec.fieldContext_GradeScale_minScore(ctx, field)
			case "maxScore":
				return ec.fieldContext_GradeScale_maxScore(ctx, field)
			case "grade":
				return ec.fieldContext_GradeScale_grade(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GradeScale", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationCriteria_weight(ctx context.Context, field graphql.CollectedField, obj *model.EvaluationCriteria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationCriteria_weight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationCriteria_weight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationCriteria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationCriteria_penalties(ctx context.Context, field graphql.CollectedField, obj *model.EvaluationCriteria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationCriteria_penalties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Penalties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Penalty)
	fc.Result = res
	return ec.marshalNPenalty2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPenaltyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationCriteria_penalties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationCriteria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Penalty_id(ctx, field)
			case "name":
				return ec.fieldContext_Penalty_name(ctx, field)
			case "description":
				return ec.fieldContext_Penalty_description(ctx, field)
			case "percentage":
				return ec.fieldContext_Penalty_percentage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Penalty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationCriteria_bonuses(ctx context.Context, field graphql.CollectedField, obj *model.EvaluationCriteria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationCriteria_bonuses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bonuses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Bonus)
	fc.Result = res
	return ec.marshalNBonus2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐBonusᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationCriteria_bonuses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationCriteria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Bonus_id(ctx, field)
			case "name":
				return ec.fieldContext_Bonus_name(ctx, field)
			case "description":
				return ec.fieldContext_Bonus_description(ctx, field)
			case "percentage":
				return ec.fieldContext_Bonus_percentage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Bonus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationCriteria_resubmissionPolicy(ctx context.Context, field graphql.CollectedField, obj *model.EvaluationCriteria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationCriteria_resubmissionPolicy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResubmissionPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ResubmissionPolicy)
	fc.Result = res
	return ec.marshalNResubmissionPolicy2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐResubmissionPolicy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationCriteria_resubmissionPolicy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationCriteria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ResubmissionPolicy does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationCriteria_isPassFail(ctx context.Context, field graphql.CollectedField, obj *model.EvaluationCriteria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationCriteria_isPassFail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPassFail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationCriteria_isPassFail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationCriteria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationCriteria_quizId(ctx context.Context, field graphql.CollectedField, obj *model.EvaluationCriteria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationCriteria_quizId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationCriteria_quizId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationCriteria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationCriteria_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.EvaluationCriteria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationCriteria_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationCriteria_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationCriteria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationCriteria_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.EvaluationCriteria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationCriteria_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationCriteria_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationCriteria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EvaluationCriteria_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.EvaluationCriteria) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EvaluationCriteria_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EvaluationCriteria_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EvaluationCriteria",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_name(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_mimetype(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_mimetype(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mimetype, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_mimetype(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_encoding(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_encoding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Encoding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_encoding(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_size(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_size(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_size(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _File_url(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_File_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_File_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Forum_id(ctx context.Context, field graphql.CollectedField, obj *model.Forum) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Forum_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Forum_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Forum",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Forum_name(ctx context.Context, field graphql.CollectedField, obj *model.Forum) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Forum_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Forum_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Forum",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Forum_description(ctx context.Context, field graphql.CollectedField, obj *model.Forum) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Forum_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Forum_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Forum",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Forum_courseId(ctx context.Context, field graphql.CollectedField, obj *model.Forum) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Forum_courseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Forum_courseId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Forum",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Forum_postIds(ctx context.Context, field graphql.CollectedField, obj *model.Forum) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Forum_postIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Forum_postIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Forum",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Forum_tagIds(ctx context.Context, field graphql.CollectedField, obj *model.Forum) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Forum_tagIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TagIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Forum_tagIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Forum",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Forum_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Forum) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Forum_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Forum_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Forum",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Forum_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Forum) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Forum_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Forum_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Forum",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Forum_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Forum) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Forum_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Forum_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Forum",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumComment_id(ctx context.Context, field graphql.CollectedField, obj *model.ForumComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumComment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumComment_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumComment_content(ctx context.Context, field graphql.CollectedField, obj *model.ForumComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumComment_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumComment_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumComment_courseId(ctx context.Context, field graphql.CollectedField, obj *model.ForumComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumComment_courseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumComment_courseId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumComment_userId(ctx context.Context, field graphql.CollectedField, obj *model.ForumComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumComment_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumComment_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumComment_postId(ctx context.Context, field graphql.CollectedField, obj *model.ForumComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumComment_postId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumComment_postId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumComment_parentId(ctx context.Context, field graphql.CollectedField, obj *model.ForumComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumComment_parentId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumComment_parentId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumComment_fileIds(ctx context.Context, field graphql.CollectedField, obj *model.ForumComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumComment_fileIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumComment_fileIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumComment_upvotes(ctx context.Context, field graphql.CollectedField, obj *model.ForumComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumComment_upvotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Upvotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumComment_upvotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumComment_downvotes(ctx context.Context, field graphql.CollectedField, obj *model.ForumComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumComment_downvotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Downvotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumComment_downvotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumComment_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ForumComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumComment_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumComment_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumComment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.ForumComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumComment_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumComment_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumComment_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.ForumComment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumComment_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumComment_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumPost_id(ctx context.Context, field graphql.CollectedField, obj *model.ForumPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumPost_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumPost_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumPost_title(ctx context.Context, field graphql.CollectedField, obj *model.ForumPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumPost_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumPost_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumPost_content(ctx context.Context, field graphql.CollectedField, obj *model.ForumPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumPost_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumPost_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumPost_courseID(ctx context.Context, field graphql.CollectedField, obj *model.ForumPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumPost_courseID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumPost_courseID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumPost_author(ctx context.Context, field graphql.CollectedField, obj *model.ForumPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumPost_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumPost_author(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumPost_commentIds(ctx context.Context, field graphql.CollectedField, obj *model.ForumPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumPost_commentIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumPost_commentIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumPost_fileIds(ctx context.Context, field graphql.CollectedField, obj *model.ForumPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumPost_fileIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumPost_fileIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumPost_forumId(ctx context.Context, field graphql.CollectedField, obj *model.ForumPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumPost_forumId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ForumID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumPost_forumId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumPost_userId(ctx context.Context, field graphql.CollectedField, obj *model.ForumPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumPost_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumPost_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumPost_tags(ctx context.Context, field graphql.CollectedField, obj *model.ForumPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumPost_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumPost_tags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumPost_upvotes(ctx context.Context, field graphql.CollectedField, obj *model.ForumPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumPost_upvotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Upvotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumPost_upvotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumPost_downvotes(ctx context.Context, field graphql.CollectedField, obj *model.ForumPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumPost_downvotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Downvotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumPost_downvotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumPost_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ForumPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumPost_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumPost_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumPost_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.ForumPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumPost_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumPost_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ForumPost_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.ForumPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ForumPost_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ForumPost_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ForumPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalSetting_id(ctx context.Context, field graphql.CollectedField, obj *model.GlobalSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalSetting_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalSetting_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalSetting_type(ctx context.Context, field graphql.CollectedField, obj *model.GlobalSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalSetting_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.SettingType)
	fc.Result = res
	return ec.marshalNSettingType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSettingType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalSetting_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SettingType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalSetting_key(ctx context.Context, field graphql.CollectedField, obj *model.GlobalSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalSetting_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.GlobalSettingKeys)
	fc.Result = res
	return ec.marshalNGlobalSettingKeys2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGlobalSettingKeys(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalSetting_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GlobalSettingKeys does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalSetting_value(ctx context.Context, field graphql.CollectedField, obj *model.GlobalSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalSetting_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalSetting_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Grade_id(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Grade_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Grade_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Grade_studentId(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Grade_studentId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StudentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Grade_studentId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Grade_courseId(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Grade_courseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Grade_courseId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Grade_quizId(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Grade_quizId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Grade_quizId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Grade_value(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Grade_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Grade_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Grade_criteria(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Grade_criteria(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Criteria, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Grade_criteria(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Grade_comments(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Grade_comments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Grade_comments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Grade_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Grade_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Grade_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Grade_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Grade_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Grade_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Grade_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Grade) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Grade_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Grade_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Grade",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeScale_id(ctx context.Context, field graphql.CollectedField, obj *model.GradeScale) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GradeScale_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GradeScale_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeScale",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeScale_minScore(ctx context.Context, field graphql.CollectedField, obj *model.GradeScale) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GradeScale_minScore(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GradeScale_minScore(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeScale",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeScale_maxScore(ctx context.Context, field graphql.CollectedField, obj *model.GradeScale) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GradeScale_maxScore(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GradeScale_maxScore(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeScale",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeScale_grade(ctx context.Context, field graphql.CollectedField, obj *model.GradeScale) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GradeScale_grade(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GradeScale_grade(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeScale",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MatchingPair_id(ctx context.Context, field graphql.CollectedField, obj *model.MatchingPair) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MatchingPair_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MatchingPair_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MatchingPair",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MatchingPair_question(ctx context.Context, field graphql.CollectedField, obj *model.MatchingPair) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MatchingPair_question(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Question, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Question)
	fc.Result = res
	return ec.marshalNQuestion2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuestion(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MatchingPair_question(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MatchingPair",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Question_id(ctx, field)
			case "type":
				return ec.fieldContext_Question_type(ctx, field)
			case "text":
				return ec.fieldContext_Question_text(ctx, field)
			case "choices":
				return ec.fieldContext_Question_choices(ctx, field)
			case "correctAnswer":
				return ec.fieldContext_Question_correctAnswer(ctx, field)
			case "feedback":
				return ec.fieldContext_Question_feedback(ctx, field)
			case "hints":
				return ec.fieldContext_Question_hints(ctx, field)
			case "randomize":
				return ec.fieldContext_Question_randomize(ctx, field)
			case "pointValue":
				return ec.fieldContext_Question_pointValue(ctx, field)
			case "categories":
				return ec.fieldContext_Question_categories(ctx, field)
			case "matchingPairs":
				return ec.fieldContext_Question_matchingPairs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Question", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MatchingPair_left(ctx context.Context, field graphql.CollectedField, obj *model.MatchingPair) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MatchingPair_left(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Left, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MatchingPair_left(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MatchingPair",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MatchingPair_right(ctx context.Context, field graphql.CollectedField, obj *model.MatchingPair) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MatchingPair_right(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Right, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MatchingPair_right(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MatchingPair",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_id(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_courseId(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_courseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_courseId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_userId(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_title(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_description(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_category(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_mediaType(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_mediaType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MediaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.MediaType)
	fc.Result = res
	return ec.marshalNMediaType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMediaType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_mediaType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MediaType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_tags(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_tags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_videoPlayerInfo(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_videoPlayerInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VideoPlayerInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PlayerInfo)
	fc.Result = res
	return ec.marshalOPlayerInfo2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPlayerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_videoPlayerInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "currentTime":
				return ec.fieldContext_PlayerInfo_currentTime(ctx, field)
			case "duration":
				return ec.fieldContext_PlayerInfo_duration(ctx, field)
			case "thumbnailUrl":
				return ec.fieldContext_PlayerInfo_thumbnailUrl(ctx, field)
			case "posterUrl":
				return ec.fieldContext_PlayerInfo_posterUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlayerInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_file(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_file(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.File, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.File)
	fc.Result = res
	return ec.marshalNFile2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐFile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_file(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_File_name(ctx, field)
			case "mimetype":
				return ec.fieldContext_File_mimetype(ctx, field)
			case "encoding":
				return ec.fieldContext_File_encoding(ctx, field)
			case "size":
				return ec.fieldContext_File_size(ctx, field)
			case "url":
				return ec.fieldContext_File_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type File", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createEvaluationCriteria(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createEvaluationCriteria(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateEvaluationCriteria(rctx, fc.Args["input"].(model.CreateEvaluationCriteriaInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EvaluationCriteria)
	fc.Result = res
	return ec.marshalNEvaluationCriteria2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐEvaluationCriteria(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createEvaluationCriteria(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EvaluationCriteria_id(ctx, field)
			case "passingScore":
				return ec.fieldContext_EvaluationCriteria_passingScore(ctx, field)
			case "scoreDistribution":
				return ec.fieldContext_EvaluationCriteria_scoreDistribution(ctx, field)
			case "gradingScale":
				return ec.fieldContext_EvaluationCriteria_gradingScale(ctx, field)
			case "weight":
				return ec.fieldContext_EvaluationCriteria_weight(ctx, field)
			case "penalties":
				return ec.fieldContext_EvaluationCriteria_penalties(ctx, field)
			case "bonuses":
				return ec.fieldContext_EvaluationCriteria_bonuses(ctx, field)
			case "resubmissionPolicy":
				return ec.fieldContext_EvaluationCriteria_resubmissionPolicy(ctx, field)
			case "isPassFail":
				return ec.fieldContext_EvaluationCriteria_isPassFail(ctx, field)
			case "quizId":
				return ec.fieldContext_EvaluationCriteria_quizId(ctx, field)
			case "createdAt":
				return ec.fieldContext_EvaluationCriteria_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EvaluationCriteria_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_EvaluationCriteria_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EvaluationCriteria", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createEvaluationCriteria_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateEvaluationCriteria(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateEvaluationCriteria(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEvaluationCriteria(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateEvaluationCriteriaInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EvaluationCriteria)
	fc.Result = res
	return ec.marshalNEvaluationCriteria2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐEvaluationCriteria(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateEvaluationCriteria(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EvaluationCriteria_id(ctx, field)
			case "passingScore":
				return ec.fieldContext_EvaluationCriteria_passingScore(ctx, field)
			case "scoreDistribution":
				return ec.fieldContext_EvaluationCriteria_scoreDistribution(ctx, field)
			case "gradingScale":
				return ec.fieldContext_EvaluationCriteria_gradingScale(ctx, field)
			case "weight":
				return ec.fieldContext_EvaluationCriteria_weight(ctx, field)
			case "penalties":
				return ec.fieldContext_EvaluationCriteria_penalties(ctx, field)
			case "bonuses":
				return ec.fieldContext_EvaluationCriteria_bonuses(ctx, field)
			case "resubmissionPolicy":
				return ec.fieldContext_EvaluationCriteria_resubmissionPolicy(ctx, field)
			case "isPassFail":
				return ec.fieldContext_EvaluationCriteria_isPassFail(ctx, field)
			case "quizId":
				return ec.fieldContext_EvaluationCriteria_quizId(ctx, field)
			case "createdAt":
				return ec.fieldContext_EvaluationCriteria_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EvaluationCriteria_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_EvaluationCriteria_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EvaluationCriteria", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateEvaluationCriteria_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteEvaluationCriteria(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteEvaluationCriteria(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteEvaluationCriteria(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EvaluationCriteria)
	fc.Result = res
	return ec.marshalNEvaluationCriteria2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐEvaluationCriteria(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteEvaluationCriteria(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EvaluationCriteria_id(ctx, field)
			case "passingScore":
				return ec.fieldContext_EvaluationCriteria_passingScore(ctx, field)
			case "scoreDistribution":
				return ec.fieldContext_EvaluationCriteria_scoreDistribution(ctx, field)
			case "gradingScale":
				return ec.fieldContext_EvaluationCriteria_gradingScale(ctx, field)
			case "weight":
				return ec.fieldContext_EvaluationCriteria_weight(ctx, field)
			case "penalties":
				return ec.fieldContext_EvaluationCriteria_penalties(ctx, field)
			case "bonuses":
				return ec.fieldContext_EvaluationCriteria_bonuses(ctx, field)
			case "resubmissionPolicy":
				return ec.fieldContext_EvaluationCriteria_resubmissionPolicy(ctx, field)
			case "isPassFail":
				return ec.fieldContext_EvaluationCriteria_isPassFail(ctx, field)
			case "quizId":
				return ec.fieldContext_EvaluationCriteria_quizId(ctx, field)
			case "createdAt":
				return ec.fieldContext_EvaluationCriteria_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EvaluationCriteria_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_EvaluationCriteria_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EvaluationCriteria", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteEvaluationCriteria_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createActivity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createActivity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateActivity(rctx, fc.Args["input"].(model.CreateActivityInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Activity)
	fc.Result = res
	return ec.marshalOActivity2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐActivity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createActivity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "userID":
				return ec.fieldContext_Activity_userID(ctx, field)
			case "courseID":
				return ec.fieldContext_Activity_courseID(ctx, field)
			case "courseContentID":
				return ec.fieldContext_Activity_courseContentID(ctx, field)
			case "activityType":
				return ec.fieldContext_Activity_activityType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Activity_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createActivity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateActivity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateActivity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateActivity(rctx, fc.Args["input"].(model.UpdateActivityInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Activity)
	fc.Result = res
	return ec.marshalOActivity2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐActivity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateActivity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "userID":
				return ec.fieldContext_Activity_userID(ctx, field)
			case "courseID":
				return ec.fieldContext_Activity_courseID(ctx, field)
			case "courseContentID":
				return ec.fieldContext_Activity_courseContentID(ctx, field)
			case "activityType":
				return ec.fieldContext_Activity_activityType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Activity_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateActivity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteActivity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteActivity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteActivity(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteActivity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteActivity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_refresh(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_refresh(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Refresh(rctx, fc.Args["refreshToken"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_refresh(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_refresh_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_signOut(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_signOut(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SignOut(rctx, fc.Args["refreshToken"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_signOut(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_signOut_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_signIn(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_signIn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SignIn(rctx, fc.Args["input"].(model.AuthUser))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_signIn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_signIn_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_signUp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_signUp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SignUp(rctx, fc.Args["input"].(model.NewUser))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_signUp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_signUp_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_forgetPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_forgetPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ForgetPassword(rctx, fc.Args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_forgetPassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_forgetPassword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_resetPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_resetPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResetPassword(rctx, fc.Args["refreshToken"].(string), fc.Args["password"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_resetPassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_resetPassword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_changePassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_changePassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ChangePassword(rctx, fc.Args["refreshToken"].(string), fc.Args["userId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_changePassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_changePassword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_verifyEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_verifyEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().VerifyEmail(rctx, fc.Args["refreshToken"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_verifyEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_verifyEmail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCourse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCourse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCourse(rctx, fc.Args["input"].(*model.CreateCourseInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Course)
	fc.Result = res
	return ec.marshalNCourse2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCourse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Course_id(ctx, field)
			case "userId":
				return ec.fieldContext_Course_userId(ctx, field)
			case "code":
				return ec.fieldContext_Course_code(ctx, field)
			case "title":
				return ec.fieldContext_Course_title(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Course_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Course_description(ctx, field)
			case "semester":
				return ec.fieldContext_Course_semester(ctx, field)
			case "year":
				return ec.fieldContext_Course_year(ctx, field)
			case "startDate":
				return ec.fieldContext_Course_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Course_endDate(ctx, field)
			case "matricNumber":
				return ec.fieldContext_Course_matricNumber(ctx, field)
			case "coverImageUrl":
				return ec.fieldContext_Course_coverImageUrl(ctx, field)
			case "type":
				return ec.fieldContext_Course_type(ctx, field)
			case "status":
				return ec.fieldContext_Course_status(ctx, field)
			case "progress":
				return ec.fieldContext_Course_progress(ctx, field)
			case "programType":
				return ec.fieldContext_Course_programType(ctx, field)
			case "instructorIds":
				return ec.fieldContext_Course_instructorIds(ctx, field)
			case "students":
				return ec.fieldContext_Course_students(ctx, field)
			case "assignmentIds":
				return ec.fieldContext_Course_assignmentIds(ctx, field)
			case "quizzeIds":
				return ec.fieldContext_Course_quizzeIds(ctx, field)
			case "forumId":
				return ec.fieldContext_Course_forumId(ctx, field)
			case "activityIds":
				return ec.fieldContext_Course_activityIds(ctx, field)
			case "gradeIds":
				return ec.fieldContext_Course_gradeIds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Course_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Course_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Course_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Course", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCourse_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCourse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCourse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCourse(rctx,
			func() interface{} {
				if fc.Args["input"] == nil {
					return nil
				}
				return fc.Args["input"].(interface{})
			}())
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Course)
	fc.Result = res
	return ec.marshalNCourse2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCourse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Course_id(ctx, field)
			case "userId":
				return ec.fieldContext_Course_userId(ctx, field)
			case "code":
				return ec.fieldContext_Course_code(ctx, field)
			case "title":
				return ec.fieldContext_Course_title(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Course_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Course_description(ctx, field)
			case "semester":
				return ec.fieldContext_Course_semester(ctx, field)
			case "year":
				return ec.fieldContext_Course_year(ctx, field)
			case "startDate":
				return ec.fieldContext_Course_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Course_endDate(ctx, field)
			case "matricNumber":
				return ec.fieldContext_Course_matricNumber(ctx, field)
			case "coverImageUrl":
				return ec.fieldContext_Course_coverImageUrl(ctx, field)
			case "type":
				return ec.fieldContext_Course_type(ctx, field)
			case "status":
				return ec.fieldContext_Course_status(ctx, field)
			case "progress":
				return ec.fieldContext_Course_progress(ctx, field)
			case "programType":
				return ec.fieldContext_Course_programType(ctx, field)
			case "instructorIds":
				return ec.fieldContext_Course_instructorIds(ctx, field)
			case "students":
				return ec.fieldContext_Course_students(ctx, field)
			case "assignmentIds":
				return ec.fieldContext_Course_assignmentIds(ctx, field)
			case "quizzeIds":
				return ec.fieldContext_Course_quizzeIds(ctx, field)
			case "forumId":
				return ec.fieldContext_Course_forumId(ctx, field)
			case "activityIds":
				return ec.fieldContext_Course_activityIds(ctx, field)
			case "gradeIds":
				return ec.fieldContext_Course_gradeIds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Course_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Course_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Course_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Course", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCourse_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCourse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCourse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCourse(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Course)
	fc.Result = res
	return ec.marshalNCourse2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCourse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Course_id(ctx, field)
			case "userId":
				return ec.fieldContext_Course_userId(ctx, field)
			case "code":
				return ec.fieldContext_Course_code(ctx, field)
			case "title":
				return ec.fieldContext_Course_title(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Course_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Course_description(ctx, field)
			case "semester":
				return ec.fieldContext_Course_semester(ctx, field)
			case "year":
				return ec.fieldContext_Course_year(ctx, field)
			case "startDate":
				return ec.fieldContext_Course_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Course_endDate(ctx, field)
			case "matricNumber":
				return ec.fieldContext_Course_matricNumber(ctx, field)
			case "coverImageUrl":
				return ec.fieldContext_Course_coverImageUrl(ctx, field)
			case "type":
				return ec.fieldContext_Course_type(ctx, field)
			case "status":
				return ec.fieldContext_Course_status(ctx, field)
			case "progress":
				return ec.fieldContext_Course_progress(ctx, field)
			case "programType":
				return ec.fieldContext_Course_programType(ctx, field)
			case "instructorIds":
				return ec.fieldContext_Course_instructorIds(ctx, field)
			case "students":
				return ec.fieldContext_Course_students(ctx, field)
			case "assignmentIds":
				return ec.fieldContext_Course_assignmentIds(ctx, field)
			case "quizzeIds":
				return ec.fieldContext_Course_quizzeIds(ctx, field)
			case "forumId":
				return ec.fieldContext_Course_forumId(ctx, field)
			case "activityIds":
				return ec.fieldContext_Course_activityIds(ctx, field)
			case "gradeIds":
				return ec.fieldContext_Course_gradeIds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Course_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Course_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Course_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Course", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCourse_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createForum(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createForum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateForum(rctx, fc.Args["input"].(model.CreateForumInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Forum)
	fc.Result = res
	return ec.marshalNForum2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createForum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Forum_id(ctx, field)
			case "name":
				return ec.fieldContext_Forum_name(ctx, field)
			case "description":
				return ec.fieldContext_Forum_description(ctx, field)
			case "courseId":
				return ec.fieldContext_Forum_courseId(ctx, field)
			case "postIds":
				return ec.fieldContext_Forum_postIds(ctx, field)
			case "tagIds":
				return ec.fieldContext_Forum_tagIds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Forum_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Forum_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Forum_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Forum", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createForum_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateForum(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateForum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateForum(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateForumInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Forum)
	fc.Result = res
	return ec.marshalNForum2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateForum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Forum_id(ctx, field)
			case "name":
				return ec.fieldContext_Forum_name(ctx, field)
			case "description":
				return ec.fieldContext_Forum_description(ctx, field)
			case "courseId":
				return ec.fieldContext_Forum_courseId(ctx, field)
			case "postIds":
				return ec.fieldContext_Forum_postIds(ctx, field)
			case "tagIds":
				return ec.fieldContext_Forum_tagIds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Forum_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Forum_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Forum_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Forum", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateForum_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteForum(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteForum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteForum(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Forum)
	fc.Result = res
	return ec.marshalNForum2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteForum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Forum_id(ctx, field)
			case "name":
				return ec.fieldContext_Forum_name(ctx, field)
			case "description":
				return ec.fieldContext_Forum_description(ctx, field)
			case "courseId":
				return ec.fieldContext_Forum_courseId(ctx, field)
			case "postIds":
				return ec.fieldContext_Forum_postIds(ctx, field)
			case "tagIds":
				return ec.fieldContext_Forum_tagIds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Forum_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Forum_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Forum_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Forum", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteForum_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createForumPost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createForumPost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateForumPost(rctx, fc.Args["input"].(model.CreateForumPostInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ForumPost)
	fc.Result = res
	return ec.marshalNForumPost2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createForumPost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ForumPost_id(ctx, field)
			case "title":
				return ec.fieldContext_ForumPost_title(ctx, field)
			case "content":
				return ec.fieldContext_ForumPost_content(ctx, field)
			case "courseID":
				return ec.fieldContext_ForumPost_courseID(ctx, field)
			case "author":
				return ec.fieldContext_ForumPost_author(ctx, field)
			case "commentIds":
				return ec.fieldContext_ForumPost_commentIds(ctx, field)
			case "fileIds":
				return ec.fieldContext_ForumPost_fileIds(ctx, field)
			case "forumId":
				return ec.fieldContext_ForumPost_forumId(ctx, field)
			case "userId":
				return ec.fieldContext_ForumPost_userId(ctx, field)
			case "tags":
				return ec.fieldContext_ForumPost_tags(ctx, field)
			case "upvotes":
				return ec.fieldContext_ForumPost_upvotes(ctx, field)
			case "downvotes":
				return ec.fieldContext_ForumPost_downvotes(ctx, field)
			case "createdAt":
				return ec.fieldContext_ForumPost_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ForumPost_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ForumPost_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ForumPost", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createForumPost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateForumPost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateForumPost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateForumPost(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateForumPostInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ForumPost)
	fc.Result = res
	return ec.marshalNForumPost2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateForumPost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ForumPost_id(ctx, field)
			case "title":
				return ec.fieldContext_ForumPost_title(ctx, field)
			case "content":
				return ec.fieldContext_ForumPost_content(ctx, field)
			case "courseID":
				return ec.fieldContext_ForumPost_courseID(ctx, field)
			case "author":
				return ec.fieldContext_ForumPost_author(ctx, field)
			case "commentIds":
				return ec.fieldContext_ForumPost_commentIds(ctx, field)
			case "fileIds":
				return ec.fieldContext_ForumPost_fileIds(ctx, field)
			case "forumId":
				return ec.fieldContext_ForumPost_forumId(ctx, field)
			case "userId":
				return ec.fieldContext_ForumPost_userId(ctx, field)
			case "tags":
				return ec.fieldContext_ForumPost_tags(ctx, field)
			case "upvotes":
				return ec.fieldContext_ForumPost_upvotes(ctx, field)
			case "downvotes":
				return ec.fieldContext_ForumPost_downvotes(ctx, field)
			case "createdAt":
				return ec.fieldContext_ForumPost_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ForumPost_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ForumPost_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ForumPost", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateForumPost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteForumPost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteForumPost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteForumPost(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ForumPost)
	fc.Result = res
	return ec.marshalNForumPost2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteForumPost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ForumPost_id(ctx, field)
			case "title":
				return ec.fieldContext_ForumPost_title(ctx, field)
			case "content":
				return ec.fieldContext_ForumPost_content(ctx, field)
			case "courseID":
				return ec.fieldContext_ForumPost_courseID(ctx, field)
			case "author":
				return ec.fieldContext_ForumPost_author(ctx, field)
			case "commentIds":
				return ec.fieldContext_ForumPost_commentIds(ctx, field)
			case "fileIds":
				return ec.fieldContext_ForumPost_fileIds(ctx, field)
			case "forumId":
				return ec.fieldContext_ForumPost_forumId(ctx, field)
			case "userId":
				return ec.fieldContext_ForumPost_userId(ctx, field)
			case "tags":
				return ec.fieldContext_ForumPost_tags(ctx, field)
			case "upvotes":
				return ec.fieldContext_ForumPost_upvotes(ctx, field)
			case "downvotes":
				return ec.fieldContext_ForumPost_downvotes(ctx, field)
			case "createdAt":
				return ec.fieldContext_ForumPost_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ForumPost_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ForumPost_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ForumPost", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteForumPost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createForumComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createForumComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateForumComment(rctx, fc.Args["input"].(model.CreateForumCommentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ForumComment)
	fc.Result = res
	return ec.marshalNForumComment2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createForumComment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ForumComment_id(ctx, field)
			case "content":
				return ec.fieldContext_ForumComment_content(ctx, field)
			case "courseId":
				return ec.fieldContext_ForumComment_courseId(ctx, field)
			case "userId":
				return ec.fieldContext_ForumComment_userId(ctx, field)
			case "postId":
				return ec.fieldContext_ForumComment_postId(ctx, field)
			case "parentId":
				return ec.fieldContext_ForumComment_parentId(ctx, field)
			case "fileIds":
				return ec.fieldContext_ForumComment_fileIds(ctx, field)
			case "upvotes":
				return ec.fieldContext_ForumComment_upvotes(ctx, field)
			case "downvotes":
				return ec.fieldContext_ForumComment_downvotes(ctx, field)
			case "createdAt":
				return ec.fieldContext_ForumComment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ForumComment_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ForumComment_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ForumComment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createForumComment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateForumComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateForumComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateForumComment(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateForumCommentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ForumComment)
	fc.Result = res
	return ec.marshalNForumComment2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateForumComment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ForumComment_id(ctx, field)
			case "content":
				return ec.fieldContext_ForumComment_content(ctx, field)
			case "courseId":
				return ec.fieldContext_ForumComment_courseId(ctx, field)
			case "userId":
				return ec.fieldContext_ForumComment_userId(ctx, field)
			case "postId":
				return ec.fieldContext_ForumComment_postId(ctx, field)
			case "parentId":
				return ec.fieldContext_ForumComment_parentId(ctx, field)
			case "fileIds":
				return ec.fieldContext_ForumComment_fileIds(ctx, field)
			case "upvotes":
				return ec.fieldContext_ForumComment_upvotes(ctx, field)
			case "downvotes":
				return ec.fieldContext_ForumComment_downvotes(ctx, field)
			case "createdAt":
				return ec.fieldContext_ForumComment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ForumComment_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ForumComment_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ForumComment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateForumComment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteForumComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteForumComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteForumComment(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ForumComment)
	fc.Result = res
	return ec.marshalNForumComment2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteForumComment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ForumComment_id(ctx, field)
			case "content":
				return ec.fieldContext_ForumComment_content(ctx, field)
			case "courseId":
				return ec.fieldContext_ForumComment_courseId(ctx, field)
			case "userId":
				return ec.fieldContext_ForumComment_userId(ctx, field)
			case "postId":
				return ec.fieldContext_ForumComment_postId(ctx, field)
			case "parentId":
				return ec.fieldContext_ForumComment_parentId(ctx, field)
			case "fileIds":
				return ec.fieldContext_ForumComment_fileIds(ctx, field)
			case "upvotes":
				return ec.fieldContext_ForumComment_upvotes(ctx, field)
			case "downvotes":
				return ec.fieldContext_ForumComment_downvotes(ctx, field)
			case "createdAt":
				return ec.fieldContext_ForumComment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ForumComment_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ForumComment_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ForumComment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteForumComment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTag(rctx, fc.Args["input"].(model.CreateTagInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Tag)
	fc.Result = res
	return ec.marshalNTag2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "postIds":
				return ec.fieldContext_Tag_postIds(ctx, field)
			case "courseIds":
				return ec.fieldContext_Tag_courseIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTag(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateTagInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Tag)
	fc.Result = res
	return ec.marshalNTag2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "postIds":
				return ec.fieldContext_Tag_postIds(ctx, field)
			case "courseIds":
				return ec.fieldContext_Tag_courseIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTag(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Tag)
	fc.Result = res
	return ec.marshalNTag2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "postIds":
				return ec.fieldContext_Tag_postIds(ctx, field)
			case "courseIds":
				return ec.fieldContext_Tag_courseIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createGrade(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createGrade(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateGrade(rctx, fc.Args["input"].(model.CreateGradeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Grade)
	fc.Result = res
	return ec.marshalOGrade2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGrade(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createGrade(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Grade_id(ctx, field)
			case "studentId":
				return ec.fieldContext_Grade_studentId(ctx, field)
			case "courseId":
				return ec.fieldContext_Grade_courseId(ctx, field)
			case "quizId":
				return ec.fieldContext_Grade_quizId(ctx, field)
			case "value":
				return ec.fieldContext_Grade_value(ctx, field)
			case "criteria":
				return ec.fieldContext_Grade_criteria(ctx, field)
			case "comments":
				return ec.fieldContext_Grade_comments(ctx, field)
			case "createdAt":
				return ec.fieldContext_Grade_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Grade_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Grade_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Grade", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createGrade_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateGrade(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateGrade(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateGrade(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateGradeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Grade)
	fc.Result = res
	return ec.marshalOGrade2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGrade(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateGrade(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Grade_id(ctx, field)
			case "studentId":
				return ec.fieldContext_Grade_studentId(ctx, field)
			case "courseId":
				return ec.fieldContext_Grade_courseId(ctx, field)
			case "quizId":
				return ec.fieldContext_Grade_quizId(ctx, field)
			case "value":
				return ec.fieldContext_Grade_value(ctx, field)
			case "criteria":
				return ec.fieldContext_Grade_criteria(ctx, field)
			case "comments":
				return ec.fieldContext_Grade_comments(ctx, field)
			case "createdAt":
				return ec.fieldContext_Grade_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Grade_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Grade_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Grade", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateGrade_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteGrade(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteGrade(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteGrade(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteGrade(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteGrade_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMedia(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMedia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMedia(rctx, fc.Args["input"].(model.CreatMediaInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Media)
	fc.Result = res
	return ec.marshalOMedia2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Media_id(ctx, field)
			case "courseId":
				return ec.fieldContext_Media_courseId(ctx, field)
			case "userId":
				return ec.fieldContext_Media_userId(ctx, field)
			case "title":
				return ec.fieldContext_Media_title(ctx, field)
			case "description":
				return ec.fieldContext_Media_description(ctx, field)
			case "category":
				return ec.fieldContext_Media_category(ctx, field)
			case "mediaType":
				return ec.fieldContext_Media_mediaType(ctx, field)
			case "tags":
				return ec.fieldContext_Media_tags(ctx, field)
			case "videoPlayerInfo":
				return ec.fieldContext_Media_videoPlayerInfo(ctx, field)
			case "file":
				return ec.fieldContext_Media_file(ctx, field)
			case "createdAt":
				return ec.fieldContext_Media_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Media_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Media_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Media", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMedia_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMedia(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMedia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMedia(rctx, fc.Args["input"].(model.UpdateMediaInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Media)
	fc.Result = res
	return ec.marshalOMedia2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Media_id(ctx, field)
			case "courseId":
				return ec.fieldContext_Media_courseId(ctx, field)
			case "userId":
				return ec.fieldContext_Media_userId(ctx, field)
			case "title":
				return ec.fieldContext_Media_title(ctx, field)
			case "description":
				return ec.fieldContext_Media_description(ctx, field)
			case "category":
				return ec.fieldContext_Media_category(ctx, field)
			case "mediaType":
				return ec.fieldContext_Media_mediaType(ctx, field)
			case "tags":
				return ec.fieldContext_Media_tags(ctx, field)
			case "videoPlayerInfo":
				return ec.fieldContext_Media_videoPlayerInfo(ctx, field)
			case "file":
				return ec.fieldContext_Media_file(ctx, field)
			case "createdAt":
				return ec.fieldContext_Media_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Media_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Media_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Media", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMedia_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMedia(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMedia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMedia(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Media)
	fc.Result = res
	return ec.marshalOMedia2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Media_id(ctx, field)
			case "courseId":
				return ec.fieldContext_Media_courseId(ctx, field)
			case "userId":
				return ec.fieldContext_Media_userId(ctx, field)
			case "title":
				return ec.fieldContext_Media_title(ctx, field)
			case "description":
				return ec.fieldContext_Media_description(ctx, field)
			case "category":
				return ec.fieldContext_Media_category(ctx, field)
			case "mediaType":
				return ec.fieldContext_Media_mediaType(ctx, field)
			case "tags":
				return ec.fieldContext_Media_tags(ctx, field)
			case "videoPlayerInfo":
				return ec.fieldContext_Media_videoPlayerInfo(ctx, field)
			case "file":
				return ec.fieldContext_Media_file(ctx, field)
			case "createdAt":
				return ec.fieldContext_Media_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Media_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Media_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Media", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMedia_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createNotification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createNotification(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateNotification(rctx, fc.Args["input"].(model.CreateNotificationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Notification)
	fc.Result = res
	return ec.marshalNNotification2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNotification(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createNotification(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Notification_id(ctx, field)
			case "senderId":
				return ec.fieldContext_Notification_senderId(ctx, field)
			case "recipientId":
				return ec.fieldContext_Notification_recipientId(ctx, field)
			case "courseId":
				return ec.fieldContext_Notification_courseId(ctx, field)
			case "seen":
				return ec.fieldContext_Notification_seen(ctx, field)
			case "text":
				return ec.fieldContext_Notification_text(ctx, field)
			case "title":
				return ec.fieldContext_Notification_title(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "link":
				return ec.fieldContext_Notification_link(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notification_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Notification_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Notification_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createNotification_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateNotification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateNotification(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateNotification(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateNotificationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Notification)
	fc.Result = res
	return ec.marshalNNotification2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNotification(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateNotification(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Notification_id(ctx, field)
			case "senderId":
				return ec.fieldContext_Notification_senderId(ctx, field)
			case "recipientId":
				return ec.fieldContext_Notification_recipientId(ctx, field)
			case "courseId":
				return ec.fieldContext_Notification_courseId(ctx, field)
			case "seen":
				return ec.fieldContext_Notification_seen(ctx, field)
			case "text":
				return ec.fieldContext_Notification_text(ctx, field)
			case "title":
				return ec.fieldContext_Notification_title(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "link":
				return ec.fieldContext_Notification_link(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notification_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Notification_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Notification_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateNotification_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteNotification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteNotification(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteNotification(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Notification)
	fc.Result = res
	return ec.marshalNNotification2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNotification(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteNotification(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Notification_id(ctx, field)
			case "senderId":
				return ec.fieldContext_Notification_senderId(ctx, field)
			case "recipientId":
				return ec.fieldContext_Notification_recipientId(ctx, field)
			case "courseId":
				return ec.fieldContext_Notification_courseId(ctx, field)
			case "seen":
				return ec.fieldContext_Notification_seen(ctx, field)
			case "text":
				return ec.fieldContext_Notification_text(ctx, field)
			case "title":
				return ec.fieldContext_Notification_title(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "link":
				return ec.fieldContext_Notification_link(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notification_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Notification_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Notification_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteNotification_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePermission(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePermission(rctx, fc.Args["input"].(model.PermissionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Permission)
	fc.Result = res
	return ec.marshalOPermission2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPermission(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePermission(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Permission_id(ctx, field)
			case "role":
				return ec.fieldContext_Permission_role(ctx, field)
			case "model":
				return ec.fieldContext_Permission_model(ctx, field)
			case "permissions":
				return ec.fieldContext_Permission_permissions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Permission", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePermission_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_grantPermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_grantPermission(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().GrantPermission(rctx, fc.Args["input"].(model.PermissionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Permission)
	fc.Result = res
	return ec.marshalOPermission2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPermission(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_grantPermission(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Permission_id(ctx, field)
			case "role":
				return ec.fieldContext_Permission_role(ctx, field)
			case "model":
				return ec.fieldContext_Permission_model(ctx, field)
			case "permissions":
				return ec.fieldContext_Permission_permissions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Permission", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_grantPermission_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_revokePermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_revokePermission(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RevokePermission(rctx, fc.Args["input"].(model.PermissionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Permission)
	fc.Result = res
	return ec.marshalOPermission2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPermission(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_revokePermission(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Permission_id(ctx, field)
			case "role":
				return ec.fieldContext_Permission_role(ctx, field)
			case "model":
				return ec.fieldContext_Permission_model(ctx, field)
			case "permissions":
				return ec.fieldContext_Permission_permissions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Permission", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_revokePermission_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createQuiz(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createQuiz(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateQuiz(rctx, fc.Args["input"].(model.CreateQuizInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Quiz)
	fc.Result = res
	return ec.marshalOQuiz2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuiz(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createQuiz(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Quiz_id(ctx, field)
			case "name":
				return ec.fieldContext_Quiz_name(ctx, field)
			case "description":
				return ec.fieldContext_Quiz_description(ctx, field)
			case "quizType":
				return ec.fieldContext_Quiz_quizType(ctx, field)
			case "duration":
				return ec.fieldContext_Quiz_duration(ctx, field)
			case "passingScore":
				return ec.fieldContext_Quiz_passingScore(ctx, field)
			case "proctoringMethod":
				return ec.fieldContext_Quiz_proctoringMethod(ctx, field)
			case "questions":
				return ec.fieldContext_Quiz_questions(ctx, field)
			case "resultsReleaseDate":
				return ec.fieldContext_Quiz_resultsReleaseDate(ctx, field)
			case "certificate":
				return ec.fieldContext_Quiz_certificate(ctx, field)
			case "startTime":
				return ec.fieldContext_Quiz_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_Quiz_endTime(ctx, field)
			case "startDate":
				return ec.fieldContext_Quiz_startDate(ctx, field)
			case "dueDate":
				return ec.fieldContext_Quiz_dueDate(ctx, field)
			case "timeLimit":
				return ec.fieldContext_Quiz_timeLimit(ctx, field)
			case "shuffleQuestions":
				return ec.fieldContext_Quiz_shuffleQuestions(ctx, field)
			case "randomizeQuestions":
				return ec.fieldContext_Quiz_randomizeQuestions(ctx, field)
			case "randomizeAnswers":
				return ec.fieldContext_Quiz_randomizeAnswers(ctx, field)
			case "categories":
				return ec.fieldContext_Quiz_categories(ctx, field)
			case "courseId":
				return ec.fieldContext_Quiz_courseId(ctx, field)
			case "questionIds":
				return ec.fieldContext_Quiz_questionIds(ctx, field)
			case "gradeIds":
				return ec.fieldContext_Quiz_gradeIds(ctx, field)
			case "submissionIds":
				return ec.fieldContext_Quiz_submissionIds(ctx, field)
			case "isLocked":
				return ec.fieldContext_Quiz_isLocked(ctx, field)
			case "waitTime":
				return ec.fieldContext_Quiz_waitTime(ctx, field)
			case "weight":
				return ec.fieldContext_Quiz_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_Quiz_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Quiz_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Quiz_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quiz", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createQuiz_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateQuiz(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateQuiz(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateQuiz(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateQuizInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Quiz)
	fc.Result = res
	return ec.marshalOQuiz2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuiz(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateQuiz(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Quiz_id(ctx, field)
			case "name":
				return ec.fieldContext_Quiz_name(ctx, field)
			case "description":
				return ec.fieldContext_Quiz_description(ctx, field)
			case "quizType":
				return ec.fieldContext_Quiz_quizType(ctx, field)
			case "duration":
				return ec.fieldContext_Quiz_duration(ctx, field)
			case "passingScore":
				return ec.fieldContext_Quiz_passingScore(ctx, field)
			case "proctoringMethod":
				return ec.fieldContext_Quiz_proctoringMethod(ctx, field)
			case "questions":
				return ec.fieldContext_Quiz_questions(ctx, field)
			case "resultsReleaseDate":
				return ec.fieldContext_Quiz_resultsReleaseDate(ctx, field)
			case "certificate":
				return ec.fieldContext_Quiz_certificate(ctx, field)
			case "startTime":
				return ec.fieldContext_Quiz_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_Quiz_endTime(ctx, field)
			case "startDate":
				return ec.fieldContext_Quiz_startDate(ctx, field)
			case "dueDate":
				return ec.fieldContext_Quiz_dueDate(ctx, field)
			case "timeLimit":
				return ec.fieldContext_Quiz_timeLimit(ctx, field)
			case "shuffleQuestions":
				return ec.fieldContext_Quiz_shuffleQuestions(ctx, field)
			case "randomizeQuestions":
				return ec.fieldContext_Quiz_randomizeQuestions(ctx, field)
			case "randomizeAnswers":
				return ec.fieldContext_Quiz_randomizeAnswers(ctx, field)
			case "categories":
				return ec.fieldContext_Quiz_categories(ctx, field)
			case "courseId":
				return ec.fieldContext_Quiz_courseId(ctx, field)
			case "questionIds":
				return ec.fieldContext_Quiz_questionIds(ctx, field)
			case "gradeIds":
				return ec.fieldContext_Quiz_gradeIds(ctx, field)
			case "submissionIds":
				return ec.fieldContext_Quiz_submissionIds(ctx, field)
			case "isLocked":
				return ec.fieldContext_Quiz_isLocked(ctx, field)
			case "waitTime":
				return ec.fieldContext_Quiz_waitTime(ctx, field)
			case "weight":
				return ec.fieldContext_Quiz_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_Quiz_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Quiz_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Quiz_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quiz", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateQuiz_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteQuiz(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteQuiz(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteQuiz(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteQuiz(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteQuiz_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_submitQuiz(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_submitQuiz(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitQuiz(rctx, fc.Args["quizId"].(string), fc.Args["input"].(model.SubmissionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Submission)
	fc.Result = res
	return ec.marshalOSubmission2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSubmission(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_submitQuiz(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Submission_id(ctx, field)
			case "quizID":
				return ec.fieldContext_Submission_quizID(ctx, field)
			case "userID":
				return ec.fieldContext_Submission_userID(ctx, field)
			case "startTime":
				return ec.fieldContext_Submission_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_Submission_endTime(ctx, field)
			case "answers":
				return ec.fieldContext_Submission_answers(ctx, field)
			case "points":
				return ec.fieldContext_Submission_points(ctx, field)
			case "grade":
				return ec.fieldContext_Submission_grade(ctx, field)
			case "weight":
				return ec.fieldContext_Submission_weight(ctx, field)
			case "feedback":
				return ec.fieldContext_Submission_feedback(ctx, field)
			case "startedAt":
				return ec.fieldContext_Submission_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_Submission_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Submission_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Submission_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Submission", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_submitQuiz_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUserSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUserSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUserSetting(rctx, fc.Args["userId"].(string), fc.Args["input"].(model.NewSetting))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserSetting)
	fc.Result = res
	return ec.marshalNUserSetting2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUserSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUserSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserSetting_id(ctx, field)
			case "userId":
				return ec.fieldContext_UserSetting_userId(ctx, field)
			case "type":
				return ec.fieldContext_UserSetting_type(ctx, field)
			case "key":
				return ec.fieldContext_UserSetting_key(ctx, field)
			case "value":
				return ec.fieldContext_UserSetting_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSetting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUserSetting_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserSetting(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateSetting))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserSetting)
	fc.Result = res
	return ec.marshalNUserSetting2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUserSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserSetting_id(ctx, field)
			case "userId":
				return ec.fieldContext_UserSetting_userId(ctx, field)
			case "type":
				return ec.fieldContext_UserSetting_type(ctx, field)
			case "key":
				return ec.fieldContext_UserSetting_key(ctx, field)
			case "value":
				return ec.fieldContext_UserSetting_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSetting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserSetting_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUserSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteUserSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUserSetting(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteUserSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteUserSetting_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createGlobalSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createGlobalSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateGlobalSetting(rctx, fc.Args["input"].(model.NewSetting))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GlobalSetting)
	fc.Result = res
	return ec.marshalNGlobalSetting2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGlobalSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createGlobalSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GlobalSetting_id(ctx, field)
			case "type":
				return ec.fieldContext_GlobalSetting_type(ctx, field)
			case "key":
				return ec.fieldContext_GlobalSetting_key(ctx, field)
			case "value":
				return ec.fieldContext_GlobalSetting_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalSetting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createGlobalSetting_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateGlobalSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateGlobalSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateGlobalSetting(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateSetting))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GlobalSetting)
	fc.Result = res
	return ec.marshalNGlobalSetting2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGlobalSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateGlobalSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GlobalSetting_id(ctx, field)
			case "type":
				return ec.fieldContext_GlobalSetting_type(ctx, field)
			case "key":
				return ec.fieldContext_GlobalSetting_key(ctx, field)
			case "value":
				return ec.fieldContext_GlobalSetting_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalSetting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateGlobalSetting_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteGlobalSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteGlobalSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteGlobalSetting(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteGlobalSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteGlobalSetting_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTarget(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTarget(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTarget(rctx, fc.Args["input"].(model.CreateTargetInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Target)
	fc.Result = res
	return ec.marshalOTarget2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTarget(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTarget(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Target_id(ctx, field)
			case "name":
				return ec.fieldContext_Target_name(ctx, field)
			case "description":
				return ec.fieldContext_Target_description(ctx, field)
			case "dueDate":
				return ec.fieldContext_Target_dueDate(ctx, field)
			case "startDate":
				return ec.fieldContext_Target_startDate(ctx, field)
			case "courseId":
				return ec.fieldContext_Target_courseId(ctx, field)
			case "completionDate":
				return ec.fieldContext_Target_completionDate(ctx, field)
			case "isCompleted":
				return ec.fieldContext_Target_isCompleted(ctx, field)
			case "targetType":
				return ec.fieldContext_Target_targetType(ctx, field)
			case "targetValue":
				return ec.fieldContext_Target_targetValue(ctx, field)
			case "currentValue":
				return ec.fieldContext_Target_currentValue(ctx, field)
			case "targetMetric":
				return ec.fieldContext_Target_targetMetric(ctx, field)
			case "reminders":
				return ec.fieldContext_Target_reminders(ctx, field)
			case "units":
				return ec.fieldContext_Target_units(ctx, field)
			case "repeatInterval":
				return ec.fieldContext_Target_repeatInterval(ctx, field)
			case "repeatEndDate":
				return ec.fieldContext_Target_repeatEndDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_Target_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Target_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Target", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTarget_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTarget(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTarget(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTarget(rctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateTargetInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Target)
	fc.Result = res
	return ec.marshalOTarget2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTarget(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTarget(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Target_id(ctx, field)
			case "name":
				return ec.fieldContext_Target_name(ctx, field)
			case "description":
				return ec.fieldContext_Target_description(ctx, field)
			case "dueDate":
				return ec.fieldContext_Target_dueDate(ctx, field)
			case "startDate":
				return ec.fieldContext_Target_startDate(ctx, field)
			case "courseId":
				return ec.fieldContext_Target_courseId(ctx, field)
			case "completionDate":
				return ec.fieldContext_Target_completionDate(ctx, field)
			case "isCompleted":
				return ec.fieldContext_Target_isCompleted(ctx, field)
			case "targetType":
				return ec.fieldContext_Target_targetType(ctx, field)
			case "targetValue":
				return ec.fieldContext_Target_targetValue(ctx, field)
			case "currentValue":
				return ec.fieldContext_Target_currentValue(ctx, field)
			case "targetMetric":
				return ec.fieldContext_Target_targetMetric(ctx, field)
			case "reminders":
				return ec.fieldContext_Target_reminders(ctx, field)
			case "units":
				return ec.fieldContext_Target_units(ctx, field)
			case "repeatInterval":
				return ec.fieldContext_Target_repeatInterval(ctx, field)
			case "repeatEndDate":
				return ec.fieldContext_Target_repeatEndDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_Target_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Target_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Target", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTarget_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTarget(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTarget(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTarget(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Target)
	fc.Result = res
	return ec.marshalOTarget2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTarget(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTarget(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Target_id(ctx, field)
			case "name":
				return ec.fieldContext_Target_name(ctx, field)
			case "description":
				return ec.fieldContext_Target_description(ctx, field)
			case "dueDate":
				return ec.fieldContext_Target_dueDate(ctx, field)
			case "startDate":
				return ec.fieldContext_Target_startDate(ctx, field)
			case "courseId":
				return ec.fieldContext_Target_courseId(ctx, field)
			case "completionDate":
				return ec.fieldContext_Target_completionDate(ctx, field)
			case "isCompleted":
				return ec.fieldContext_Target_isCompleted(ctx, field)
			case "targetType":
				return ec.fieldContext_Target_targetType(ctx, field)
			case "targetValue":
				return ec.fieldContext_Target_targetValue(ctx, field)
			case "currentValue":
				return ec.fieldContext_Target_currentValue(ctx, field)
			case "targetMetric":
				return ec.fieldContext_Target_targetMetric(ctx, field)
			case "reminders":
				return ec.fieldContext_Target_reminders(ctx, field)
			case "units":
				return ec.fieldContext_Target_units(ctx, field)
			case "repeatInterval":
				return ec.fieldContext_Target_repeatInterval(ctx, field)
			case "repeatEndDate":
				return ec.fieldContext_Target_repeatEndDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_Target_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Target_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Target", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTarget_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUser(rctx, fc.Args["input"].(model.NewUser))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createReferee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createReferee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateReferee(rctx, fc.Args["userId"].(string), fc.Args["input"].(model.NewReferee))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Referee)
	fc.Result = res
	return ec.marshalOReferee2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐReferee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createReferee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Referee_id(ctx, field)
			case "fullName":
				return ec.fieldContext_Referee_fullName(ctx, field)
			case "email":
				return ec.fieldContext_Referee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Referee_phone(ctx, field)
			case "createdAt":
				return ec.fieldContext_Referee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Referee_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Referee_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Referee", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createReferee_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createQualification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createQualification(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateQualification(rctx, fc.Args["userId"].(string), fc.Args["input"].(model.NewQualification))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Qualification)
	fc.Result = res
	return ec.marshalOQualification2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQualification(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createQualification(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Qualification_id(ctx, field)
			case "degree":
				return ec.fieldContext_Qualification_degree(ctx, field)
			case "institution":
				return ec.fieldContext_Qualification_institution(ctx, field)
			case "graduationYear":
				return ec.fieldContext_Qualification_graduationYear(ctx, field)
			case "createdAt":
				return ec.fieldContext_Qualification_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Qualification_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Qualification_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Qualification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createQualification_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx,
			func() interface{} {
				if fc.Args["input"] == nil {
					return nil
				}
				return fc.Args["input"].(interface{})
			}())
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProspective(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateProspective(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProspective(rctx, fc.Args["input"].(*model.UpdateProspective))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateProspective(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProspective_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteUser(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteManyUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteManyUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteManyUsers(rctx, fc.Args["ids"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteManyUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteManyUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Notification_id(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_senderId(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_senderId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SenderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_senderId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_recipientId(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_recipientId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_recipientId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_courseId(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_courseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_courseId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_seen(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_seen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_seen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_text(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_title(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_type(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.NotificationType)
	fc.Result = res
	return ec.marshalNNotificationType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNotificationType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NotificationType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_link(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Notification_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Notification_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Penalty_id(ctx context.Context, field graphql.CollectedField, obj *model.Penalty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Penalty_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Penalty_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Penalty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Penalty_name(ctx context.Context, field graphql.CollectedField, obj *model.Penalty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Penalty_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Penalty_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Penalty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Penalty_description(ctx context.Context, field graphql.CollectedField, obj *model.Penalty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Penalty_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Penalty_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Penalty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Penalty_percentage(ctx context.Context, field graphql.CollectedField, obj *model.Penalty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Penalty_percentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Percentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Penalty_percentage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Penalty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Permission_id(ctx context.Context, field graphql.CollectedField, obj *model.Permission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Permission_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Permission_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Permission_role(ctx context.Context, field graphql.CollectedField, obj *model.Permission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Permission_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Role)
	fc.Result = res
	return ec.marshalNRole2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Permission_role(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Role does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Permission_model(ctx context.Context, field graphql.CollectedField, obj *model.Permission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Permission_model(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Model, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.AllowedModel)
	fc.Result = res
	return ec.marshalNAllowedModel2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAllowedModel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Permission_model(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AllowedModel does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Permission_permissions(ctx context.Context, field graphql.CollectedField, obj *model.Permission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Permission_permissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.AllowedPermission)
	fc.Result = res
	return ec.marshalNAllowedPermission2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAllowedPermissionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Permission_permissions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AllowedPermission does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerInfo_currentTime(ctx context.Context, field graphql.CollectedField, obj *model.PlayerInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerInfo_currentTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerInfo_currentTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerInfo_duration(ctx context.Context, field graphql.CollectedField, obj *model.PlayerInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerInfo_duration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerInfo_duration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerInfo_thumbnailUrl(ctx context.Context, field graphql.CollectedField, obj *model.PlayerInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerInfo_thumbnailUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThumbnailURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerInfo_thumbnailUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerInfo_posterUrl(ctx context.Context, field graphql.CollectedField, obj *model.PlayerInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerInfo_posterUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosterURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerInfo_posterUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Qualification_id(ctx context.Context, field graphql.CollectedField, obj *model.Qualification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Qualification_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Qualification_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Qualification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Qualification_degree(ctx context.Context, field graphql.CollectedField, obj *model.Qualification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Qualification_degree(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Degree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Qualification_degree(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Qualification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Qualification_institution(ctx context.Context, field graphql.CollectedField, obj *model.Qualification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Qualification_institution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Institution, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Qualification_institution(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Qualification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Qualification_graduationYear(ctx context.Context, field graphql.CollectedField, obj *model.Qualification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Qualification_graduationYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GraduationYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Qualification_graduationYear(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Qualification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Qualification_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Qualification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Qualification_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Qualification_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Qualification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Qualification_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Qualification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Qualification_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Qualification_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Qualification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Qualification_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Qualification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Qualification_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Qualification_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Qualification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_evaluationCriterias(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_evaluationCriterias(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EvaluationCriterias(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.EvaluationCriteria)
	fc.Result = res
	return ec.marshalNEvaluationCriteria2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐEvaluationCriteriaᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_evaluationCriterias(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EvaluationCriteria_id(ctx, field)
			case "passingScore":
				return ec.fieldContext_EvaluationCriteria_passingScore(ctx, field)
			case "scoreDistribution":
				return ec.fieldContext_EvaluationCriteria_scoreDistribution(ctx, field)
			case "gradingScale":
				return ec.fieldContext_EvaluationCriteria_gradingScale(ctx, field)
			case "weight":
				return ec.fieldContext_EvaluationCriteria_weight(ctx, field)
			case "penalties":
				return ec.fieldContext_EvaluationCriteria_penalties(ctx, field)
			case "bonuses":
				return ec.fieldContext_EvaluationCriteria_bonuses(ctx, field)
			case "resubmissionPolicy":
				return ec.fieldContext_EvaluationCriteria_resubmissionPolicy(ctx, field)
			case "isPassFail":
				return ec.fieldContext_EvaluationCriteria_isPassFail(ctx, field)
			case "quizId":
				return ec.fieldContext_EvaluationCriteria_quizId(ctx, field)
			case "createdAt":
				return ec.fieldContext_EvaluationCriteria_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EvaluationCriteria_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_EvaluationCriteria_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EvaluationCriteria", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_evaluationCriteria(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_evaluationCriteria(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EvaluationCriteria(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EvaluationCriteria)
	fc.Result = res
	return ec.marshalOEvaluationCriteria2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐEvaluationCriteria(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_evaluationCriteria(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EvaluationCriteria_id(ctx, field)
			case "passingScore":
				return ec.fieldContext_EvaluationCriteria_passingScore(ctx, field)
			case "scoreDistribution":
				return ec.fieldContext_EvaluationCriteria_scoreDistribution(ctx, field)
			case "gradingScale":
				return ec.fieldContext_EvaluationCriteria_gradingScale(ctx, field)
			case "weight":
				return ec.fieldContext_EvaluationCriteria_weight(ctx, field)
			case "penalties":
				return ec.fieldContext_EvaluationCriteria_penalties(ctx, field)
			case "bonuses":
				return ec.fieldContext_EvaluationCriteria_bonuses(ctx, field)
			case "resubmissionPolicy":
				return ec.fieldContext_EvaluationCriteria_resubmissionPolicy(ctx, field)
			case "isPassFail":
				return ec.fieldContext_EvaluationCriteria_isPassFail(ctx, field)
			case "quizId":
				return ec.fieldContext_EvaluationCriteria_quizId(ctx, field)
			case "createdAt":
				return ec.fieldContext_EvaluationCriteria_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EvaluationCriteria_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_EvaluationCriteria_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EvaluationCriteria", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_evaluationCriteria_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_activities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_activities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Activities(rctx, fc.Args["courseID"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Activity)
	fc.Result = res
	return ec.marshalNActivity2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐActivityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_activities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "userID":
				return ec.fieldContext_Activity_userID(ctx, field)
			case "courseID":
				return ec.fieldContext_Activity_courseID(ctx, field)
			case "courseContentID":
				return ec.fieldContext_Activity_courseContentID(ctx, field)
			case "activityType":
				return ec.fieldContext_Activity_activityType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Activity_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_activities_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_activity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_activity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Activity(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Activity)
	fc.Result = res
	return ec.marshalOActivity2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐActivity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_activity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "userID":
				return ec.fieldContext_Activity_userID(ctx, field)
			case "courseID":
				return ec.fieldContext_Activity_courseID(ctx, field)
			case "courseContentID":
				return ec.fieldContext_Activity_courseContentID(ctx, field)
			case "activityType":
				return ec.fieldContext_Activity_activityType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Activity_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_activity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_courses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_courses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Courses(rctx, fc.Args["userId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Course)
	fc.Result = res
	return ec.marshalNCourse2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_courses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Course_id(ctx, field)
			case "userId":
				return ec.fieldContext_Course_userId(ctx, field)
			case "code":
				return ec.fieldContext_Course_code(ctx, field)
			case "title":
				return ec.fieldContext_Course_title(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Course_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Course_description(ctx, field)
			case "semester":
				return ec.fieldContext_Course_semester(ctx, field)
			case "year":
				return ec.fieldContext_Course_year(ctx, field)
			case "startDate":
				return ec.fieldContext_Course_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Course_endDate(ctx, field)
			case "matricNumber":
				return ec.fieldContext_Course_matricNumber(ctx, field)
			case "coverImageUrl":
				return ec.fieldContext_Course_coverImageUrl(ctx, field)
			case "type":
				return ec.fieldContext_Course_type(ctx, field)
			case "status":
				return ec.fieldContext_Course_status(ctx, field)
			case "progress":
				return ec.fieldContext_Course_progress(ctx, field)
			case "programType":
				return ec.fieldContext_Course_programType(ctx, field)
			case "instructorIds":
				return ec.fieldContext_Course_instructorIds(ctx, field)
			case "students":
				return ec.fieldContext_Course_students(ctx, field)
			case "assignmentIds":
				return ec.fieldContext_Course_assignmentIds(ctx, field)
			case "quizzeIds":
				return ec.fieldContext_Course_quizzeIds(ctx, field)
			case "forumId":
				return ec.fieldContext_Course_forumId(ctx, field)
			case "activityIds":
				return ec.fieldContext_Course_activityIds(ctx, field)
			case "gradeIds":
				return ec.fieldContext_Course_gradeIds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Course_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Course_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Course_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Course", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_courses_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_course(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_course(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Course(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Course)
	fc.Result = res
	return ec.marshalNCourse2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_course(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Course_id(ctx, field)
			case "userId":
				return ec.fieldContext_Course_userId(ctx, field)
			case "code":
				return ec.fieldContext_Course_code(ctx, field)
			case "title":
				return ec.fieldContext_Course_title(ctx, field)
			case "shortDescription":
				return ec.fieldContext_Course_shortDescription(ctx, field)
			case "description":
				return ec.fieldContext_Course_description(ctx, field)
			case "semester":
				return ec.fieldContext_Course_semester(ctx, field)
			case "year":
				return ec.fieldContext_Course_year(ctx, field)
			case "startDate":
				return ec.fieldContext_Course_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Course_endDate(ctx, field)
			case "matricNumber":
				return ec.fieldContext_Course_matricNumber(ctx, field)
			case "coverImageUrl":
				return ec.fieldContext_Course_coverImageUrl(ctx, field)
			case "type":
				return ec.fieldContext_Course_type(ctx, field)
			case "status":
				return ec.fieldContext_Course_status(ctx, field)
			case "progress":
				return ec.fieldContext_Course_progress(ctx, field)
			case "programType":
				return ec.fieldContext_Course_programType(ctx, field)
			case "instructorIds":
				return ec.fieldContext_Course_instructorIds(ctx, field)
			case "students":
				return ec.fieldContext_Course_students(ctx, field)
			case "assignmentIds":
				return ec.fieldContext_Course_assignmentIds(ctx, field)
			case "quizzeIds":
				return ec.fieldContext_Course_quizzeIds(ctx, field)
			case "forumId":
				return ec.fieldContext_Course_forumId(ctx, field)
			case "activityIds":
				return ec.fieldContext_Course_activityIds(ctx, field)
			case "gradeIds":
				return ec.fieldContext_Course_gradeIds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Course_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Course_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Course_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Course", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_course_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_forums(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_forums(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Forums(rctx, fc.Args["courseId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Forum)
	fc.Result = res
	return ec.marshalNForum2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_forums(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Forum_id(ctx, field)
			case "name":
				return ec.fieldContext_Forum_name(ctx, field)
			case "description":
				return ec.fieldContext_Forum_description(ctx, field)
			case "courseId":
				return ec.fieldContext_Forum_courseId(ctx, field)
			case "postIds":
				return ec.fieldContext_Forum_postIds(ctx, field)
			case "tagIds":
				return ec.fieldContext_Forum_tagIds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Forum_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Forum_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Forum_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Forum", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_forums_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_forum(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_forum(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Forum(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Forum)
	fc.Result = res
	return ec.marshalOForum2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_forum(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Forum_id(ctx, field)
			case "name":
				return ec.fieldContext_Forum_name(ctx, field)
			case "description":
				return ec.fieldContext_Forum_description(ctx, field)
			case "courseId":
				return ec.fieldContext_Forum_courseId(ctx, field)
			case "postIds":
				return ec.fieldContext_Forum_postIds(ctx, field)
			case "tagIds":
				return ec.fieldContext_Forum_tagIds(ctx, field)
			case "createdAt":
				return ec.fieldContext_Forum_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Forum_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Forum_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Forum", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_forum_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_forumPosts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_forumPosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ForumPosts(rctx, fc.Args["courseId"].(*string), fc.Args["tags"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ForumPost)
	fc.Result = res
	return ec.marshalNForumPost2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumPostᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_forumPosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ForumPost_id(ctx, field)
			case "title":
				return ec.fieldContext_ForumPost_title(ctx, field)
			case "content":
				return ec.fieldContext_ForumPost_content(ctx, field)
			case "courseID":
				return ec.fieldContext_ForumPost_courseID(ctx, field)
			case "author":
				return ec.fieldContext_ForumPost_author(ctx, field)
			case "commentIds":
				return ec.fieldContext_ForumPost_commentIds(ctx, field)
			case "fileIds":
				return ec.fieldContext_ForumPost_fileIds(ctx, field)
			case "forumId":
				return ec.fieldContext_ForumPost_forumId(ctx, field)
			case "userId":
				return ec.fieldContext_ForumPost_userId(ctx, field)
			case "tags":
				return ec.fieldContext_ForumPost_tags(ctx, field)
			case "upvotes":
				return ec.fieldContext_ForumPost_upvotes(ctx, field)
			case "downvotes":
				return ec.fieldContext_ForumPost_downvotes(ctx, field)
			case "createdAt":
				return ec.fieldContext_ForumPost_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ForumPost_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ForumPost_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ForumPost", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_forumPosts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_forumPost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_forumPost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ForumPost(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ForumPost)
	fc.Result = res
	return ec.marshalOForumPost2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_forumPost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ForumPost_id(ctx, field)
			case "title":
				return ec.fieldContext_ForumPost_title(ctx, field)
			case "content":
				return ec.fieldContext_ForumPost_content(ctx, field)
			case "courseID":
				return ec.fieldContext_ForumPost_courseID(ctx, field)
			case "author":
				return ec.fieldContext_ForumPost_author(ctx, field)
			case "commentIds":
				return ec.fieldContext_ForumPost_commentIds(ctx, field)
			case "fileIds":
				return ec.fieldContext_ForumPost_fileIds(ctx, field)
			case "forumId":
				return ec.fieldContext_ForumPost_forumId(ctx, field)
			case "userId":
				return ec.fieldContext_ForumPost_userId(ctx, field)
			case "tags":
				return ec.fieldContext_ForumPost_tags(ctx, field)
			case "upvotes":
				return ec.fieldContext_ForumPost_upvotes(ctx, field)
			case "downvotes":
				return ec.fieldContext_ForumPost_downvotes(ctx, field)
			case "createdAt":
				return ec.fieldContext_ForumPost_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ForumPost_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ForumPost_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ForumPost", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_forumPost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_forumComments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_forumComments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ForumComments(rctx, fc.Args["courseId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ForumComment)
	fc.Result = res
	return ec.marshalNForumComment2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumCommentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_forumComments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ForumComment_id(ctx, field)
			case "content":
				return ec.fieldContext_ForumComment_content(ctx, field)
			case "courseId":
				return ec.fieldContext_ForumComment_courseId(ctx, field)
			case "userId":
				return ec.fieldContext_ForumComment_userId(ctx, field)
			case "postId":
				return ec.fieldContext_ForumComment_postId(ctx, field)
			case "parentId":
				return ec.fieldContext_ForumComment_parentId(ctx, field)
			case "fileIds":
				return ec.fieldContext_ForumComment_fileIds(ctx, field)
			case "upvotes":
				return ec.fieldContext_ForumComment_upvotes(ctx, field)
			case "downvotes":
				return ec.fieldContext_ForumComment_downvotes(ctx, field)
			case "createdAt":
				return ec.fieldContext_ForumComment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ForumComment_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ForumComment_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ForumComment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_forumComments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_forumComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_forumComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ForumComment(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ForumComment)
	fc.Result = res
	return ec.marshalOForumComment2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumComment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_forumComment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ForumComment_id(ctx, field)
			case "content":
				return ec.fieldContext_ForumComment_content(ctx, field)
			case "courseId":
				return ec.fieldContext_ForumComment_courseId(ctx, field)
			case "userId":
				return ec.fieldContext_ForumComment_userId(ctx, field)
			case "postId":
				return ec.fieldContext_ForumComment_postId(ctx, field)
			case "parentId":
				return ec.fieldContext_ForumComment_parentId(ctx, field)
			case "fileIds":
				return ec.fieldContext_ForumComment_fileIds(ctx, field)
			case "upvotes":
				return ec.fieldContext_ForumComment_upvotes(ctx, field)
			case "downvotes":
				return ec.fieldContext_ForumComment_downvotes(ctx, field)
			case "createdAt":
				return ec.fieldContext_ForumComment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ForumComment_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_ForumComment_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ForumComment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_forumComment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_grades(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_grades(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Grades(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Grade)
	fc.Result = res
	return ec.marshalNGrade2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGradeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_grades(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Grade_id(ctx, field)
			case "studentId":
				return ec.fieldContext_Grade_studentId(ctx, field)
			case "courseId":
				return ec.fieldContext_Grade_courseId(ctx, field)
			case "quizId":
				return ec.fieldContext_Grade_quizId(ctx, field)
			case "value":
				return ec.fieldContext_Grade_value(ctx, field)
			case "criteria":
				return ec.fieldContext_Grade_criteria(ctx, field)
			case "comments":
				return ec.fieldContext_Grade_comments(ctx, field)
			case "createdAt":
				return ec.fieldContext_Grade_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Grade_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Grade_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Grade", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_grade(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_grade(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Grade(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Grade)
	fc.Result = res
	return ec.marshalOGrade2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGrade(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_grade(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Grade_id(ctx, field)
			case "studentId":
				return ec.fieldContext_Grade_studentId(ctx, field)
			case "courseId":
				return ec.fieldContext_Grade_courseId(ctx, field)
			case "quizId":
				return ec.fieldContext_Grade_quizId(ctx, field)
			case "value":
				return ec.fieldContext_Grade_value(ctx, field)
			case "criteria":
				return ec.fieldContext_Grade_criteria(ctx, field)
			case "comments":
				return ec.fieldContext_Grade_comments(ctx, field)
			case "createdAt":
				return ec.fieldContext_Grade_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Grade_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Grade_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Grade", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_grade_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_media(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_media(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Media(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Media)
	fc.Result = res
	return ec.marshalOMedia2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_media(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Media_id(ctx, field)
			case "courseId":
				return ec.fieldContext_Media_courseId(ctx, field)
			case "userId":
				return ec.fieldContext_Media_userId(ctx, field)
			case "title":
				return ec.fieldContext_Media_title(ctx, field)
			case "description":
				return ec.fieldContext_Media_description(ctx, field)
			case "category":
				return ec.fieldContext_Media_category(ctx, field)
			case "mediaType":
				return ec.fieldContext_Media_mediaType(ctx, field)
			case "tags":
				return ec.fieldContext_Media_tags(ctx, field)
			case "videoPlayerInfo":
				return ec.fieldContext_Media_videoPlayerInfo(ctx, field)
			case "file":
				return ec.fieldContext_Media_file(ctx, field)
			case "createdAt":
				return ec.fieldContext_Media_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Media_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Media_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Media", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_media_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_mediaByType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mediaByType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MediaByType(rctx, fc.Args["type"].(model.MediaType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Media)
	fc.Result = res
	return ec.marshalNMedia2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMediaᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mediaByType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Media_id(ctx, field)
			case "courseId":
				return ec.fieldContext_Media_courseId(ctx, field)
			case "userId":
				return ec.fieldContext_Media_userId(ctx, field)
			case "title":
				return ec.fieldContext_Media_title(ctx, field)
			case "description":
				return ec.fieldContext_Media_description(ctx, field)
			case "category":
				return ec.fieldContext_Media_category(ctx, field)
			case "mediaType":
				return ec.fieldContext_Media_mediaType(ctx, field)
			case "tags":
				return ec.fieldContext_Media_tags(ctx, field)
			case "videoPlayerInfo":
				return ec.fieldContext_Media_videoPlayerInfo(ctx, field)
			case "file":
				return ec.fieldContext_Media_file(ctx, field)
			case "createdAt":
				return ec.fieldContext_Media_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Media_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Media_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Media", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_mediaByType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_allMedia(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_allMedia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllMedia(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Media)
	fc.Result = res
	return ec.marshalNMedia2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMediaᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_allMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Media_id(ctx, field)
			case "courseId":
				return ec.fieldContext_Media_courseId(ctx, field)
			case "userId":
				return ec.fieldContext_Media_userId(ctx, field)
			case "title":
				return ec.fieldContext_Media_title(ctx, field)
			case "description":
				return ec.fieldContext_Media_description(ctx, field)
			case "category":
				return ec.fieldContext_Media_category(ctx, field)
			case "mediaType":
				return ec.fieldContext_Media_mediaType(ctx, field)
			case "tags":
				return ec.fieldContext_Media_tags(ctx, field)
			case "videoPlayerInfo":
				return ec.fieldContext_Media_videoPlayerInfo(ctx, field)
			case "file":
				return ec.fieldContext_Media_file(ctx, field)
			case "createdAt":
				return ec.fieldContext_Media_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Media_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Media_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Media", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_notifications(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_notifications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Notifications(rctx, fc.Args["courseId"].(*string), fc.Args["recipientId"].(*string), fc.Args["read"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Notification)
	fc.Result = res
	return ec.marshalNNotification2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNotificationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_notifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Notification_id(ctx, field)
			case "senderId":
				return ec.fieldContext_Notification_senderId(ctx, field)
			case "recipientId":
				return ec.fieldContext_Notification_recipientId(ctx, field)
			case "courseId":
				return ec.fieldContext_Notification_courseId(ctx, field)
			case "seen":
				return ec.fieldContext_Notification_seen(ctx, field)
			case "text":
				return ec.fieldContext_Notification_text(ctx, field)
			case "title":
				return ec.fieldContext_Notification_title(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "link":
				return ec.fieldContext_Notification_link(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notification_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Notification_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Notification_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_notifications_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPermissionsForUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPermissionsForUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPermissionsForUser(rctx, fc.Args["userID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Permission)
	fc.Result = res
	return ec.marshalNPermission2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPermissionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPermissionsForUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Permission_id(ctx, field)
			case "role":
				return ec.fieldContext_Permission_role(ctx, field)
			case "model":
				return ec.fieldContext_Permission_model(ctx, field)
			case "permissions":
				return ec.fieldContext_Permission_permissions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Permission", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPermissionsForUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPermissionsForModel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPermissionsForModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPermissionsForModel(rctx, fc.Args["model"].(model.AllowedModel))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Permission)
	fc.Result = res
	return ec.marshalNPermission2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPermissionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPermissionsForModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Permission_id(ctx, field)
			case "role":
				return ec.fieldContext_Permission_role(ctx, field)
			case "model":
				return ec.fieldContext_Permission_model(ctx, field)
			case "permissions":
				return ec.fieldContext_Permission_permissions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Permission", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPermissionsForModel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_quiz(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_quiz(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Quiz(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Quiz)
	fc.Result = res
	return ec.marshalNQuiz2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuiz(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_quiz(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Quiz_id(ctx, field)
			case "name":
				return ec.fieldContext_Quiz_name(ctx, field)
			case "description":
				return ec.fieldContext_Quiz_description(ctx, field)
			case "quizType":
				return ec.fieldContext_Quiz_quizType(ctx, field)
			case "duration":
				return ec.fieldContext_Quiz_duration(ctx, field)
			case "passingScore":
				return ec.fieldContext_Quiz_passingScore(ctx, field)
			case "proctoringMethod":
				return ec.fieldContext_Quiz_proctoringMethod(ctx, field)
			case "questions":
				return ec.fieldContext_Quiz_questions(ctx, field)
			case "resultsReleaseDate":
				return ec.fieldContext_Quiz_resultsReleaseDate(ctx, field)
			case "certificate":
				return ec.fieldContext_Quiz_certificate(ctx, field)
			case "startTime":
				return ec.fieldContext_Quiz_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_Quiz_endTime(ctx, field)
			case "startDate":
				return ec.fieldContext_Quiz_startDate(ctx, field)
			case "dueDate":
				return ec.fieldContext_Quiz_dueDate(ctx, field)
			case "timeLimit":
				return ec.fieldContext_Quiz_timeLimit(ctx, field)
			case "shuffleQuestions":
				return ec.fieldContext_Quiz_shuffleQuestions(ctx, field)
			case "randomizeQuestions":
				return ec.fieldContext_Quiz_randomizeQuestions(ctx, field)
			case "randomizeAnswers":
				return ec.fieldContext_Quiz_randomizeAnswers(ctx, field)
			case "categories":
				return ec.fieldContext_Quiz_categories(ctx, field)
			case "courseId":
				return ec.fieldContext_Quiz_courseId(ctx, field)
			case "questionIds":
				return ec.fieldContext_Quiz_questionIds(ctx, field)
			case "gradeIds":
				return ec.fieldContext_Quiz_gradeIds(ctx, field)
			case "submissionIds":
				return ec.fieldContext_Quiz_submissionIds(ctx, field)
			case "isLocked":
				return ec.fieldContext_Quiz_isLocked(ctx, field)
			case "waitTime":
				return ec.fieldContext_Quiz_waitTime(ctx, field)
			case "weight":
				return ec.fieldContext_Quiz_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_Quiz_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Quiz_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Quiz_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quiz", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_quiz_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_quizzes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_quizzes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Quizzes(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Quiz)
	fc.Result = res
	return ec.marshalNQuiz2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuizᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_quizzes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Quiz_id(ctx, field)
			case "name":
				return ec.fieldContext_Quiz_name(ctx, field)
			case "description":
				return ec.fieldContext_Quiz_description(ctx, field)
			case "quizType":
				return ec.fieldContext_Quiz_quizType(ctx, field)
			case "duration":
				return ec.fieldContext_Quiz_duration(ctx, field)
			case "passingScore":
				return ec.fieldContext_Quiz_passingScore(ctx, field)
			case "proctoringMethod":
				return ec.fieldContext_Quiz_proctoringMethod(ctx, field)
			case "questions":
				return ec.fieldContext_Quiz_questions(ctx, field)
			case "resultsReleaseDate":
				return ec.fieldContext_Quiz_resultsReleaseDate(ctx, field)
			case "certificate":
				return ec.fieldContext_Quiz_certificate(ctx, field)
			case "startTime":
				return ec.fieldContext_Quiz_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_Quiz_endTime(ctx, field)
			case "startDate":
				return ec.fieldContext_Quiz_startDate(ctx, field)
			case "dueDate":
				return ec.fieldContext_Quiz_dueDate(ctx, field)
			case "timeLimit":
				return ec.fieldContext_Quiz_timeLimit(ctx, field)
			case "shuffleQuestions":
				return ec.fieldContext_Quiz_shuffleQuestions(ctx, field)
			case "randomizeQuestions":
				return ec.fieldContext_Quiz_randomizeQuestions(ctx, field)
			case "randomizeAnswers":
				return ec.fieldContext_Quiz_randomizeAnswers(ctx, field)
			case "categories":
				return ec.fieldContext_Quiz_categories(ctx, field)
			case "courseId":
				return ec.fieldContext_Quiz_courseId(ctx, field)
			case "questionIds":
				return ec.fieldContext_Quiz_questionIds(ctx, field)
			case "gradeIds":
				return ec.fieldContext_Quiz_gradeIds(ctx, field)
			case "submissionIds":
				return ec.fieldContext_Quiz_submissionIds(ctx, field)
			case "isLocked":
				return ec.fieldContext_Quiz_isLocked(ctx, field)
			case "waitTime":
				return ec.fieldContext_Quiz_waitTime(ctx, field)
			case "weight":
				return ec.fieldContext_Quiz_weight(ctx, field)
			case "createdAt":
				return ec.fieldContext_Quiz_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Quiz_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Quiz_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quiz", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_submission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_submission(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Submission(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Submission)
	fc.Result = res
	return ec.marshalNSubmission2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSubmission(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_submission(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Submission_id(ctx, field)
			case "quizID":
				return ec.fieldContext_Submission_quizID(ctx, field)
			case "userID":
				return ec.fieldContext_Submission_userID(ctx, field)
			case "startTime":
				return ec.fieldContext_Submission_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_Submission_endTime(ctx, field)
			case "answers":
				return ec.fieldContext_Submission_answers(ctx, field)
			case "points":
				return ec.fieldContext_Submission_points(ctx, field)
			case "grade":
				return ec.fieldContext_Submission_grade(ctx, field)
			case "weight":
				return ec.fieldContext_Submission_weight(ctx, field)
			case "feedback":
				return ec.fieldContext_Submission_feedback(ctx, field)
			case "startedAt":
				return ec.fieldContext_Submission_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_Submission_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Submission_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Submission_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Submission", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_submission_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_submissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_submissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Submissions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Submission)
	fc.Result = res
	return ec.marshalNSubmission2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSubmissionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_submissions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Submission_id(ctx, field)
			case "quizID":
				return ec.fieldContext_Submission_quizID(ctx, field)
			case "userID":
				return ec.fieldContext_Submission_userID(ctx, field)
			case "startTime":
				return ec.fieldContext_Submission_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_Submission_endTime(ctx, field)
			case "answers":
				return ec.fieldContext_Submission_answers(ctx, field)
			case "points":
				return ec.fieldContext_Submission_points(ctx, field)
			case "grade":
				return ec.fieldContext_Submission_grade(ctx, field)
			case "weight":
				return ec.fieldContext_Submission_weight(ctx, field)
			case "feedback":
				return ec.fieldContext_Submission_feedback(ctx, field)
			case "startedAt":
				return ec.fieldContext_Submission_startedAt(ctx, field)
			case "completedAt":
				return ec.fieldContext_Submission_completedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Submission_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Submission_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Submission", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_userSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_userSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserSetting(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserSetting)
	fc.Result = res
	return ec.marshalNUserSetting2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUserSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_userSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserSetting_id(ctx, field)
			case "userId":
				return ec.fieldContext_UserSetting_userId(ctx, field)
			case "type":
				return ec.fieldContext_UserSetting_type(ctx, field)
			case "key":
				return ec.fieldContext_UserSetting_key(ctx, field)
			case "value":
				return ec.fieldContext_UserSetting_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSetting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_userSetting_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_userSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_userSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserSettings(rctx, fc.Args["userId"].(string), fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.UserSetting)
	fc.Result = res
	return ec.marshalNUserSetting2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUserSettingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_userSettings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserSetting_id(ctx, field)
			case "userId":
				return ec.fieldContext_UserSetting_userId(ctx, field)
			case "type":
				return ec.fieldContext_UserSetting_type(ctx, field)
			case "key":
				return ec.fieldContext_UserSetting_key(ctx, field)
			case "value":
				return ec.fieldContext_UserSetting_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserSetting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_userSettings_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_globalSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_globalSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GlobalSetting(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GlobalSetting)
	fc.Result = res
	return ec.marshalNGlobalSetting2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGlobalSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_globalSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GlobalSetting_id(ctx, field)
			case "type":
				return ec.fieldContext_GlobalSetting_type(ctx, field)
			case "key":
				return ec.fieldContext_GlobalSetting_key(ctx, field)
			case "value":
				return ec.fieldContext_GlobalSetting_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalSetting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_globalSetting_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_globalSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_globalSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GlobalSettings(rctx, fc.Args["limit"].(*int), fc.Args["offset"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.GlobalSetting)
	fc.Result = res
	return ec.marshalNGlobalSetting2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGlobalSettingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_globalSettings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GlobalSetting_id(ctx, field)
			case "type":
				return ec.fieldContext_GlobalSetting_type(ctx, field)
			case "key":
				return ec.fieldContext_GlobalSetting_key(ctx, field)
			case "value":
				return ec.fieldContext_GlobalSetting_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalSetting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_globalSettings_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_targets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_targets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Targets(rctx, fc.Args["courseId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Target)
	fc.Result = res
	return ec.marshalNTarget2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTargetᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_targets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Target_id(ctx, field)
			case "name":
				return ec.fieldContext_Target_name(ctx, field)
			case "description":
				return ec.fieldContext_Target_description(ctx, field)
			case "dueDate":
				return ec.fieldContext_Target_dueDate(ctx, field)
			case "startDate":
				return ec.fieldContext_Target_startDate(ctx, field)
			case "courseId":
				return ec.fieldContext_Target_courseId(ctx, field)
			case "completionDate":
				return ec.fieldContext_Target_completionDate(ctx, field)
			case "isCompleted":
				return ec.fieldContext_Target_isCompleted(ctx, field)
			case "targetType":
				return ec.fieldContext_Target_targetType(ctx, field)
			case "targetValue":
				return ec.fieldContext_Target_targetValue(ctx, field)
			case "currentValue":
				return ec.fieldContext_Target_currentValue(ctx, field)
			case "targetMetric":
				return ec.fieldContext_Target_targetMetric(ctx, field)
			case "reminders":
				return ec.fieldContext_Target_reminders(ctx, field)
			case "units":
				return ec.fieldContext_Target_units(ctx, field)
			case "repeatInterval":
				return ec.fieldContext_Target_repeatInterval(ctx, field)
			case "repeatEndDate":
				return ec.fieldContext_Target_repeatEndDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_Target_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Target_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Target", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_targets_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_target(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_target(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Target(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Target)
	fc.Result = res
	return ec.marshalOTarget2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTarget(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_target(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Target_id(ctx, field)
			case "name":
				return ec.fieldContext_Target_name(ctx, field)
			case "description":
				return ec.fieldContext_Target_description(ctx, field)
			case "dueDate":
				return ec.fieldContext_Target_dueDate(ctx, field)
			case "startDate":
				return ec.fieldContext_Target_startDate(ctx, field)
			case "courseId":
				return ec.fieldContext_Target_courseId(ctx, field)
			case "completionDate":
				return ec.fieldContext_Target_completionDate(ctx, field)
			case "isCompleted":
				return ec.fieldContext_Target_isCompleted(ctx, field)
			case "targetType":
				return ec.fieldContext_Target_targetType(ctx, field)
			case "targetValue":
				return ec.fieldContext_Target_targetValue(ctx, field)
			case "currentValue":
				return ec.fieldContext_Target_currentValue(ctx, field)
			case "targetMetric":
				return ec.fieldContext_Target_targetMetric(ctx, field)
			case "reminders":
				return ec.fieldContext_Target_reminders(ctx, field)
			case "units":
				return ec.fieldContext_Target_units(ctx, field)
			case "repeatInterval":
				return ec.fieldContext_Target_repeatInterval(ctx, field)
			case "repeatEndDate":
				return ec.fieldContext_Target_repeatEndDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_Target_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Target_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Target", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_target_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().User(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_user_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_id(ctx context.Context, field graphql.CollectedField, obj *model.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_type(ctx context.Context, field graphql.CollectedField, obj *model.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.QuestionType)
	fc.Result = res
	return ec.marshalNQuestionType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuestionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuestionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_text(ctx context.Context, field graphql.CollectedField, obj *model.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_choices(ctx context.Context, field graphql.CollectedField, obj *model.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_choices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Choices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.AnswerChoice)
	fc.Result = res
	return ec.marshalNAnswerChoice2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerChoiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_choices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AnswerChoice_id(ctx, field)
			case "text":
				return ec.fieldContext_AnswerChoice_text(ctx, field)
			case "isCorrect":
				return ec.fieldContext_AnswerChoice_isCorrect(ctx, field)
			case "feedback":
				return ec.fieldContext_AnswerChoice_feedback(ctx, field)
			case "weight":
				return ec.fieldContext_AnswerChoice_weight(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AnswerChoice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_correctAnswer(ctx context.Context, field graphql.CollectedField, obj *model.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_correctAnswer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrectAnswer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_correctAnswer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_feedback(ctx context.Context, field graphql.CollectedField, obj *model.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_feedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Feedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_feedback(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_hints(ctx context.Context, field graphql.CollectedField, obj *model.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_hints(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_hints(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_randomize(ctx context.Context, field graphql.CollectedField, obj *model.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_randomize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Randomize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_randomize(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_pointValue(ctx context.Context, field graphql.CollectedField, obj *model.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_pointValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PointValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_pointValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_categories(ctx context.Context, field graphql.CollectedField, obj *model.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_categories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_categories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Question_matchingPairs(ctx context.Context, field graphql.CollectedField, obj *model.Question) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Question_matchingPairs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatchingPairs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.MatchingPair)
	fc.Result = res
	return ec.marshalNMatchingPair2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMatchingPairᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Question_matchingPairs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Question",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MatchingPair_id(ctx, field)
			case "question":
				return ec.fieldContext_MatchingPair_question(ctx, field)
			case "left":
				return ec.fieldContext_MatchingPair_left(ctx, field)
			case "right":
				return ec.fieldContext_MatchingPair_right(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MatchingPair", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_id(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_name(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_description(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_quizType(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_quizType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.QuizType)
	fc.Result = res
	return ec.marshalNQuizType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuizType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_quizType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuizType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_duration(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_duration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_duration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_passingScore(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_passingScore(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassingScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_passingScore(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_proctoringMethod(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_proctoringMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProctoringMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ProctoringMethod)
	fc.Result = res
	return ec.marshalNProctoringMethod2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐProctoringMethod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_proctoringMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ProctoringMethod does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_questions(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_questions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Questions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Question)
	fc.Result = res
	return ec.marshalNQuestion2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuestionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_questions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Question_id(ctx, field)
			case "type":
				return ec.fieldContext_Question_type(ctx, field)
			case "text":
				return ec.fieldContext_Question_text(ctx, field)
			case "choices":
				return ec.fieldContext_Question_choices(ctx, field)
			case "correctAnswer":
				return ec.fieldContext_Question_correctAnswer(ctx, field)
			case "feedback":
				return ec.fieldContext_Question_feedback(ctx, field)
			case "hints":
				return ec.fieldContext_Question_hints(ctx, field)
			case "randomize":
				return ec.fieldContext_Question_randomize(ctx, field)
			case "pointValue":
				return ec.fieldContext_Question_pointValue(ctx, field)
			case "categories":
				return ec.fieldContext_Question_categories(ctx, field)
			case "matchingPairs":
				return ec.fieldContext_Question_matchingPairs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Question", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_resultsReleaseDate(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_resultsReleaseDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResultsReleaseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_resultsReleaseDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_certificate(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_certificate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Certificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_certificate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_startTime(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_startTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_startTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_endTime(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_endTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_endTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_startDate(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_startDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_startDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_dueDate(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_dueDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_dueDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_timeLimit(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_timeLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_timeLimit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_shuffleQuestions(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_shuffleQuestions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShuffleQuestions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_shuffleQuestions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_randomizeQuestions(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_randomizeQuestions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RandomizeQuestions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_randomizeQuestions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_randomizeAnswers(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_randomizeAnswers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RandomizeAnswers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_randomizeAnswers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_categories(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_categories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_categories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_courseId(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_courseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_courseId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_questionIds(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_questionIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuestionIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_questionIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_gradeIds(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_gradeIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GradeIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_gradeIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_submissionIds(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_submissionIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmissionIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOID2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_submissionIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_isLocked(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_isLocked(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLocked, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_isLocked(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_waitTime(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_waitTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WaitTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_waitTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_weight(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_weight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_weight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quiz_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Quiz) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quiz_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quiz_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quiz",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Referee_id(ctx context.Context, field graphql.CollectedField, obj *model.Referee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Referee_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Referee_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Referee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Referee_fullName(ctx context.Context, field graphql.CollectedField, obj *model.Referee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Referee_fullName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Referee_fullName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Referee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Referee_email(ctx context.Context, field graphql.CollectedField, obj *model.Referee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Referee_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Referee_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Referee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Referee_phone(ctx context.Context, field graphql.CollectedField, obj *model.Referee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Referee_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Referee_phone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Referee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Referee_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Referee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Referee_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Referee_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Referee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Referee_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Referee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Referee_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Referee_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Referee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Referee_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.Referee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Referee_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Referee_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Referee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reminder_id(ctx context.Context, field graphql.CollectedField, obj *model.Reminder) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reminder_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reminder_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reminder_target(ctx context.Context, field graphql.CollectedField, obj *model.Reminder) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reminder_target(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Target, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Target)
	fc.Result = res
	return ec.marshalNTarget2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTarget(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reminder_target(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Target_id(ctx, field)
			case "name":
				return ec.fieldContext_Target_name(ctx, field)
			case "description":
				return ec.fieldContext_Target_description(ctx, field)
			case "dueDate":
				return ec.fieldContext_Target_dueDate(ctx, field)
			case "startDate":
				return ec.fieldContext_Target_startDate(ctx, field)
			case "courseId":
				return ec.fieldContext_Target_courseId(ctx, field)
			case "completionDate":
				return ec.fieldContext_Target_completionDate(ctx, field)
			case "isCompleted":
				return ec.fieldContext_Target_isCompleted(ctx, field)
			case "targetType":
				return ec.fieldContext_Target_targetType(ctx, field)
			case "targetValue":
				return ec.fieldContext_Target_targetValue(ctx, field)
			case "currentValue":
				return ec.fieldContext_Target_currentValue(ctx, field)
			case "targetMetric":
				return ec.fieldContext_Target_targetMetric(ctx, field)
			case "reminders":
				return ec.fieldContext_Target_reminders(ctx, field)
			case "units":
				return ec.fieldContext_Target_units(ctx, field)
			case "repeatInterval":
				return ec.fieldContext_Target_repeatInterval(ctx, field)
			case "repeatEndDate":
				return ec.fieldContext_Target_repeatEndDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_Target_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Target_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Target", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reminder_user(ctx context.Context, field graphql.CollectedField, obj *model.Reminder) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reminder_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reminder_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_User_middleName(ctx, field)
			case "fullName":
				return ec.fieldContext_User_fullName(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			case "permissionIds":
				return ec.fieldContext_User_permissionIds(ctx, field)
			case "phone":
				return ec.fieldContext_User_phone(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "dob":
				return ec.fieldContext_User_dob(ctx, field)
			case "gender":
				return ec.fieldContext_User_gender(ctx, field)
			case "address":
				return ec.fieldContext_User_address(ctx, field)
			case "city":
				return ec.fieldContext_User_city(ctx, field)
			case "state":
				return ec.fieldContext_User_state(ctx, field)
			case "country":
				return ec.fieldContext_User_country(ctx, field)
			case "zip":
				return ec.fieldContext_User_zip(ctx, field)
			case "nationality":
				return ec.fieldContext_User_nationality(ctx, field)
			case "profession":
				return ec.fieldContext_User_profession(ctx, field)
			case "passwordSalt":
				return ec.fieldContext_User_passwordSalt(ctx, field)
			case "passwordHash":
				return ec.fieldContext_User_passwordHash(ctx, field)
			case "permissions":
				return ec.fieldContext_User_permissions(ctx, field)
			case "username":
				return ec.fieldContext_User_username(ctx, field)
			case "isVerified":
				return ec.fieldContext_User_isVerified(ctx, field)
			case "about":
				return ec.fieldContext_User_about(ctx, field)
			case "wallet":
				return ec.fieldContext_User_wallet(ctx, field)
			case "timeZone":
				return ec.fieldContext_User_timeZone(ctx, field)
			case "progress":
				return ec.fieldContext_User_progress(ctx, field)
			case "accessToken":
				return ec.fieldContext_User_accessToken(ctx, field)
			case "refreshToken":
				return ec.fieldContext_User_refreshToken(ctx, field)
			case "verifycationToken":
				return ec.fieldContext_User_verifycationToken(ctx, field)
			case "isAuthenticated":
				return ec.fieldContext_User_isAuthenticated(ctx, field)
			case "status":
				return ec.fieldContext_User_status(ctx, field)
			case "matricNumber":
				return ec.fieldContext_User_matricNumber(ctx, field)
			case "platform":
				return ec.fieldContext_User_platform(ctx, field)
			case "program":
				return ec.fieldContext_User_program(ctx, field)
			case "regNumber":
				return ec.fieldContext_User_regNumber(ctx, field)
			case "files":
				return ec.fieldContext_User_files(ctx, field)
			case "courses":
				return ec.fieldContext_User_courses(ctx, field)
			case "salvationBrief":
				return ec.fieldContext_User_salvationBrief(ctx, field)
			case "godsWorkings":
				return ec.fieldContext_User_godsWorkings(ctx, field)
			case "reason":
				return ec.fieldContext_User_reason(ctx, field)
			case "churchName":
				return ec.fieldContext_User_churchName(ctx, field)
			case "churchAddress":
				return ec.fieldContext_User_churchAddress(ctx, field)
			case "pastorName":
				return ec.fieldContext_User_pastorName(ctx, field)
			case "pastorEmail":
				return ec.fieldContext_User_pastorEmail(ctx, field)
			case "pastorPhone":
				return ec.fieldContext_User_pastorPhone(ctx, field)
			case "churchInvolved":
				return ec.fieldContext_User_churchInvolved(ctx, field)
			case "healthConditions":
				return ec.fieldContext_User_healthConditions(ctx, field)
			case "healthIssueDescription":
				return ec.fieldContext_User_healthIssueDescription(ctx, field)
			case "scholarship":
				return ec.fieldContext_User_scholarship(ctx, field)
			case "scholarshipReason":
				return ec.fieldContext_User_scholarshipReason(ctx, field)
			case "qualifications":
				return ec.fieldContext_User_qualifications(ctx, field)
			case "referees":
				return ec.fieldContext_User_referees(ctx, field)
			case "notifications":
				return ec.fieldContext_User_notifications(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_User_deletedAt(ctx, field)
			case "confirmedAt":
				return ec.fieldContext_User_confirmedAt(ctx, field)
			case "confirmationMailSentAt":
				return ec.fieldContext_User_confirmationMailSentAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reminder_message(ctx context.Context, field graphql.CollectedField, obj *model.Reminder) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reminder_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reminder_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reminder_sendTime(ctx context.Context, field graphql.CollectedField, obj *model.Reminder) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reminder_sendTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reminder_sendTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reminder_sent(ctx context.Context, field graphql.CollectedField, obj *model.Reminder) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reminder_sent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reminder_sent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reminder_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Reminder) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reminder_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reminder_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reminder_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Reminder) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reminder_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reminder_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScoreDistribution_id(ctx context.Context, field graphql.CollectedField, obj *model.ScoreDistribution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScoreDistribution_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScoreDistribution_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScoreDistribution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScoreDistribution_minScore(ctx context.Context, field graphql.CollectedField, obj *model.ScoreDistribution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScoreDistribution_minScore(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScoreDistribution_minScore(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScoreDistribution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScoreDistribution_maxScore(ctx context.Context, field graphql.CollectedField, obj *model.ScoreDistribution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScoreDistribution_maxScore(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScoreDistribution_maxScore(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScoreDistribution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScoreDistribution_grade(ctx context.Context, field graphql.CollectedField, obj *model.ScoreDistribution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScoreDistribution_grade(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScoreDistribution_grade(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScoreDistribution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ScoreDistribution_percentage(ctx context.Context, field graphql.CollectedField, obj *model.ScoreDistribution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ScoreDistribution_percentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Percentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ScoreDistribution_percentage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ScoreDistribution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Submission_id(ctx context.Context, field graphql.CollectedField, obj *model.Submission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Submission_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Submission_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Submission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Submission_quizID(ctx context.Context, field graphql.CollectedField, obj *model.Submission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Submission_quizID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuizID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Submission_quizID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Submission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Submission_userID(ctx context.Context, field graphql.CollectedField, obj *model.Submission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Submission_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Submission_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Submission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Submission_startTime(ctx context.Context, field graphql.CollectedField, obj *model.Submission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Submission_startTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Submission_startTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Submission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Submission_endTime(ctx context.Context, field graphql.CollectedField, obj *model.Submission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Submission_endTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Submission_endTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Submission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Submission_answers(ctx context.Context, field graphql.CollectedField, obj *model.Submission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Submission_answers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Answer)
	fc.Result = res
	return ec.marshalNAnswer2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Submission_answers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Submission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Answer_id(ctx, field)
			case "questionId":
				return ec.fieldContext_Answer_questionId(ctx, field)
			case "choices":
				return ec.fieldContext_Answer_choices(ctx, field)
			case "value":
				return ec.fieldContext_Answer_value(ctx, field)
			case "isCorrect":
				return ec.fieldContext_Answer_isCorrect(ctx, field)
			case "weight":
				return ec.fieldContext_Answer_weight(ctx, field)
			case "pointsAwarded":
				return ec.fieldContext_Answer_pointsAwarded(ctx, field)
			case "feedback":
				return ec.fieldContext_Answer_feedback(ctx, field)
			case "createdAt":
				return ec.fieldContext_Answer_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Answer_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Answer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Submission_points(ctx context.Context, field graphql.CollectedField, obj *model.Submission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Submission_points(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Points, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Submission_points(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Submission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Submission_grade(ctx context.Context, field graphql.CollectedField, obj *model.Submission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Submission_grade(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Grade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Submission_grade(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Submission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Submission_weight(ctx context.Context, field graphql.CollectedField, obj *model.Submission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Submission_weight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Submission_weight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Submission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Submission_feedback(ctx context.Context, field graphql.CollectedField, obj *model.Submission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Submission_feedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Feedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Submission_feedback(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Submission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Submission_startedAt(ctx context.Context, field graphql.CollectedField, obj *model.Submission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Submission_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Submission_startedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Submission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Submission_completedAt(ctx context.Context, field graphql.CollectedField, obj *model.Submission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Submission_completedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Submission_completedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Submission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Submission_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Submission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Submission_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Submission_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Submission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Submission_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Submission) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Submission_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Submission_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Submission",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_notificationAdded(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_notificationAdded(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().NotificationAdded(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.Notification):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalNNotification2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNotification(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_notificationAdded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Notification_id(ctx, field)
			case "senderId":
				return ec.fieldContext_Notification_senderId(ctx, field)
			case "recipientId":
				return ec.fieldContext_Notification_recipientId(ctx, field)
			case "courseId":
				return ec.fieldContext_Notification_courseId(ctx, field)
			case "seen":
				return ec.fieldContext_Notification_seen(ctx, field)
			case "text":
				return ec.fieldContext_Notification_text(ctx, field)
			case "title":
				return ec.fieldContext_Notification_title(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "link":
				return ec.fieldContext_Notification_link(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notification_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Notification_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Notification_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_activityAdded(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_activityAdded(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ActivityAdded(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.Activity):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOActivity2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐActivity(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_activityAdded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "userID":
				return ec.fieldContext_Activity_userID(ctx, field)
			case "courseID":
				return ec.fieldContext_Activity_courseID(ctx, field)
			case "courseContentID":
				return ec.fieldContext_Activity_courseContentID(ctx, field)
			case "activityType":
				return ec.fieldContext_Activity_activityType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Activity_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_activityUpdated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_activityUpdated(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ActivityUpdated(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *model.Activity):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOActivity2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐActivity(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_activityUpdated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Activity_id(ctx, field)
			case "userID":
				return ec.fieldContext_Activity_userID(ctx, field)
			case "courseID":
				return ec.fieldContext_Activity_courseID(ctx, field)
			case "courseContentID":
				return ec.fieldContext_Activity_courseContentID(ctx, field)
			case "activityType":
				return ec.fieldContext_Activity_activityType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Activity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Activity_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Activity_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Activity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_activityDeleted(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	fc, err := ec.fieldContext_Subscription_activityDeleted(ctx, field)
	if err != nil {
		return nil
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().ActivityDeleted(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		return nil
	}
	return func(ctx context.Context) graphql.Marshaler {
		select {
		case res, ok := <-resTmp.(<-chan *string):
			if !ok {
				return nil
			}
			return graphql.WriterFunc(func(w io.Writer) {
				w.Write([]byte{'{'})
				graphql.MarshalString(field.Alias).MarshalGQL(w)
				w.Write([]byte{':'})
				ec.marshalOID2ᚖstring(ctx, field.Selections, res).MarshalGQL(w)
				w.Write([]byte{'}'})
			})
		case <-ctx.Done():
			return nil
		}
	}
}

func (ec *executionContext) fieldContext_Subscription_activityDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_id(ctx context.Context, field graphql.CollectedField, obj *model.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_name(ctx context.Context, field graphql.CollectedField, obj *model.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_postIds(ctx context.Context, field graphql.CollectedField, obj *model.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_postIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_postIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_courseIds(ctx context.Context, field graphql.CollectedField, obj *model.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_courseIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_courseIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_id(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_name(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_description(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_dueDate(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_dueDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_dueDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_startDate(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_startDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_startDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_courseId(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_courseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_courseId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_completionDate(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_completionDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_completionDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_isCompleted(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_isCompleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCompleted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_isCompleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_targetType(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_targetType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.TargetType)
	fc.Result = res
	return ec.marshalNTargetType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTargetType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_targetType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TargetType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_targetValue(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_targetValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_targetValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_currentValue(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_currentValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_currentValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_targetMetric(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_targetMetric(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetMetric, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_targetMetric(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_reminders(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_reminders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reminders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Reminder)
	fc.Result = res
	return ec.marshalOReminder2ᚕᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐReminder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_reminders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reminder_id(ctx, field)
			case "target":
				return ec.fieldContext_Reminder_target(ctx, field)
			case "user":
				return ec.fieldContext_Reminder_user(ctx, field)
			case "message":
				return ec.fieldContext_Reminder_message(ctx, field)
			case "sendTime":
				return ec.fieldContext_Reminder_sendTime(ctx, field)
			case "sent":
				return ec.fieldContext_Reminder_sent(ctx, field)
			case "createdAt":
				return ec.fieldContext_Reminder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Reminder_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reminder", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_units(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_units(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Units, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_units(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_repeatInterval(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_repeatInterval(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepeatInterval, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.RepeatInterval)
	fc.Result = res
	return ec.marshalNRepeatInterval2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐRepeatInterval(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_repeatInterval(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RepeatInterval does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_repeatEndDate(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_repeatEndDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepeatEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_repeatEndDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Target_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Target) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Target_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Target_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Target",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_token(ctx context.Context, field graphql.CollectedField, obj *model.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Token_expiresAt(ctx context.Context, field graphql.CollectedField, obj *model.Token) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Token_expiresAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Token_expiresAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Token",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_firstName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_firstName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_lastName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_lastName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_middleName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_middleName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MiddleName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_middleName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_fullName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_fullName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_fullName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_role(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Role)
	fc.Result = res
	return ec.marshalNRole2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_role(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Role does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_permissionIds(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_permissionIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PermissionIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_permissionIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_phone(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_phone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_avatarUrl(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_avatarUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvatarURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_avatarUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_dob(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_dob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dob, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_dob(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_gender(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_gender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_gender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_address(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_city(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_city(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_state(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_country(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_zip(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_zip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_zip(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_nationality(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_nationality(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nationality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_nationality(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_profession(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_profession(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Profession, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_profession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_passwordSalt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_passwordSalt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PasswordSalt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_passwordSalt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_passwordHash(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_passwordHash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PasswordHash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_passwordHash(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_permissions(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_permissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_permissions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_username(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_username(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_isVerified(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_isVerified(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVerified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_isVerified(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_about(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_about(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.About, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_about(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_wallet(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_wallet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wallet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_wallet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_timeZone(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_timeZone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeZone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_timeZone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_progress(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_progress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_progress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_accessToken(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_accessToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Token)
	fc.Result = res
	return ec.marshalNToken2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_accessToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_Token_token(ctx, field)
			case "expiresAt":
				return ec.fieldContext_Token_expiresAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Token", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_refreshToken(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_refreshToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Token)
	fc.Result = res
	return ec.marshalNToken2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_refreshToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_Token_token(ctx, field)
			case "expiresAt":
				return ec.fieldContext_Token_expiresAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Token", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_verifycationToken(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_verifycationToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VerifycationToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Token)
	fc.Result = res
	return ec.marshalNToken2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐToken(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_verifycationToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "token":
				return ec.fieldContext_Token_token(ctx, field)
			case "expiresAt":
				return ec.fieldContext_Token_expiresAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Token", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_isAuthenticated(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_isAuthenticated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAuthenticated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_isAuthenticated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_status(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegistrationStatus)
	fc.Result = res
	return ec.marshalORegistrationStatus2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐRegistrationStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RegistrationStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_matricNumber(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_matricNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatricNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_matricNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_platform(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_platform(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Platform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_platform(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_program(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_program(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Program, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_program(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_regNumber(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_regNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_regNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_files(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_files(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Files, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_files(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_courses(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_courses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Courses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_courses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_salvationBrief(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_salvationBrief(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalvationBrief, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_salvationBrief(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_godsWorkings(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_godsWorkings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GodsWorkings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_godsWorkings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_reason(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_reason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_reason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_churchName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_churchName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChurchName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_churchName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_churchAddress(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_churchAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChurchAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_churchAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_pastorName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_pastorName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PastorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_pastorName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_pastorEmail(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_pastorEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PastorEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_pastorEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_pastorPhone(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_pastorPhone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PastorPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_pastorPhone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_churchInvolved(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_churchInvolved(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChurchInvolved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_churchInvolved(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_healthConditions(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_healthConditions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HealthConditions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_healthConditions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_healthIssueDescription(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_healthIssueDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HealthIssueDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_healthIssueDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_scholarship(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_scholarship(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scholarship, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_scholarship(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_scholarshipReason(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_scholarshipReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScholarshipReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_scholarshipReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_qualifications(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_qualifications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Qualifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Qualification)
	fc.Result = res
	return ec.marshalNQualification2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQualificationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_qualifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Qualification_id(ctx, field)
			case "degree":
				return ec.fieldContext_Qualification_degree(ctx, field)
			case "institution":
				return ec.fieldContext_Qualification_institution(ctx, field)
			case "graduationYear":
				return ec.fieldContext_Qualification_graduationYear(ctx, field)
			case "createdAt":
				return ec.fieldContext_Qualification_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Qualification_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Qualification_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Qualification", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_referees(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_referees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Referees, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Referee)
	fc.Result = res
	return ec.marshalNReferee2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐRefereeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_referees(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Referee_id(ctx, field)
			case "fullName":
				return ec.fieldContext_Referee_fullName(ctx, field)
			case "email":
				return ec.fieldContext_Referee_email(ctx, field)
			case "phone":
				return ec.fieldContext_Referee_phone(ctx, field)
			case "createdAt":
				return ec.fieldContext_Referee_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Referee_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Referee_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Referee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_notifications(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_notifications(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Notification)
	fc.Result = res
	return ec.marshalNNotification2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNotificationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_notifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Notification_id(ctx, field)
			case "senderId":
				return ec.fieldContext_Notification_senderId(ctx, field)
			case "recipientId":
				return ec.fieldContext_Notification_recipientId(ctx, field)
			case "courseId":
				return ec.fieldContext_Notification_courseId(ctx, field)
			case "seen":
				return ec.fieldContext_Notification_seen(ctx, field)
			case "text":
				return ec.fieldContext_Notification_text(ctx, field)
			case "title":
				return ec.fieldContext_Notification_title(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "link":
				return ec.fieldContext_Notification_link(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notification_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Notification_updatedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_Notification_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_deletedAt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_deletedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_confirmedAt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_confirmedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_confirmedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_confirmationMailSentAt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_confirmationMailSentAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfirmationMailSentAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_confirmationMailSentAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSetting_id(ctx context.Context, field graphql.CollectedField, obj *model.UserSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSetting_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSetting_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSetting_userId(ctx context.Context, field graphql.CollectedField, obj *model.UserSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSetting_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSetting_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSetting_type(ctx context.Context, field graphql.CollectedField, obj *model.UserSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSetting_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.SettingType)
	fc.Result = res
	return ec.marshalNSettingType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSettingType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSetting_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SettingType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSetting_key(ctx context.Context, field graphql.CollectedField, obj *model.UserSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSetting_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.UserSettingKeys)
	fc.Result = res
	return ec.marshalNUserSettingKeys2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUserSettingKeys(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSetting_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UserSettingKeys does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserSetting_value(ctx context.Context, field graphql.CollectedField, obj *model.UserSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserSetting_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserSetting_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAnswerChoiceInput(ctx context.Context, obj interface{}) (model.AnswerChoiceInput, error) {
	var it model.AnswerChoiceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "text", "isCorrect", "feedback", "weight"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			it.Text, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isCorrect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCorrect"))
			it.IsCorrect, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback"))
			it.Feedback, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAnswerInput(ctx context.Context, obj interface{}) (model.AnswerInput, error) {
	var it model.AnswerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"submission", "questionId", "choices", "value", "isCorrect", "weight", "pointsAwarded", "feedback"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "submission":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("submission"))
			it.Submission, err = ec.unmarshalNSubmissionInput2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSubmissionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "questionId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("questionId"))
			it.QuestionID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "choices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("choices"))
			it.Choices, err = ec.unmarshalNAnswerChoiceInput2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerChoiceInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isCorrect":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCorrect"))
			it.IsCorrect, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "pointsAwarded":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pointsAwarded"))
			it.PointsAwarded, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback"))
			it.Feedback, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthUser(ctx context.Context, obj interface{}) (model.AuthUser, error) {
	var it model.AuthUser
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatMediaInput(ctx context.Context, obj interface{}) (model.CreatMediaInput, error) {
	var it model.CreatMediaInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userId", "courseID", "title", "description", "category", "mediaType", "file"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "courseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseID"))
			it.CourseID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "mediaType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mediaType"))
			it.MediaType, err = ec.unmarshalNMediaType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMediaType(ctx, v)
			if err != nil {
				return it, err
			}
		case "file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
			it.File, err = ec.unmarshalNCreateFileInput2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateFileInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateActivityInput(ctx context.Context, obj interface{}) (model.CreateActivityInput, error) {
	var it model.CreateActivityInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userID", "courseID", "courseContentID", "activityType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "courseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseID"))
			it.CourseID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "courseContentID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseContentID"))
			it.CourseContentID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "activityType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityType"))
			it.ActivityType, err = ec.unmarshalNActivityType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐActivityType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCourseInput(ctx context.Context, obj interface{}) (model.CreateCourseInput, error) {
	var it model.CreateCourseInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"code", "title", "userId", "shortDescription", "description", "semester", "startDate", "endDate", "coverImageUrl", "type", "status", "programType", "instructorIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "shortDescription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortDescription"))
			it.ShortDescription, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "semester":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("semester"))
			it.Semester, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			it.StartDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			it.EndDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "coverImageUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coverImageUrl"))
			it.CoverImageURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNCourseType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourseType(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNCourseStatus2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourseStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "programType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("programType"))
			it.ProgramType, err = ec.unmarshalNProgramType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐProgramType(ctx, v)
			if err != nil {
				return it, err
			}
		case "instructorIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instructorIds"))
			it.InstructorIds, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateEvaluationCriteriaInput(ctx context.Context, obj interface{}) (model.CreateEvaluationCriteriaInput, error) {
	var it model.CreateEvaluationCriteriaInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"passingScore", "weight", "resubmissionPolicy", "isPassFail", "quizId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "passingScore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passingScore"))
			it.PassingScore, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "resubmissionPolicy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resubmissionPolicy"))
			it.ResubmissionPolicy, err = ec.unmarshalOResubmissionPolicy2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐResubmissionPolicy(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPassFail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isPassFail"))
			it.IsPassFail, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "quizId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quizId"))
			it.QuizID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateFileInput(ctx context.Context, obj interface{}) (model.CreateFileInput, error) {
	var it model.CreateFileInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "mimeType", "size", "url"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "mimeType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeType"))
			it.MimeType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			it.Size, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateForumCommentInput(ctx context.Context, obj interface{}) (model.CreateForumCommentInput, error) {
	var it model.CreateForumCommentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userId", "parentId", "content", "courseId", "postId", "files"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentId"))
			it.ParentID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "courseId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseId"))
			it.CourseID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postId"))
			it.PostID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "files":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files"))
			it.Files, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateForumInput(ctx context.Context, obj interface{}) (model.CreateForumInput, error) {
	var it model.CreateForumInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "courseId", "tags"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "courseId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseId"))
			it.CourseID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateForumPostInput(ctx context.Context, obj interface{}) (model.CreateForumPostInput, error) {
	var it model.CreateForumPostInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "content", "courseId", "forumId", "userId", "tags", "files"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "courseId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseId"))
			it.CourseID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "forumId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("forumId"))
			it.ForumID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "files":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files"))
			it.Files, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateGradeInput(ctx context.Context, obj interface{}) (model.CreateGradeInput, error) {
	var it model.CreateGradeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"courseId", "studentId", "quizId", "value", "criteria", "comments"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "courseId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseId"))
			it.CourseID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "studentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentId"))
			it.StudentID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "quizId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quizId"))
			it.QuizID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "criteria":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("criteria"))
			it.Criteria, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "comments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comments"))
			it.Comments, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateNotificationInput(ctx context.Context, obj interface{}) (model.CreateNotificationInput, error) {
	var it model.CreateNotificationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"senderId", "recipientId", "courseId", "text", "title", "type", "link"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "senderId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderId"))
			it.SenderID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipientId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipientId"))
			it.RecipientID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "courseId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseId"))
			it.CourseID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			it.Text, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNNotificationType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNotificationType(ctx, v)
			if err != nil {
				return it, err
			}
		case "link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("link"))
			it.Link, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateQuestionInput(ctx context.Context, obj interface{}) (model.CreateQuestionInput, error) {
	var it model.CreateQuestionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "text", "choices", "correctAnswer", "feedback", "hints", "randomize", "pointValue", "categories", "matchingPairs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNQuestionType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuestionType(ctx, v)
			if err != nil {
				return it, err
			}
		case "text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			it.Text, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "choices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("choices"))
			it.Choices, err = ec.unmarshalNAnswerChoiceInput2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerChoiceInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "correctAnswer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correctAnswer"))
			it.CorrectAnswer, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback"))
			it.Feedback, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "hints":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hints"))
			it.Hints, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "randomize":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("randomize"))
			it.Randomize, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "pointValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pointValue"))
			it.PointValue, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "categories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categories"))
			it.Categories, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "matchingPairs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchingPairs"))
			it.MatchingPairs, err = ec.unmarshalNMatchingPairInput2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMatchingPairInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateQuizInput(ctx context.Context, obj interface{}) (model.CreateQuizInput, error) {
	var it model.CreateQuizInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "timeLimit", "shuffleQuestions", "categories", "questions"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeLimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimit"))
			it.TimeLimit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "shuffleQuestions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shuffleQuestions"))
			it.ShuffleQuestions, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "categories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categories"))
			it.Categories, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "questions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("questions"))
			it.Questions, err = ec.unmarshalNCreateQuestionInput2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateQuestionInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTagInput(ctx context.Context, obj interface{}) (model.CreateTagInput, error) {
	var it model.CreateTagInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTargetInput(ctx context.Context, obj interface{}) (model.CreateTargetInput, error) {
	var it model.CreateTargetInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "startDate", "endDate", "courseId", "targetType", "targetMetric", "targetValue", "units"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			it.StartDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			it.EndDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "courseId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseId"))
			it.CourseID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "targetType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetType"))
			it.TargetType, err = ec.unmarshalOTargetType2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTargetType(ctx, v)
			if err != nil {
				return it, err
			}
		case "targetMetric":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetMetric"))
			it.TargetMetric, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "targetValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetValue"))
			it.TargetValue, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "units":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("units"))
			it.Units, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMatchingPairInput(ctx context.Context, obj interface{}) (model.MatchingPairInput, error) {
	var it model.MatchingPairInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"left", "right"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "left":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("left"))
			it.Left, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "right":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("right"))
			it.Right, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewCourse(ctx context.Context, obj interface{}) (model.NewCourse, error) {
	var it model.NewCourse
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "userId", "title", "code", "coverImg", "type", "semester", "program", "tutors", "shortDescription", "longDescription"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "coverImg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coverImg"))
			it.CoverImg, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "semester":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("semester"))
			it.Semester, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "program":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("program"))
			it.Program, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "tutors":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tutors"))
			it.Tutors, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "shortDescription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortDescription"))
			it.ShortDescription, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "longDescription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longDescription"))
			it.LongDescription, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewQualification(ctx context.Context, obj interface{}) (model.NewQualification, error) {
	var it model.NewQualification
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"degree", "institution", "graduationYear"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "degree":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("degree"))
			it.Degree, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "institution":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("institution"))
			it.Institution, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "graduationYear":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("graduationYear"))
			it.GraduationYear, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewReferee(ctx context.Context, obj interface{}) (model.NewReferee, error) {
	var it model.NewReferee
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"userId", "fullName", "email", "phone"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fullName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullName"))
			it.FullName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewSetting(ctx context.Context, obj interface{}) (model.NewSetting, error) {
	var it model.NewSetting
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "userKey", "globalKey", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNSettingType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSettingType(ctx, v)
			if err != nil {
				return it, err
			}
		case "userKey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userKey"))
			it.UserKey, err = ec.unmarshalOUserSettingKeys2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUserSettingKeys(ctx, v)
			if err != nil {
				return it, err
			}
		case "globalKey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("globalKey"))
			it.GlobalKey, err = ec.unmarshalOGlobalSettingKeys2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGlobalSettingKeys(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewUser(ctx context.Context, obj interface{}) (model.NewUser, error) {
	var it model.NewUser
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"firstName", "lastName", "email", "password", "platform", "program"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "program":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("program"))
			it.Program, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPermissionInput(ctx context.Context, obj interface{}) (model.PermissionInput, error) {
	var it model.PermissionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"role", "model", "permissions"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			it.Role, err = ec.unmarshalNRole2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
		case "model":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("model"))
			it.Model, err = ec.unmarshalNAllowedModel2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAllowedModel(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissions"))
			it.Permissions, err = ec.unmarshalNAllowedPermission2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAllowedPermissionᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlayerInfoInput(ctx context.Context, obj interface{}) (model.PlayerInfoInput, error) {
	var it model.PlayerInfoInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"currentTime", "duration", "thumbnailUrl", "posterUrl"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "currentTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentTime"))
			it.CurrentTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "thumbnailUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thumbnailUrl"))
			it.ThumbnailURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "posterUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("posterUrl"))
			it.PosterURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSubmissionInput(ctx context.Context, obj interface{}) (model.SubmissionInput, error) {
	var it model.SubmissionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"quiz", "userID", "startTime", "endTime", "answers", "points", "grade", "weight", "feedback", "startedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "quiz":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quiz"))
			it.Quiz, err = ec.unmarshalNUpdateQuizInput2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateQuizInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "userID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "startTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
			it.StartTime, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
			it.EndTime, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "answers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answers"))
			it.Answers, err = ec.unmarshalNAnswerInput2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "points":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("points"))
			it.Points, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "grade":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			it.Grade, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback"))
			it.Feedback, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "startedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAt"))
			it.StartedAt, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateActivityInput(ctx context.Context, obj interface{}) (model.UpdateActivityInput, error) {
	var it model.UpdateActivityInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "courseContentID", "activityType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "courseContentID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseContentID"))
			it.CourseContentID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "activityType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityType"))
			it.ActivityType, err = ec.unmarshalNActivityType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐActivityType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCourseInput(ctx context.Context, obj interface{}) (model.UpdateCourseInput, error) {
	var it model.UpdateCourseInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "code", "title", "shortDescription", "description", "semester", "startDate", "endDate", "matricNumber", "coverImageUrl", "type", "status", "programType", "instructorIds", "studentIds", "courseContentIds", "assignmentIds", "quizIds", "forumId", "activityIds", "gradeIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "shortDescription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortDescription"))
			it.ShortDescription, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "semester":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("semester"))
			it.Semester, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			it.StartDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			it.EndDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "matricNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matricNumber"))
			it.MatricNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "coverImageUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("coverImageUrl"))
			it.CoverImageURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNCourseType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourseType(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNCourseStatus2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourseStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "programType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("programType"))
			it.ProgramType, err = ec.unmarshalNProgramType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐProgramType(ctx, v)
			if err != nil {
				return it, err
			}
		case "instructorIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instructorIds"))
			it.InstructorIds, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "studentIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentIds"))
			it.StudentIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "courseContentIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseContentIds"))
			it.CourseContentIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "assignmentIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assignmentIds"))
			it.AssignmentIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "quizIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quizIds"))
			it.QuizIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "forumId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("forumId"))
			it.ForumID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "activityIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityIds"))
			it.ActivityIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "gradeIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gradeIds"))
			it.GradeIds, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateEvaluationCriteriaInput(ctx context.Context, obj interface{}) (model.UpdateEvaluationCriteriaInput, error) {
	var it model.UpdateEvaluationCriteriaInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"passingScore", "weight", "resubmissionPolicy", "isPassFail", "quizId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "passingScore":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("passingScore"))
			it.PassingScore, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "resubmissionPolicy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resubmissionPolicy"))
			it.ResubmissionPolicy, err = ec.unmarshalOResubmissionPolicy2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐResubmissionPolicy(ctx, v)
			if err != nil {
				return it, err
			}
		case "isPassFail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isPassFail"))
			it.IsPassFail, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "quizId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quizId"))
			it.QuizID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateFileInput(ctx context.Context, obj interface{}) (model.UpdateFileInput, error) {
	var it model.UpdateFileInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "mimetype", "encoding", "size", "url", "createdAt", "updatedAt", "deletedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "mimetype":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimetype"))
			it.Mimetype, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "encoding":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encoding"))
			it.Encoding, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			it.Size, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateForumCommentInput(ctx context.Context, obj interface{}) (model.UpdateForumCommentInput, error) {
	var it model.UpdateForumCommentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"content", "files"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "files":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files"))
			it.Files, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateForumInput(ctx context.Context, obj interface{}) (model.UpdateForumInput, error) {
	var it model.UpdateForumInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "tags"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateForumPostInput(ctx context.Context, obj interface{}) (model.UpdateForumPostInput, error) {
	var it model.UpdateForumPostInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "content", "tags", "files"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "files":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("files"))
			it.Files, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGradeInput(ctx context.Context, obj interface{}) (model.UpdateGradeInput, error) {
	var it model.UpdateGradeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "studentId", "courseId", "quizId", "value", "criteria", "comments"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "studentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("studentId"))
			it.StudentID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "courseId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseId"))
			it.CourseID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "quizId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quizId"))
			it.QuizID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "criteria":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("criteria"))
			it.Criteria, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "comments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comments"))
			it.Comments, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMediaInput(ctx context.Context, obj interface{}) (model.UpdateMediaInput, error) {
	var it model.UpdateMediaInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "description", "category", "mediaType", "duration", "videoPlayerInfo", "file"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "mediaType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mediaType"))
			it.MediaType, err = ec.unmarshalNMediaType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMediaType(ctx, v)
			if err != nil {
				return it, err
			}
		case "duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			it.Duration, err = ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "videoPlayerInfo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("videoPlayerInfo"))
			it.VideoPlayerInfo, err = ec.unmarshalOPlayerInfoInput2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPlayerInfoInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "file":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
			it.File, err = ec.unmarshalNUpdateFileInput2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateFileInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateNotificationInput(ctx context.Context, obj interface{}) (model.UpdateNotificationInput, error) {
	var it model.UpdateNotificationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"read"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "read":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("read"))
			it.Read, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProspective(ctx context.Context, obj interface{}) (model.UpdateProspective, error) {
	var it model.UpdateProspective
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"firstName", "lastName", "email", "dob", "phone", "address", "city", "state", "country", "zip", "nationality", "platform", "program", "salvationBrief", "godsWorkings", "reason", "churchName", "churchAddress", "pastorName", "pastorEmail", "pastorPhone", "churchInvolved", "healthConditions", "healthIssueDescription", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dob":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dob"))
			it.Dob, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			it.Phone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			it.City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			it.State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			it.Country, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "zip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zip"))
			it.Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nationality":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nationality"))
			it.Nationality, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "program":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("program"))
			it.Program, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "salvationBrief":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salvationBrief"))
			it.SalvationBrief, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "godsWorkings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("godsWorkings"))
			it.GodsWorkings, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			it.Reason, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "churchName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("churchName"))
			it.ChurchName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "churchAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("churchAddress"))
			it.ChurchAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pastorName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pastorName"))
			it.PastorName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pastorEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pastorEmail"))
			it.PastorEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pastorPhone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pastorPhone"))
			it.PastorPhone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "churchInvolved":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("churchInvolved"))
			it.ChurchInvolved, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "healthConditions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("healthConditions"))
			it.HealthConditions, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "healthIssueDescription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("healthIssueDescription"))
			it.HealthIssueDescription, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNRegistrationStatus2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐRegistrationStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateQuestionInput(ctx context.Context, obj interface{}) (model.UpdateQuestionInput, error) {
	var it model.UpdateQuestionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "type", "text", "choices", "correctAnswer", "feedback", "hints", "randomize", "pointValue", "categories", "matchingPairs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNQuestionType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuestionType(ctx, v)
			if err != nil {
				return it, err
			}
		case "text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			it.Text, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "choices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("choices"))
			it.Choices, err = ec.unmarshalNAnswerChoiceInput2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerChoiceInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "correctAnswer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("correctAnswer"))
			it.CorrectAnswer, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback"))
			it.Feedback, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "hints":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hints"))
			it.Hints, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "randomize":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("randomize"))
			it.Randomize, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "pointValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pointValue"))
			it.PointValue, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "categories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categories"))
			it.Categories, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "matchingPairs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("matchingPairs"))
			it.MatchingPairs, err = ec.unmarshalNMatchingPairInput2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMatchingPairInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateQuizInput(ctx context.Context, obj interface{}) (model.UpdateQuizInput, error) {
	var it model.UpdateQuizInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "timeLimit", "shuffleQuestions", "categories", "questions"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "timeLimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeLimit"))
			it.TimeLimit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "shuffleQuestions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shuffleQuestions"))
			it.ShuffleQuestions, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "categories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categories"))
			it.Categories, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "questions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("questions"))
			it.Questions, err = ec.unmarshalOUpdateQuestionInput2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateQuestionInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSetting(ctx context.Context, obj interface{}) (model.UpdateSetting, error) {
	var it model.UpdateSetting
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTagInput(ctx context.Context, obj interface{}) (model.UpdateTagInput, error) {
	var it model.UpdateTagInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTargetInput(ctx context.Context, obj interface{}) (model.UpdateTargetInput, error) {
	var it model.UpdateTargetInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "startDate", "endDate", "courseId", "targetValue", "units"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			it.StartDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			it.EndDate, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "courseId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("courseId"))
			it.CourseID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "targetValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetValue"))
			it.TargetValue, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "units":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("units"))
			it.Units, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVerifyInput(ctx context.Context, obj interface{}) (model.VerifyInput, error) {
	var it model.VerifyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "password", "code", "resend"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "resend":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resend"))
			it.Resend, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var activityImplementors = []string{"Activity"}

func (ec *executionContext) _Activity(ctx context.Context, sel ast.SelectionSet, obj *model.Activity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activityImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Activity")
		case "id":

			out.Values[i] = ec._Activity_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":

			out.Values[i] = ec._Activity_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "courseID":

			out.Values[i] = ec._Activity_courseID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "courseContentID":

			out.Values[i] = ec._Activity_courseContentID(ctx, field, obj)

		case "activityType":

			out.Values[i] = ec._Activity_activityType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Activity_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._Activity_updatedAt(ctx, field, obj)

		case "deletedAt":

			out.Values[i] = ec._Activity_deletedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var answerImplementors = []string{"Answer"}

func (ec *executionContext) _Answer(ctx context.Context, sel ast.SelectionSet, obj *model.Answer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answerImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Answer")
		case "id":

			out.Values[i] = ec._Answer_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "questionId":

			out.Values[i] = ec._Answer_questionId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "choices":

			out.Values[i] = ec._Answer_choices(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":

			out.Values[i] = ec._Answer_value(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isCorrect":

			out.Values[i] = ec._Answer_isCorrect(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":

			out.Values[i] = ec._Answer_weight(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pointsAwarded":

			out.Values[i] = ec._Answer_pointsAwarded(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "feedback":

			out.Values[i] = ec._Answer_feedback(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Answer_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._Answer_updatedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var answerChoiceImplementors = []string{"AnswerChoice"}

func (ec *executionContext) _AnswerChoice(ctx context.Context, sel ast.SelectionSet, obj *model.AnswerChoice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, answerChoiceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AnswerChoice")
		case "id":

			out.Values[i] = ec._AnswerChoice_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "text":

			out.Values[i] = ec._AnswerChoice_text(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isCorrect":

			out.Values[i] = ec._AnswerChoice_isCorrect(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "feedback":

			out.Values[i] = ec._AnswerChoice_feedback(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":

			out.Values[i] = ec._AnswerChoice_weight(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var bonusImplementors = []string{"Bonus"}

func (ec *executionContext) _Bonus(ctx context.Context, sel ast.SelectionSet, obj *model.Bonus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bonusImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Bonus")
		case "id":

			out.Values[i] = ec._Bonus_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Bonus_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Bonus_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "percentage":

			out.Values[i] = ec._Bonus_percentage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var claimsImplementors = []string{"Claims"}

func (ec *executionContext) _Claims(ctx context.Context, sel ast.SelectionSet, obj *model.Claims) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, claimsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Claims")
		case "id":

			out.Values[i] = ec._Claims_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":

			out.Values[i] = ec._Claims_userId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":

			out.Values[i] = ec._Claims_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Role":

			out.Values[i] = ec._Claims_Role(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var courseImplementors = []string{"Course"}

func (ec *executionContext) _Course(ctx context.Context, sel ast.SelectionSet, obj *model.Course) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, courseImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Course")
		case "id":

			out.Values[i] = ec._Course_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":

			out.Values[i] = ec._Course_userId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":

			out.Values[i] = ec._Course_code(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":

			out.Values[i] = ec._Course_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shortDescription":

			out.Values[i] = ec._Course_shortDescription(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Course_description(ctx, field, obj)

		case "semester":

			out.Values[i] = ec._Course_semester(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "year":

			out.Values[i] = ec._Course_year(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startDate":

			out.Values[i] = ec._Course_startDate(ctx, field, obj)

		case "endDate":

			out.Values[i] = ec._Course_endDate(ctx, field, obj)

		case "matricNumber":

			out.Values[i] = ec._Course_matricNumber(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "coverImageUrl":

			out.Values[i] = ec._Course_coverImageUrl(ctx, field, obj)

		case "type":

			out.Values[i] = ec._Course_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._Course_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "progress":

			out.Values[i] = ec._Course_progress(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "programType":

			out.Values[i] = ec._Course_programType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "instructorIds":

			out.Values[i] = ec._Course_instructorIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "students":

			out.Values[i] = ec._Course_students(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "assignmentIds":

			out.Values[i] = ec._Course_assignmentIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "quizzeIds":

			out.Values[i] = ec._Course_quizzeIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "forumId":

			out.Values[i] = ec._Course_forumId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "activityIds":

			out.Values[i] = ec._Course_activityIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gradeIds":

			out.Values[i] = ec._Course_gradeIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Course_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._Course_updatedAt(ctx, field, obj)

		case "deletedAt":

			out.Values[i] = ec._Course_deletedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var courseProgressImplementors = []string{"CourseProgress"}

func (ec *executionContext) _CourseProgress(ctx context.Context, sel ast.SelectionSet, obj *model.CourseProgress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, courseProgressImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CourseProgress")
		case "lecturesCompleted":

			out.Values[i] = ec._CourseProgress_lecturesCompleted(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "assignmentsCompleted":

			out.Values[i] = ec._CourseProgress_assignmentsCompleted(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "quizzesCompleted":

			out.Values[i] = ec._CourseProgress_quizzesCompleted(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "overallProgress":

			out.Values[i] = ec._CourseProgress_overallProgress(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var evaluationCriteriaImplementors = []string{"EvaluationCriteria"}

func (ec *executionContext) _EvaluationCriteria(ctx context.Context, sel ast.SelectionSet, obj *model.EvaluationCriteria) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, evaluationCriteriaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EvaluationCriteria")
		case "id":

			out.Values[i] = ec._EvaluationCriteria_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "passingScore":

			out.Values[i] = ec._EvaluationCriteria_passingScore(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scoreDistribution":

			out.Values[i] = ec._EvaluationCriteria_scoreDistribution(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gradingScale":

			out.Values[i] = ec._EvaluationCriteria_gradingScale(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":

			out.Values[i] = ec._EvaluationCriteria_weight(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "penalties":

			out.Values[i] = ec._EvaluationCriteria_penalties(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bonuses":

			out.Values[i] = ec._EvaluationCriteria_bonuses(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resubmissionPolicy":

			out.Values[i] = ec._EvaluationCriteria_resubmissionPolicy(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isPassFail":

			out.Values[i] = ec._EvaluationCriteria_isPassFail(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "quizId":

			out.Values[i] = ec._EvaluationCriteria_quizId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._EvaluationCriteria_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._EvaluationCriteria_updatedAt(ctx, field, obj)

		case "deletedAt":

			out.Values[i] = ec._EvaluationCriteria_deletedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fileImplementors = []string{"File"}

func (ec *executionContext) _File(ctx context.Context, sel ast.SelectionSet, obj *model.File) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("File")
		case "name":

			out.Values[i] = ec._File_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mimetype":

			out.Values[i] = ec._File_mimetype(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "encoding":

			out.Values[i] = ec._File_encoding(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "size":

			out.Values[i] = ec._File_size(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":

			out.Values[i] = ec._File_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var forumImplementors = []string{"Forum"}

func (ec *executionContext) _Forum(ctx context.Context, sel ast.SelectionSet, obj *model.Forum) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, forumImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Forum")
		case "id":

			out.Values[i] = ec._Forum_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Forum_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Forum_description(ctx, field, obj)

		case "courseId":

			out.Values[i] = ec._Forum_courseId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "postIds":

			out.Values[i] = ec._Forum_postIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tagIds":

			out.Values[i] = ec._Forum_tagIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Forum_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._Forum_updatedAt(ctx, field, obj)

		case "deletedAt":

			out.Values[i] = ec._Forum_deletedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var forumCommentImplementors = []string{"ForumComment"}

func (ec *executionContext) _ForumComment(ctx context.Context, sel ast.SelectionSet, obj *model.ForumComment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, forumCommentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ForumComment")
		case "id":

			out.Values[i] = ec._ForumComment_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content":

			out.Values[i] = ec._ForumComment_content(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "courseId":

			out.Values[i] = ec._ForumComment_courseId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":

			out.Values[i] = ec._ForumComment_userId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "postId":

			out.Values[i] = ec._ForumComment_postId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentId":

			out.Values[i] = ec._ForumComment_parentId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fileIds":

			out.Values[i] = ec._ForumComment_fileIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "upvotes":

			out.Values[i] = ec._ForumComment_upvotes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "downvotes":

			out.Values[i] = ec._ForumComment_downvotes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._ForumComment_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._ForumComment_updatedAt(ctx, field, obj)

		case "deletedAt":

			out.Values[i] = ec._ForumComment_deletedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var forumPostImplementors = []string{"ForumPost"}

func (ec *executionContext) _ForumPost(ctx context.Context, sel ast.SelectionSet, obj *model.ForumPost) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, forumPostImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ForumPost")
		case "id":

			out.Values[i] = ec._ForumPost_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":

			out.Values[i] = ec._ForumPost_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content":

			out.Values[i] = ec._ForumPost_content(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "courseID":

			out.Values[i] = ec._ForumPost_courseID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "author":

			out.Values[i] = ec._ForumPost_author(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "commentIds":

			out.Values[i] = ec._ForumPost_commentIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fileIds":

			out.Values[i] = ec._ForumPost_fileIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "forumId":

			out.Values[i] = ec._ForumPost_forumId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":

			out.Values[i] = ec._ForumPost_userId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tags":

			out.Values[i] = ec._ForumPost_tags(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "upvotes":

			out.Values[i] = ec._ForumPost_upvotes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "downvotes":

			out.Values[i] = ec._ForumPost_downvotes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._ForumPost_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._ForumPost_updatedAt(ctx, field, obj)

		case "deletedAt":

			out.Values[i] = ec._ForumPost_deletedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var globalSettingImplementors = []string{"GlobalSetting"}

func (ec *executionContext) _GlobalSetting(ctx context.Context, sel ast.SelectionSet, obj *model.GlobalSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, globalSettingImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GlobalSetting")
		case "id":

			out.Values[i] = ec._GlobalSetting_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._GlobalSetting_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "key":

			out.Values[i] = ec._GlobalSetting_key(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":

			out.Values[i] = ec._GlobalSetting_value(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gradeImplementors = []string{"Grade"}

func (ec *executionContext) _Grade(ctx context.Context, sel ast.SelectionSet, obj *model.Grade) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gradeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Grade")
		case "id":

			out.Values[i] = ec._Grade_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "studentId":

			out.Values[i] = ec._Grade_studentId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "courseId":

			out.Values[i] = ec._Grade_courseId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "quizId":

			out.Values[i] = ec._Grade_quizId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":

			out.Values[i] = ec._Grade_value(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "criteria":

			out.Values[i] = ec._Grade_criteria(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comments":

			out.Values[i] = ec._Grade_comments(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Grade_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._Grade_updatedAt(ctx, field, obj)

		case "deletedAt":

			out.Values[i] = ec._Grade_deletedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gradeScaleImplementors = []string{"GradeScale"}

func (ec *executionContext) _GradeScale(ctx context.Context, sel ast.SelectionSet, obj *model.GradeScale) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gradeScaleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GradeScale")
		case "id":

			out.Values[i] = ec._GradeScale_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "minScore":

			out.Values[i] = ec._GradeScale_minScore(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "maxScore":

			out.Values[i] = ec._GradeScale_maxScore(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "grade":

			out.Values[i] = ec._GradeScale_grade(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var matchingPairImplementors = []string{"MatchingPair"}

func (ec *executionContext) _MatchingPair(ctx context.Context, sel ast.SelectionSet, obj *model.MatchingPair) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, matchingPairImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MatchingPair")
		case "id":

			out.Values[i] = ec._MatchingPair_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "question":

			out.Values[i] = ec._MatchingPair_question(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "left":

			out.Values[i] = ec._MatchingPair_left(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "right":

			out.Values[i] = ec._MatchingPair_right(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mediaImplementors = []string{"Media"}

func (ec *executionContext) _Media(ctx context.Context, sel ast.SelectionSet, obj *model.Media) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Media")
		case "id":

			out.Values[i] = ec._Media_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "courseId":

			out.Values[i] = ec._Media_courseId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":

			out.Values[i] = ec._Media_userId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":

			out.Values[i] = ec._Media_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Media_description(ctx, field, obj)

		case "category":

			out.Values[i] = ec._Media_category(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mediaType":

			out.Values[i] = ec._Media_mediaType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tags":

			out.Values[i] = ec._Media_tags(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videoPlayerInfo":

			out.Values[i] = ec._Media_videoPlayerInfo(ctx, field, obj)

		case "file":

			out.Values[i] = ec._Media_file(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Media_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._Media_updatedAt(ctx, field, obj)

		case "deletedAt":

			out.Values[i] = ec._Media_deletedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createEvaluationCriteria":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createEvaluationCriteria(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateEvaluationCriteria":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEvaluationCriteria(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteEvaluationCriteria":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteEvaluationCriteria(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createActivity":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createActivity(ctx, field)
			})

		case "updateActivity":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateActivity(ctx, field)
			})

		case "deleteActivity":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteActivity(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refresh":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_refresh(ctx, field)
			})

		case "signOut":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_signOut(ctx, field)
			})

		case "signIn":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_signIn(ctx, field)
			})

		case "signUp":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_signUp(ctx, field)
			})

		case "forgetPassword":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_forgetPassword(ctx, field)
			})

		case "resetPassword":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_resetPassword(ctx, field)
			})

		case "changePassword":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_changePassword(ctx, field)
			})

		case "verifyEmail":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_verifyEmail(ctx, field)
			})

		case "createCourse":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCourse(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateCourse":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCourse(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteCourse":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCourse(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createForum":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createForum(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateForum":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateForum(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteForum":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteForum(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createForumPost":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createForumPost(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateForumPost":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateForumPost(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteForumPost":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteForumPost(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createForumComment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createForumComment(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateForumComment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateForumComment(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteForumComment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteForumComment(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTag":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTag(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTag":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTag(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteTag":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTag(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createGrade":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createGrade(ctx, field)
			})

		case "updateGrade":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateGrade(ctx, field)
			})

		case "deleteGrade":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteGrade(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createMedia":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMedia(ctx, field)
			})

		case "updateMedia":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMedia(ctx, field)
			})

		case "deleteMedia":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMedia(ctx, field)
			})

		case "createNotification":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createNotification(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateNotification":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateNotification(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteNotification":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteNotification(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePermission":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePermission(ctx, field)
			})

		case "grantPermission":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_grantPermission(ctx, field)
			})

		case "revokePermission":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_revokePermission(ctx, field)
			})

		case "createQuiz":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createQuiz(ctx, field)
			})

		case "updateQuiz":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateQuiz(ctx, field)
			})

		case "deleteQuiz":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteQuiz(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "submitQuiz":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_submitQuiz(ctx, field)
			})

		case "createUserSetting":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUserSetting(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserSetting":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserSetting(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteUserSetting":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUserSetting(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createGlobalSetting":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createGlobalSetting(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateGlobalSetting":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateGlobalSetting(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteGlobalSetting":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteGlobalSetting(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTarget":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTarget(ctx, field)
			})

		case "updateTarget":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTarget(ctx, field)
			})

		case "deleteTarget":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTarget(ctx, field)
			})

		case "createUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUser(ctx, field)
			})

		case "createReferee":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createReferee(ctx, field)
			})

		case "createQualification":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createQualification(ctx, field)
			})

		case "updateUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUser(ctx, field)
			})

		case "updateProspective":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProspective(ctx, field)
			})

		case "deleteUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteUser(ctx, field)
			})

		case "deleteManyUsers":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteManyUsers(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var notificationImplementors = []string{"Notification"}

func (ec *executionContext) _Notification(ctx context.Context, sel ast.SelectionSet, obj *model.Notification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notificationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Notification")
		case "id":

			out.Values[i] = ec._Notification_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "senderId":

			out.Values[i] = ec._Notification_senderId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipientId":

			out.Values[i] = ec._Notification_recipientId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "courseId":

			out.Values[i] = ec._Notification_courseId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "seen":

			out.Values[i] = ec._Notification_seen(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "text":

			out.Values[i] = ec._Notification_text(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":

			out.Values[i] = ec._Notification_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._Notification_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "link":

			out.Values[i] = ec._Notification_link(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._Notification_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._Notification_updatedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":

			out.Values[i] = ec._Notification_deletedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var penaltyImplementors = []string{"Penalty"}

func (ec *executionContext) _Penalty(ctx context.Context, sel ast.SelectionSet, obj *model.Penalty) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, penaltyImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Penalty")
		case "id":

			out.Values[i] = ec._Penalty_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Penalty_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Penalty_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "percentage":

			out.Values[i] = ec._Penalty_percentage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionImplementors = []string{"Permission"}

func (ec *executionContext) _Permission(ctx context.Context, sel ast.SelectionSet, obj *model.Permission) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, permissionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Permission")
		case "id":

			out.Values[i] = ec._Permission_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "role":

			out.Values[i] = ec._Permission_role(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "model":

			out.Values[i] = ec._Permission_model(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "permissions":

			out.Values[i] = ec._Permission_permissions(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var playerInfoImplementors = []string{"PlayerInfo"}

func (ec *executionContext) _PlayerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PlayerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, playerInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlayerInfo")
		case "currentTime":

			out.Values[i] = ec._PlayerInfo_currentTime(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "duration":

			out.Values[i] = ec._PlayerInfo_duration(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thumbnailUrl":

			out.Values[i] = ec._PlayerInfo_thumbnailUrl(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "posterUrl":

			out.Values[i] = ec._PlayerInfo_posterUrl(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var qualificationImplementors = []string{"Qualification"}

func (ec *executionContext) _Qualification(ctx context.Context, sel ast.SelectionSet, obj *model.Qualification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, qualificationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Qualification")
		case "id":

			out.Values[i] = ec._Qualification_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "degree":

			out.Values[i] = ec._Qualification_degree(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "institution":

			out.Values[i] = ec._Qualification_institution(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "graduationYear":

			out.Values[i] = ec._Qualification_graduationYear(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Qualification_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._Qualification_updatedAt(ctx, field, obj)

		case "deletedAt":

			out.Values[i] = ec._Qualification_deletedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "evaluationCriterias":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_evaluationCriterias(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "evaluationCriteria":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_evaluationCriteria(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "activities":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_activities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "activity":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_activity(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "courses":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_courses(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "course":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_course(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "forums":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_forums(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "forum":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_forum(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "forumPosts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_forumPosts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "forumPost":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_forumPost(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "forumComments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_forumComments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "forumComment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_forumComment(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "grades":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_grades(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "grade":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_grade(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "media":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_media(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "mediaByType":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mediaByType(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "allMedia":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allMedia(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "notifications":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_notifications(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPermissionsForUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPermissionsForUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPermissionsForModel":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPermissionsForModel(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "quiz":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_quiz(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "quizzes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_quizzes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "submission":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_submission(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "submissions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_submissions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "userSetting":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userSetting(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "userSettings":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userSettings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "globalSetting":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_globalSetting(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "globalSettings":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_globalSettings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "targets":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_targets(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "target":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_target(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "users":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "user":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var questionImplementors = []string{"Question"}

func (ec *executionContext) _Question(ctx context.Context, sel ast.SelectionSet, obj *model.Question) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Question")
		case "id":

			out.Values[i] = ec._Question_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._Question_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "text":

			out.Values[i] = ec._Question_text(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "choices":

			out.Values[i] = ec._Question_choices(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "correctAnswer":

			out.Values[i] = ec._Question_correctAnswer(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "feedback":

			out.Values[i] = ec._Question_feedback(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hints":

			out.Values[i] = ec._Question_hints(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "randomize":

			out.Values[i] = ec._Question_randomize(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pointValue":

			out.Values[i] = ec._Question_pointValue(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "categories":

			out.Values[i] = ec._Question_categories(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "matchingPairs":

			out.Values[i] = ec._Question_matchingPairs(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var quizImplementors = []string{"Quiz"}

func (ec *executionContext) _Quiz(ctx context.Context, sel ast.SelectionSet, obj *model.Quiz) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quizImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Quiz")
		case "id":

			out.Values[i] = ec._Quiz_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Quiz_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Quiz_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "quizType":

			out.Values[i] = ec._Quiz_quizType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "duration":

			out.Values[i] = ec._Quiz_duration(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "passingScore":

			out.Values[i] = ec._Quiz_passingScore(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "proctoringMethod":

			out.Values[i] = ec._Quiz_proctoringMethod(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "questions":

			out.Values[i] = ec._Quiz_questions(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resultsReleaseDate":

			out.Values[i] = ec._Quiz_resultsReleaseDate(ctx, field, obj)

		case "certificate":

			out.Values[i] = ec._Quiz_certificate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startTime":

			out.Values[i] = ec._Quiz_startTime(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endTime":

			out.Values[i] = ec._Quiz_endTime(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startDate":

			out.Values[i] = ec._Quiz_startDate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dueDate":

			out.Values[i] = ec._Quiz_dueDate(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timeLimit":

			out.Values[i] = ec._Quiz_timeLimit(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shuffleQuestions":

			out.Values[i] = ec._Quiz_shuffleQuestions(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "randomizeQuestions":

			out.Values[i] = ec._Quiz_randomizeQuestions(ctx, field, obj)

		case "randomizeAnswers":

			out.Values[i] = ec._Quiz_randomizeAnswers(ctx, field, obj)

		case "categories":

			out.Values[i] = ec._Quiz_categories(ctx, field, obj)

		case "courseId":

			out.Values[i] = ec._Quiz_courseId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "questionIds":

			out.Values[i] = ec._Quiz_questionIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gradeIds":

			out.Values[i] = ec._Quiz_gradeIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "submissionIds":

			out.Values[i] = ec._Quiz_submissionIds(ctx, field, obj)

		case "isLocked":

			out.Values[i] = ec._Quiz_isLocked(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "waitTime":

			out.Values[i] = ec._Quiz_waitTime(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":

			out.Values[i] = ec._Quiz_weight(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Quiz_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._Quiz_updatedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":

			out.Values[i] = ec._Quiz_deletedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var refereeImplementors = []string{"Referee"}

func (ec *executionContext) _Referee(ctx context.Context, sel ast.SelectionSet, obj *model.Referee) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, refereeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Referee")
		case "id":

			out.Values[i] = ec._Referee_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fullName":

			out.Values[i] = ec._Referee_fullName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":

			out.Values[i] = ec._Referee_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone":

			out.Values[i] = ec._Referee_phone(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Referee_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._Referee_updatedAt(ctx, field, obj)

		case "deletedAt":

			out.Values[i] = ec._Referee_deletedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reminderImplementors = []string{"Reminder"}

func (ec *executionContext) _Reminder(ctx context.Context, sel ast.SelectionSet, obj *model.Reminder) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reminderImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Reminder")
		case "id":

			out.Values[i] = ec._Reminder_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "target":

			out.Values[i] = ec._Reminder_target(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":

			out.Values[i] = ec._Reminder_user(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":

			out.Values[i] = ec._Reminder_message(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sendTime":

			out.Values[i] = ec._Reminder_sendTime(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sent":

			out.Values[i] = ec._Reminder_sent(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Reminder_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._Reminder_updatedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var scoreDistributionImplementors = []string{"ScoreDistribution"}

func (ec *executionContext) _ScoreDistribution(ctx context.Context, sel ast.SelectionSet, obj *model.ScoreDistribution) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, scoreDistributionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ScoreDistribution")
		case "id":

			out.Values[i] = ec._ScoreDistribution_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "minScore":

			out.Values[i] = ec._ScoreDistribution_minScore(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "maxScore":

			out.Values[i] = ec._ScoreDistribution_maxScore(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "grade":

			out.Values[i] = ec._ScoreDistribution_grade(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "percentage":

			out.Values[i] = ec._ScoreDistribution_percentage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var submissionImplementors = []string{"Submission"}

func (ec *executionContext) _Submission(ctx context.Context, sel ast.SelectionSet, obj *model.Submission) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, submissionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Submission")
		case "id":

			out.Values[i] = ec._Submission_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "quizID":

			out.Values[i] = ec._Submission_quizID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":

			out.Values[i] = ec._Submission_userID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startTime":

			out.Values[i] = ec._Submission_startTime(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endTime":

			out.Values[i] = ec._Submission_endTime(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "answers":

			out.Values[i] = ec._Submission_answers(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "points":

			out.Values[i] = ec._Submission_points(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "grade":

			out.Values[i] = ec._Submission_grade(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":

			out.Values[i] = ec._Submission_weight(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "feedback":

			out.Values[i] = ec._Submission_feedback(ctx, field, obj)

		case "startedAt":

			out.Values[i] = ec._Submission_startedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "completedAt":

			out.Values[i] = ec._Submission_completedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._Submission_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":

			out.Values[i] = ec._Submission_updatedAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func(ctx context.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "notificationAdded":
		return ec._Subscription_notificationAdded(ctx, fields[0])
	case "activityAdded":
		return ec._Subscription_activityAdded(ctx, fields[0])
	case "activityUpdated":
		return ec._Subscription_activityUpdated(ctx, fields[0])
	case "activityDeleted":
		return ec._Subscription_activityDeleted(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var tagImplementors = []string{"Tag"}

func (ec *executionContext) _Tag(ctx context.Context, sel ast.SelectionSet, obj *model.Tag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tag")
		case "id":

			out.Values[i] = ec._Tag_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Tag_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "postIds":

			out.Values[i] = ec._Tag_postIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "courseIds":

			out.Values[i] = ec._Tag_courseIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var targetImplementors = []string{"Target"}

func (ec *executionContext) _Target(ctx context.Context, sel ast.SelectionSet, obj *model.Target) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, targetImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Target")
		case "id":

			out.Values[i] = ec._Target_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Target_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Target_description(ctx, field, obj)

		case "dueDate":

			out.Values[i] = ec._Target_dueDate(ctx, field, obj)

		case "startDate":

			out.Values[i] = ec._Target_startDate(ctx, field, obj)

		case "courseId":

			out.Values[i] = ec._Target_courseId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "completionDate":

			out.Values[i] = ec._Target_completionDate(ctx, field, obj)

		case "isCompleted":

			out.Values[i] = ec._Target_isCompleted(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "targetType":

			out.Values[i] = ec._Target_targetType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "targetValue":

			out.Values[i] = ec._Target_targetValue(ctx, field, obj)

		case "currentValue":

			out.Values[i] = ec._Target_currentValue(ctx, field, obj)

		case "targetMetric":

			out.Values[i] = ec._Target_targetMetric(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reminders":

			out.Values[i] = ec._Target_reminders(ctx, field, obj)

		case "units":

			out.Values[i] = ec._Target_units(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "repeatInterval":

			out.Values[i] = ec._Target_repeatInterval(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "repeatEndDate":

			out.Values[i] = ec._Target_repeatEndDate(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._Target_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._Target_updatedAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tokenImplementors = []string{"Token"}

func (ec *executionContext) _Token(ctx context.Context, sel ast.SelectionSet, obj *model.Token) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tokenImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Token")
		case "token":

			out.Values[i] = ec._Token_token(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiresAt":

			out.Values[i] = ec._Token_expiresAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":

			out.Values[i] = ec._User_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firstName":

			out.Values[i] = ec._User_firstName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastName":

			out.Values[i] = ec._User_lastName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "middleName":

			out.Values[i] = ec._User_middleName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fullName":

			out.Values[i] = ec._User_fullName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":

			out.Values[i] = ec._User_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "role":

			out.Values[i] = ec._User_role(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "permissionIds":

			out.Values[i] = ec._User_permissionIds(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phone":

			out.Values[i] = ec._User_phone(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatarUrl":

			out.Values[i] = ec._User_avatarUrl(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dob":

			out.Values[i] = ec._User_dob(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gender":

			out.Values[i] = ec._User_gender(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "address":

			out.Values[i] = ec._User_address(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "city":

			out.Values[i] = ec._User_city(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "state":

			out.Values[i] = ec._User_state(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "country":

			out.Values[i] = ec._User_country(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "zip":

			out.Values[i] = ec._User_zip(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nationality":

			out.Values[i] = ec._User_nationality(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "profession":

			out.Values[i] = ec._User_profession(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "passwordSalt":

			out.Values[i] = ec._User_passwordSalt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "passwordHash":

			out.Values[i] = ec._User_passwordHash(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "permissions":

			out.Values[i] = ec._User_permissions(ctx, field, obj)

		case "username":

			out.Values[i] = ec._User_username(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isVerified":

			out.Values[i] = ec._User_isVerified(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "about":

			out.Values[i] = ec._User_about(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "wallet":

			out.Values[i] = ec._User_wallet(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timeZone":

			out.Values[i] = ec._User_timeZone(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "progress":

			out.Values[i] = ec._User_progress(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "accessToken":

			out.Values[i] = ec._User_accessToken(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refreshToken":

			out.Values[i] = ec._User_refreshToken(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "verifycationToken":

			out.Values[i] = ec._User_verifycationToken(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isAuthenticated":

			out.Values[i] = ec._User_isAuthenticated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._User_status(ctx, field, obj)

		case "matricNumber":

			out.Values[i] = ec._User_matricNumber(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "platform":

			out.Values[i] = ec._User_platform(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "program":

			out.Values[i] = ec._User_program(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "regNumber":

			out.Values[i] = ec._User_regNumber(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "files":

			out.Values[i] = ec._User_files(ctx, field, obj)

		case "courses":

			out.Values[i] = ec._User_courses(ctx, field, obj)

		case "salvationBrief":

			out.Values[i] = ec._User_salvationBrief(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "godsWorkings":

			out.Values[i] = ec._User_godsWorkings(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reason":

			out.Values[i] = ec._User_reason(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "churchName":

			out.Values[i] = ec._User_churchName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "churchAddress":

			out.Values[i] = ec._User_churchAddress(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pastorName":

			out.Values[i] = ec._User_pastorName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pastorEmail":

			out.Values[i] = ec._User_pastorEmail(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pastorPhone":

			out.Values[i] = ec._User_pastorPhone(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "churchInvolved":

			out.Values[i] = ec._User_churchInvolved(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "healthConditions":

			out.Values[i] = ec._User_healthConditions(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "healthIssueDescription":

			out.Values[i] = ec._User_healthIssueDescription(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "scholarship":

			out.Values[i] = ec._User_scholarship(ctx, field, obj)

		case "scholarshipReason":

			out.Values[i] = ec._User_scholarshipReason(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "qualifications":

			out.Values[i] = ec._User_qualifications(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "referees":

			out.Values[i] = ec._User_referees(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "notifications":

			out.Values[i] = ec._User_notifications(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":

			out.Values[i] = ec._User_createdAt(ctx, field, obj)

		case "updatedAt":

			out.Values[i] = ec._User_updatedAt(ctx, field, obj)

		case "deletedAt":

			out.Values[i] = ec._User_deletedAt(ctx, field, obj)

		case "confirmedAt":

			out.Values[i] = ec._User_confirmedAt(ctx, field, obj)

		case "confirmationMailSentAt":

			out.Values[i] = ec._User_confirmationMailSentAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userSettingImplementors = []string{"UserSetting"}

func (ec *executionContext) _UserSetting(ctx context.Context, sel ast.SelectionSet, obj *model.UserSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userSettingImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserSetting")
		case "id":

			out.Values[i] = ec._UserSetting_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":

			out.Values[i] = ec._UserSetting_userId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._UserSetting_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "key":

			out.Values[i] = ec._UserSetting_key(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":

			out.Values[i] = ec._UserSetting_value(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNActivity2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐActivity(ctx context.Context, sel ast.SelectionSet, v model.Activity) graphql.Marshaler {
	return ec._Activity(ctx, sel, &v)
}

func (ec *executionContext) marshalNActivity2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐActivityᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Activity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActivity2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐActivity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNActivityType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐActivityType(ctx context.Context, v interface{}) (model.ActivityType, error) {
	var res model.ActivityType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNActivityType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐActivityType(ctx context.Context, sel ast.SelectionSet, v model.ActivityType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAllowedModel2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAllowedModel(ctx context.Context, v interface{}) (model.AllowedModel, error) {
	var res model.AllowedModel
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAllowedModel2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAllowedModel(ctx context.Context, sel ast.SelectionSet, v model.AllowedModel) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAllowedPermission2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAllowedPermission(ctx context.Context, v interface{}) (model.AllowedPermission, error) {
	var res model.AllowedPermission
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAllowedPermission2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAllowedPermission(ctx context.Context, sel ast.SelectionSet, v model.AllowedPermission) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAllowedPermission2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAllowedPermissionᚄ(ctx context.Context, v interface{}) ([]model.AllowedPermission, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AllowedPermission, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAllowedPermission2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAllowedPermission(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNAllowedPermission2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAllowedPermissionᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AllowedPermission) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAllowedPermission2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAllowedPermission(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAnswer2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswer(ctx context.Context, sel ast.SelectionSet, v model.Answer) graphql.Marshaler {
	return ec._Answer(ctx, sel, &v)
}

func (ec *executionContext) marshalNAnswer2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Answer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAnswer2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAnswerChoice2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerChoice(ctx context.Context, sel ast.SelectionSet, v model.AnswerChoice) graphql.Marshaler {
	return ec._AnswerChoice(ctx, sel, &v)
}

func (ec *executionContext) marshalNAnswerChoice2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerChoiceᚄ(ctx context.Context, sel ast.SelectionSet, v []model.AnswerChoice) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAnswerChoice2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerChoice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNAnswerChoiceInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerChoiceInput(ctx context.Context, v interface{}) (model.AnswerChoiceInput, error) {
	res, err := ec.unmarshalInputAnswerChoiceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAnswerChoiceInput2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerChoiceInputᚄ(ctx context.Context, v interface{}) ([]model.AnswerChoiceInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AnswerChoiceInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAnswerChoiceInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerChoiceInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAnswerInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerInput(ctx context.Context, v interface{}) (model.AnswerInput, error) {
	res, err := ec.unmarshalInputAnswerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAnswerInput2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerInputᚄ(ctx context.Context, v interface{}) ([]model.AnswerInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.AnswerInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAnswerInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAnswerInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAuthUser2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐAuthUser(ctx context.Context, v interface{}) (model.AuthUser, error) {
	res, err := ec.unmarshalInputAuthUser(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBonus2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐBonus(ctx context.Context, sel ast.SelectionSet, v model.Bonus) graphql.Marshaler {
	return ec._Bonus(ctx, sel, &v)
}

func (ec *executionContext) marshalNBonus2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐBonusᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Bonus) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBonus2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐBonus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCourse2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourse(ctx context.Context, sel ast.SelectionSet, v model.Course) graphql.Marshaler {
	return ec._Course(ctx, sel, &v)
}

func (ec *executionContext) marshalNCourse2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourseᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Course) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCourse2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCourse2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourse(ctx context.Context, sel ast.SelectionSet, v *model.Course) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Course(ctx, sel, v)
}

func (ec *executionContext) marshalNCourseProgress2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourseProgress(ctx context.Context, sel ast.SelectionSet, v *model.CourseProgress) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CourseProgress(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCourseStatus2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourseStatus(ctx context.Context, v interface{}) (model.CourseStatus, error) {
	var res model.CourseStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCourseStatus2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourseStatus(ctx context.Context, sel ast.SelectionSet, v model.CourseStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCourseType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourseType(ctx context.Context, v interface{}) (model.CourseType, error) {
	var res model.CourseType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCourseType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCourseType(ctx context.Context, sel ast.SelectionSet, v model.CourseType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCreatMediaInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreatMediaInput(ctx context.Context, v interface{}) (model.CreatMediaInput, error) {
	res, err := ec.unmarshalInputCreatMediaInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateActivityInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateActivityInput(ctx context.Context, v interface{}) (model.CreateActivityInput, error) {
	res, err := ec.unmarshalInputCreateActivityInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateEvaluationCriteriaInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateEvaluationCriteriaInput(ctx context.Context, v interface{}) (model.CreateEvaluationCriteriaInput, error) {
	res, err := ec.unmarshalInputCreateEvaluationCriteriaInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateFileInput2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateFileInput(ctx context.Context, v interface{}) (*model.CreateFileInput, error) {
	res, err := ec.unmarshalInputCreateFileInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateForumCommentInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateForumCommentInput(ctx context.Context, v interface{}) (model.CreateForumCommentInput, error) {
	res, err := ec.unmarshalInputCreateForumCommentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateForumInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateForumInput(ctx context.Context, v interface{}) (model.CreateForumInput, error) {
	res, err := ec.unmarshalInputCreateForumInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateForumPostInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateForumPostInput(ctx context.Context, v interface{}) (model.CreateForumPostInput, error) {
	res, err := ec.unmarshalInputCreateForumPostInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateGradeInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateGradeInput(ctx context.Context, v interface{}) (model.CreateGradeInput, error) {
	res, err := ec.unmarshalInputCreateGradeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateNotificationInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateNotificationInput(ctx context.Context, v interface{}) (model.CreateNotificationInput, error) {
	res, err := ec.unmarshalInputCreateNotificationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateQuestionInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateQuestionInput(ctx context.Context, v interface{}) (model.CreateQuestionInput, error) {
	res, err := ec.unmarshalInputCreateQuestionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateQuestionInput2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateQuestionInputᚄ(ctx context.Context, v interface{}) ([]model.CreateQuestionInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.CreateQuestionInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCreateQuestionInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateQuestionInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCreateQuizInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateQuizInput(ctx context.Context, v interface{}) (model.CreateQuizInput, error) {
	res, err := ec.unmarshalInputCreateQuizInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTagInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateTagInput(ctx context.Context, v interface{}) (model.CreateTagInput, error) {
	res, err := ec.unmarshalInputCreateTagInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTargetInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateTargetInput(ctx context.Context, v interface{}) (model.CreateTargetInput, error) {
	res, err := ec.unmarshalInputCreateTargetInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEvaluationCriteria2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐEvaluationCriteria(ctx context.Context, sel ast.SelectionSet, v model.EvaluationCriteria) graphql.Marshaler {
	return ec._EvaluationCriteria(ctx, sel, &v)
}

func (ec *executionContext) marshalNEvaluationCriteria2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐEvaluationCriteriaᚄ(ctx context.Context, sel ast.SelectionSet, v []model.EvaluationCriteria) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEvaluationCriteria2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐEvaluationCriteria(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEvaluationCriteria2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐEvaluationCriteria(ctx context.Context, sel ast.SelectionSet, v *model.EvaluationCriteria) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EvaluationCriteria(ctx, sel, v)
}

func (ec *executionContext) marshalNFile2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐFile(ctx context.Context, sel ast.SelectionSet, v *model.File) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._File(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalNForum2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForum(ctx context.Context, sel ast.SelectionSet, v model.Forum) graphql.Marshaler {
	return ec._Forum(ctx, sel, &v)
}

func (ec *executionContext) marshalNForum2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Forum) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNForum2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNForum2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForum(ctx context.Context, sel ast.SelectionSet, v *model.Forum) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Forum(ctx, sel, v)
}

func (ec *executionContext) marshalNForumComment2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumComment(ctx context.Context, sel ast.SelectionSet, v model.ForumComment) graphql.Marshaler {
	return ec._ForumComment(ctx, sel, &v)
}

func (ec *executionContext) marshalNForumComment2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumCommentᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ForumComment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNForumComment2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNForumComment2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumComment(ctx context.Context, sel ast.SelectionSet, v *model.ForumComment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ForumComment(ctx, sel, v)
}

func (ec *executionContext) marshalNForumPost2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumPost(ctx context.Context, sel ast.SelectionSet, v model.ForumPost) graphql.Marshaler {
	return ec._ForumPost(ctx, sel, &v)
}

func (ec *executionContext) marshalNForumPost2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumPostᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ForumPost) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNForumPost2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumPost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNForumPost2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumPost(ctx context.Context, sel ast.SelectionSet, v *model.ForumPost) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ForumPost(ctx, sel, v)
}

func (ec *executionContext) marshalNGlobalSetting2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGlobalSetting(ctx context.Context, sel ast.SelectionSet, v model.GlobalSetting) graphql.Marshaler {
	return ec._GlobalSetting(ctx, sel, &v)
}

func (ec *executionContext) marshalNGlobalSetting2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGlobalSettingᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GlobalSetting) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGlobalSetting2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGlobalSetting(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGlobalSetting2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGlobalSetting(ctx context.Context, sel ast.SelectionSet, v *model.GlobalSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GlobalSetting(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGlobalSettingKeys2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGlobalSettingKeys(ctx context.Context, v interface{}) (model.GlobalSettingKeys, error) {
	var res model.GlobalSettingKeys
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGlobalSettingKeys2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGlobalSettingKeys(ctx context.Context, sel ast.SelectionSet, v model.GlobalSettingKeys) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNGrade2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGrade(ctx context.Context, sel ast.SelectionSet, v model.Grade) graphql.Marshaler {
	return ec._Grade(ctx, sel, &v)
}

func (ec *executionContext) marshalNGrade2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGradeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Grade) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGrade2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGrade(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGradeScale2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGradeScale(ctx context.Context, sel ast.SelectionSet, v model.GradeScale) graphql.Marshaler {
	return ec._GradeScale(ctx, sel, &v)
}

func (ec *executionContext) marshalNGradeScale2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGradeScaleᚄ(ctx context.Context, sel ast.SelectionSet, v []model.GradeScale) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGradeScale2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGradeScale(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt642int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt642int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNMatchingPair2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMatchingPair(ctx context.Context, sel ast.SelectionSet, v model.MatchingPair) graphql.Marshaler {
	return ec._MatchingPair(ctx, sel, &v)
}

func (ec *executionContext) marshalNMatchingPair2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMatchingPairᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MatchingPair) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMatchingPair2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMatchingPair(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNMatchingPairInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMatchingPairInput(ctx context.Context, v interface{}) (model.MatchingPairInput, error) {
	res, err := ec.unmarshalInputMatchingPairInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMatchingPairInput2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMatchingPairInputᚄ(ctx context.Context, v interface{}) ([]model.MatchingPairInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.MatchingPairInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMatchingPairInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMatchingPairInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNMedia2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMedia(ctx context.Context, sel ast.SelectionSet, v model.Media) graphql.Marshaler {
	return ec._Media(ctx, sel, &v)
}

func (ec *executionContext) marshalNMedia2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMediaᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Media) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMedia2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMedia(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNMediaType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMediaType(ctx context.Context, v interface{}) (model.MediaType, error) {
	var res model.MediaType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMediaType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMediaType(ctx context.Context, sel ast.SelectionSet, v model.MediaType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNNewQualification2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNewQualification(ctx context.Context, v interface{}) (model.NewQualification, error) {
	res, err := ec.unmarshalInputNewQualification(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewReferee2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNewReferee(ctx context.Context, v interface{}) (model.NewReferee, error) {
	res, err := ec.unmarshalInputNewReferee(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewSetting2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNewSetting(ctx context.Context, v interface{}) (model.NewSetting, error) {
	res, err := ec.unmarshalInputNewSetting(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewUser2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNewUser(ctx context.Context, v interface{}) (model.NewUser, error) {
	res, err := ec.unmarshalInputNewUser(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNotification2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNotification(ctx context.Context, sel ast.SelectionSet, v model.Notification) graphql.Marshaler {
	return ec._Notification(ctx, sel, &v)
}

func (ec *executionContext) marshalNNotification2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNotificationᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Notification) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNotification2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNotification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNNotification2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNotification(ctx context.Context, sel ast.SelectionSet, v *model.Notification) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Notification(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNotificationType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNotificationType(ctx context.Context, v interface{}) (model.NotificationType, error) {
	var res model.NotificationType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNotificationType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐNotificationType(ctx context.Context, sel ast.SelectionSet, v model.NotificationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPenalty2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPenalty(ctx context.Context, sel ast.SelectionSet, v model.Penalty) graphql.Marshaler {
	return ec._Penalty(ctx, sel, &v)
}

func (ec *executionContext) marshalNPenalty2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPenaltyᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Penalty) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPenalty2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPenalty(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPermission2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPermission(ctx context.Context, sel ast.SelectionSet, v model.Permission) graphql.Marshaler {
	return ec._Permission(ctx, sel, &v)
}

func (ec *executionContext) marshalNPermission2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPermissionᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Permission) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPermission2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPermission(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNPermissionInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPermissionInput(ctx context.Context, v interface{}) (model.PermissionInput, error) {
	res, err := ec.unmarshalInputPermissionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProctoringMethod2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐProctoringMethod(ctx context.Context, v interface{}) (model.ProctoringMethod, error) {
	var res model.ProctoringMethod
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProctoringMethod2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐProctoringMethod(ctx context.Context, sel ast.SelectionSet, v model.ProctoringMethod) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNProgramType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐProgramType(ctx context.Context, v interface{}) (model.ProgramType, error) {
	var res model.ProgramType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProgramType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐProgramType(ctx context.Context, sel ast.SelectionSet, v model.ProgramType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNQualification2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQualification(ctx context.Context, sel ast.SelectionSet, v model.Qualification) graphql.Marshaler {
	return ec._Qualification(ctx, sel, &v)
}

func (ec *executionContext) marshalNQualification2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQualificationᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Qualification) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQualification2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQualification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNQuestion2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuestion(ctx context.Context, sel ast.SelectionSet, v model.Question) graphql.Marshaler {
	return ec._Question(ctx, sel, &v)
}

func (ec *executionContext) marshalNQuestion2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuestionᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Question) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQuestion2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuestion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNQuestion2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuestion(ctx context.Context, sel ast.SelectionSet, v *model.Question) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Question(ctx, sel, v)
}

func (ec *executionContext) unmarshalNQuestionType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuestionType(ctx context.Context, v interface{}) (model.QuestionType, error) {
	var res model.QuestionType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNQuestionType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuestionType(ctx context.Context, sel ast.SelectionSet, v model.QuestionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNQuiz2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuiz(ctx context.Context, sel ast.SelectionSet, v model.Quiz) graphql.Marshaler {
	return ec._Quiz(ctx, sel, &v)
}

func (ec *executionContext) marshalNQuiz2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuizᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Quiz) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQuiz2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuiz(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNQuiz2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuiz(ctx context.Context, sel ast.SelectionSet, v *model.Quiz) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Quiz(ctx, sel, v)
}

func (ec *executionContext) unmarshalNQuizType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuizType(ctx context.Context, v interface{}) (model.QuizType, error) {
	var res model.QuizType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNQuizType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuizType(ctx context.Context, sel ast.SelectionSet, v model.QuizType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNReferee2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐReferee(ctx context.Context, sel ast.SelectionSet, v model.Referee) graphql.Marshaler {
	return ec._Referee(ctx, sel, &v)
}

func (ec *executionContext) marshalNReferee2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐRefereeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Referee) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReferee2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐReferee(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNRegistrationStatus2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐRegistrationStatus(ctx context.Context, v interface{}) (model.RegistrationStatus, error) {
	var res model.RegistrationStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRegistrationStatus2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐRegistrationStatus(ctx context.Context, sel ast.SelectionSet, v model.RegistrationStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRepeatInterval2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐRepeatInterval(ctx context.Context, v interface{}) (model.RepeatInterval, error) {
	var res model.RepeatInterval
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRepeatInterval2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐRepeatInterval(ctx context.Context, sel ast.SelectionSet, v model.RepeatInterval) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNResubmissionPolicy2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐResubmissionPolicy(ctx context.Context, v interface{}) (model.ResubmissionPolicy, error) {
	var res model.ResubmissionPolicy
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNResubmissionPolicy2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐResubmissionPolicy(ctx context.Context, sel ast.SelectionSet, v model.ResubmissionPolicy) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRole2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐRole(ctx context.Context, v interface{}) (model.Role, error) {
	var res model.Role
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRole2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐRole(ctx context.Context, sel ast.SelectionSet, v model.Role) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNScoreDistribution2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐScoreDistribution(ctx context.Context, sel ast.SelectionSet, v model.ScoreDistribution) graphql.Marshaler {
	return ec._ScoreDistribution(ctx, sel, &v)
}

func (ec *executionContext) marshalNScoreDistribution2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐScoreDistributionᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ScoreDistribution) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNScoreDistribution2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐScoreDistribution(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNSettingType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSettingType(ctx context.Context, v interface{}) (model.SettingType, error) {
	var res model.SettingType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSettingType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSettingType(ctx context.Context, sel ast.SelectionSet, v model.SettingType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSubmission2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSubmission(ctx context.Context, sel ast.SelectionSet, v model.Submission) graphql.Marshaler {
	return ec._Submission(ctx, sel, &v)
}

func (ec *executionContext) marshalNSubmission2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSubmissionᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Submission) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSubmission2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSubmission(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSubmission2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSubmission(ctx context.Context, sel ast.SelectionSet, v *model.Submission) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Submission(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSubmissionInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSubmissionInput(ctx context.Context, v interface{}) (model.SubmissionInput, error) {
	res, err := ec.unmarshalInputSubmissionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSubmissionInput2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSubmissionInput(ctx context.Context, v interface{}) (*model.SubmissionInput, error) {
	res, err := ec.unmarshalInputSubmissionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTag2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTag(ctx context.Context, sel ast.SelectionSet, v model.Tag) graphql.Marshaler {
	return ec._Tag(ctx, sel, &v)
}

func (ec *executionContext) marshalNTag2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTag(ctx context.Context, sel ast.SelectionSet, v *model.Tag) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Tag(ctx, sel, v)
}

func (ec *executionContext) marshalNTarget2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTarget(ctx context.Context, sel ast.SelectionSet, v model.Target) graphql.Marshaler {
	return ec._Target(ctx, sel, &v)
}

func (ec *executionContext) marshalNTarget2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTargetᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Target) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTarget2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTarget(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTarget2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTarget(ctx context.Context, sel ast.SelectionSet, v *model.Target) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Target(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTargetType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTargetType(ctx context.Context, v interface{}) (model.TargetType, error) {
	var res model.TargetType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTargetType2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTargetType(ctx context.Context, sel ast.SelectionSet, v model.TargetType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNToken2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐToken(ctx context.Context, sel ast.SelectionSet, v *model.Token) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Token(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateActivityInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateActivityInput(ctx context.Context, v interface{}) (model.UpdateActivityInput, error) {
	res, err := ec.unmarshalInputUpdateActivityInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateEvaluationCriteriaInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateEvaluationCriteriaInput(ctx context.Context, v interface{}) (model.UpdateEvaluationCriteriaInput, error) {
	res, err := ec.unmarshalInputUpdateEvaluationCriteriaInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateFileInput2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateFileInput(ctx context.Context, v interface{}) (*model.UpdateFileInput, error) {
	res, err := ec.unmarshalInputUpdateFileInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateForumCommentInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateForumCommentInput(ctx context.Context, v interface{}) (model.UpdateForumCommentInput, error) {
	res, err := ec.unmarshalInputUpdateForumCommentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateForumInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateForumInput(ctx context.Context, v interface{}) (model.UpdateForumInput, error) {
	res, err := ec.unmarshalInputUpdateForumInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateForumPostInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateForumPostInput(ctx context.Context, v interface{}) (model.UpdateForumPostInput, error) {
	res, err := ec.unmarshalInputUpdateForumPostInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateGradeInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateGradeInput(ctx context.Context, v interface{}) (model.UpdateGradeInput, error) {
	res, err := ec.unmarshalInputUpdateGradeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateMediaInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateMediaInput(ctx context.Context, v interface{}) (model.UpdateMediaInput, error) {
	res, err := ec.unmarshalInputUpdateMediaInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateNotificationInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateNotificationInput(ctx context.Context, v interface{}) (model.UpdateNotificationInput, error) {
	res, err := ec.unmarshalInputUpdateNotificationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateQuestionInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateQuestionInput(ctx context.Context, v interface{}) (model.UpdateQuestionInput, error) {
	res, err := ec.unmarshalInputUpdateQuestionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateQuizInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateQuizInput(ctx context.Context, v interface{}) (model.UpdateQuizInput, error) {
	res, err := ec.unmarshalInputUpdateQuizInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateQuizInput2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateQuizInput(ctx context.Context, v interface{}) (*model.UpdateQuizInput, error) {
	res, err := ec.unmarshalInputUpdateQuizInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSetting2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateSetting(ctx context.Context, v interface{}) (model.UpdateSetting, error) {
	res, err := ec.unmarshalInputUpdateSetting(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTagInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateTagInput(ctx context.Context, v interface{}) (model.UpdateTagInput, error) {
	res, err := ec.unmarshalInputUpdateTagInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTargetInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateTargetInput(ctx context.Context, v interface{}) (model.UpdateTargetInput, error) {
	res, err := ec.unmarshalInputUpdateTargetInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUser2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v model.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []model.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUserSetting2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUserSetting(ctx context.Context, sel ast.SelectionSet, v model.UserSetting) graphql.Marshaler {
	return ec._UserSetting(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserSetting2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUserSettingᚄ(ctx context.Context, sel ast.SelectionSet, v []model.UserSetting) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserSetting2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUserSetting(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserSetting2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUserSetting(ctx context.Context, sel ast.SelectionSet, v *model.UserSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserSetting(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserSettingKeys2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUserSettingKeys(ctx context.Context, v interface{}) (model.UserSettingKeys, error) {
	var res model.UserSettingKeys
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserSettingKeys2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUserSettingKeys(ctx context.Context, sel ast.SelectionSet, v model.UserSettingKeys) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOActivity2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐActivity(ctx context.Context, sel ast.SelectionSet, v *model.Activity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Activity(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOCreateCourseInput2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐCreateCourseInput(ctx context.Context, v interface{}) (*model.CreateCourseInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCreateCourseInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEvaluationCriteria2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐEvaluationCriteria(ctx context.Context, sel ast.SelectionSet, v *model.EvaluationCriteria) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EvaluationCriteria(ctx, sel, v)
}

func (ec *executionContext) marshalOForum2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForum(ctx context.Context, sel ast.SelectionSet, v *model.Forum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Forum(ctx, sel, v)
}

func (ec *executionContext) marshalOForumComment2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumComment(ctx context.Context, sel ast.SelectionSet, v *model.ForumComment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ForumComment(ctx, sel, v)
}

func (ec *executionContext) marshalOForumPost2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐForumPost(ctx context.Context, sel ast.SelectionSet, v *model.ForumPost) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ForumPost(ctx, sel, v)
}

func (ec *executionContext) unmarshalOGlobalSettingKeys2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGlobalSettingKeys(ctx context.Context, v interface{}) (*model.GlobalSettingKeys, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.GlobalSettingKeys)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGlobalSettingKeys2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGlobalSettingKeys(ctx context.Context, sel ast.SelectionSet, v *model.GlobalSettingKeys) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOGrade2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐGrade(ctx context.Context, sel ast.SelectionSet, v *model.Grade) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Grade(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOID2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOID2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOMedia2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐMedia(ctx context.Context, sel ast.SelectionSet, v *model.Media) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Media(ctx, sel, v)
}

func (ec *executionContext) marshalOPermission2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPermission(ctx context.Context, sel ast.SelectionSet, v *model.Permission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Permission(ctx, sel, v)
}

func (ec *executionContext) marshalOPlayerInfo2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPlayerInfo(ctx context.Context, sel ast.SelectionSet, v *model.PlayerInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PlayerInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPlayerInfoInput2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐPlayerInfoInput(ctx context.Context, v interface{}) (*model.PlayerInfoInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPlayerInfoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOQualification2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQualification(ctx context.Context, sel ast.SelectionSet, v *model.Qualification) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Qualification(ctx, sel, v)
}

func (ec *executionContext) marshalOQuiz2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐQuiz(ctx context.Context, sel ast.SelectionSet, v *model.Quiz) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Quiz(ctx, sel, v)
}

func (ec *executionContext) marshalOReferee2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐReferee(ctx context.Context, sel ast.SelectionSet, v *model.Referee) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Referee(ctx, sel, v)
}

func (ec *executionContext) unmarshalORegistrationStatus2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐRegistrationStatus(ctx context.Context, v interface{}) (*model.RegistrationStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.RegistrationStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORegistrationStatus2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐRegistrationStatus(ctx context.Context, sel ast.SelectionSet, v *model.RegistrationStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOReminder2ᚕᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐReminder(ctx context.Context, sel ast.SelectionSet, v []*model.Reminder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReminder2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐReminder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOReminder2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐReminder(ctx context.Context, sel ast.SelectionSet, v *model.Reminder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Reminder(ctx, sel, v)
}

func (ec *executionContext) unmarshalOResubmissionPolicy2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐResubmissionPolicy(ctx context.Context, v interface{}) (*model.ResubmissionPolicy, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ResubmissionPolicy)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOResubmissionPolicy2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐResubmissionPolicy(ctx context.Context, sel ast.SelectionSet, v *model.ResubmissionPolicy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOSubmission2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐSubmission(ctx context.Context, sel ast.SelectionSet, v *model.Submission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Submission(ctx, sel, v)
}

func (ec *executionContext) marshalOTarget2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTarget(ctx context.Context, sel ast.SelectionSet, v *model.Target) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Target(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTargetType2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTargetType(ctx context.Context, v interface{}) (*model.TargetType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.TargetType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTargetType2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐTargetType(ctx context.Context, sel ast.SelectionSet, v *model.TargetType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) unmarshalOUpdateProspective2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateProspective(ctx context.Context, v interface{}) (*model.UpdateProspective, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdateProspective(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUpdateQuestionInput2ᚕgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateQuestionInputᚄ(ctx context.Context, v interface{}) ([]model.UpdateQuestionInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.UpdateQuestionInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUpdateQuestionInput2githubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUpdateQuestionInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUser2ᚕᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v []*model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserSettingKeys2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUserSettingKeys(ctx context.Context, v interface{}) (*model.UserSettingKeys, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.UserSettingKeys)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserSettingKeys2ᚖgithubᚗcomᚋcavelmsᚋinternalᚋmodelᚐUserSettingKeys(ctx context.Context, sel ast.SelectionSet, v *model.UserSettingKeys) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
