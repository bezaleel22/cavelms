# GraphQL schema example
#
# https://gqlgen.com/getting-started/
type User {
  id: String!
  firstName: String!
  lastName: String!
  middleName: String!
  fullName: String!
  email: String!
  role: Role!
  permissionIds: [ID!]!
  phone: String!
  avatarUrl: String!
  dob: String!
  gender: String!
  address: String!
  city: String!
  state: String!
  country: String!
  zip: String!
  nationality: String!
  profession: String!
  passwordSalt: String!
  passwordHash: String! @goTag(key: "json", value: "-")
  permissions: [String]
  username: String!
  isVerified: Boolean!
  about: String!
  wallet: Float!
  timeZone: String!
  progress: Int!
  accessToken: Token!
  refreshToken: Token!
  verifycationToken: Token!
  isAuthenticated: Boolean!
  status: RegistrationStatus

  # School Data
  matricNumber: String!
  platform: String!
  program: String!
  regNumber: String!
  files: [ID!]
  courses: [ID!]

  # Spiritual Background
  salvationBrief: String!
  godsWorkings: String!
  reason: String!
  churchName: String!
  churchAddress: String!
  pastorName: String!
  pastorEmail: String!
  pastorPhone: String!
  churchInvolved: String!

  # Health Information
  healthConditions: String!
  healthIssueDescription: String!

  scholarship: Boolean
  scholarshipReason: String!

  qualifications: [Qualification!]!
  referees: [Referee!]!
  notifications: [Notification!]!

  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  confirmedAt: Time
  confirmationMailSentAt: Time
}

enum RegistrationStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
  REJECTED
}

input UpdateProspective {
  firstName: String
  lastName: String
  email: String
  dob: String
  phone: String
  address: String
  city: String
  state: String
  country: String
  zip: String
  nationality: String
  platform: String
  program: String
  salvationBrief: String!
  godsWorkings: [String!]
  reason: String!
  churchName: String!
  churchAddress: String
  pastorName: String
  pastorEmail: String
  pastorPhone: String
  churchInvolved: String
  healthConditions: [String]
  healthIssueDescription: String
  status: RegistrationStatus!
}

type Qualification {
  id: ID!
  degree: String!
  institution: String!
  graduationYear: String!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

input NewQualification {
  degree: String!
  institution: String!
  graduationYear: String!
}

type Referee {
  id: ID!
  fullName: String!
  email: String!
  phone: String!
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
}

input NewReferee {
  userId: ID!
  fullName: String!
  email: String!
  phone: String!
}

input VerifyInput {
  email: String!
  password: String
  code: String!
  resend: Boolean
}

extend type Query {
  users: [User]
  user(id: ID!): User
}

extend type Mutation {
  createUser(input: NewUser!): User
  createReferee(userId: ID!, input: NewReferee!): Referee
  createQualification(userId: ID!, input: NewQualification!): Qualification
  updateUser(input: Any): User
  updateProspective(input: UpdateProspective): User
  deleteUser(id: ID!): User
  deleteManyUsers(ids: [ID!]): User
}
