// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Activity struct {
	ID              string       `json:"id" bson:"_id"`
	UserID          string       `json:"userID" bson:"userID,omitempty"`
	CourseID        string       `json:"courseID" bson:"courseID,omitempty"`
	CourseContentID *string      `json:"courseContentID" bson:"courseContentID,omitempty"`
	ActivityType    ActivityType `json:"activityType" bson:"activityType,omitempty"`
	CreatedAt       *time.Time   `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt       *time.Time   `json:"updatedAt" bson:"updatedAt,omitempty"`
	DeletedAt       *time.Time   `json:"deletedAt" bson:"deletedAt,omitempty"`
}

type Answer struct {
	ID            string         `json:"id" bson:"_id"`
	QuestionID    string         `json:"questionId" bson:"questionId,omitempty"`
	Choices       []AnswerChoice `json:"choices" bson:"choices,omitempty"`
	Value         string         `json:"value" bson:"value,omitempty"`
	IsCorrect     bool           `json:"isCorrect" bson:"isCorrect,omitempty"`
	Weight        int            `json:"weight" bson:"weight,omitempty"`
	PointsAwarded int            `json:"pointsAwarded" bson:"pointsAwarded,omitempty"`
	Feedback      string         `json:"feedback" bson:"feedback,omitempty"`
	CreatedAt     time.Time      `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt     time.Time      `json:"updatedAt" bson:"updatedAt,omitempty"`
}

type AnswerChoice struct {
	ID        string `json:"id" bson:"_id"`
	Text      string `json:"text" bson:"text,omitempty"`
	IsCorrect bool   `json:"isCorrect" bson:"isCorrect,omitempty"`
	Feedback  string `json:"feedback" bson:"feedback,omitempty"`
	Weight    int    `json:"weight" bson:"weight,omitempty"`
}

type AnswerChoiceInput struct {
	ID        string `json:"id" bson:"_id"`
	Text      string `json:"text" bson:"text,omitempty"`
	IsCorrect bool   `json:"isCorrect" bson:"isCorrect,omitempty"`
	Feedback  string `json:"feedback" bson:"feedback,omitempty"`
	Weight    int    `json:"weight" bson:"weight,omitempty"`
}

type AnswerInput struct {
	Submission    *SubmissionInput    `json:"submission" bson:"submission,omitempty"`
	QuestionID    string              `json:"questionId" bson:"questionId,omitempty"`
	Choices       []AnswerChoiceInput `json:"choices" bson:"choices,omitempty"`
	Value         string              `json:"value" bson:"value,omitempty"`
	IsCorrect     bool                `json:"isCorrect" bson:"isCorrect,omitempty"`
	Weight        int                 `json:"weight" bson:"weight,omitempty"`
	PointsAwarded int                 `json:"pointsAwarded" bson:"pointsAwarded,omitempty"`
	Feedback      string              `json:"feedback" bson:"feedback,omitempty"`
}

type AuthUser struct {
	Email    string `json:"email" bson:"email,omitempty"`
	Password string `json:"password" bson:"password,omitempty"`
}

type Bonus struct {
	ID          string `json:"id" bson:"_id"`
	Name        string `json:"name" bson:"name,omitempty"`
	Description string `json:"description" bson:"description,omitempty"`
	Percentage  int    `json:"percentage" bson:"percentage,omitempty"`
}

type Claims struct {
	ID     string `json:"id" bson:"_id"`
	UserID string `json:"userId" bson:"userId,omitempty"`
	Email  string `json:"email" bson:"email,omitempty"`
	Role   string `json:"Role" bson:"Role,omitempty"`
}

type Course struct {
	ID               string          `json:"id" bson:"_id"`
	UserID           string          `json:"userId" bson:"userId,omitempty"`
	Code             string          `json:"code" bson:"code,omitempty"`
	Title            string          `json:"title" bson:"title,omitempty"`
	ShortDescription string          `json:"shortDescription" bson:"shortDescription,omitempty"`
	Description      *string         `json:"description" bson:"description,omitempty"`
	Semester         string          `json:"semester" bson:"semester,omitempty"`
	Year             string          `json:"year" bson:"year,omitempty"`
	StartDate        *time.Time      `json:"startDate" bson:"startDate,omitempty"`
	EndDate          *time.Time      `json:"endDate" bson:"endDate,omitempty"`
	MatricNumber     string          `json:"matricNumber" bson:"matricNumber,omitempty"`
	CoverImageURL    *string         `json:"coverImageUrl" bson:"coverImageUrl,omitempty"`
	Type             CourseType      `json:"type" bson:"type,omitempty"`
	Status           CourseStatus    `json:"status" bson:"status,omitempty"`
	Progress         *CourseProgress `json:"progress" bson:"progress,omitempty"`
	ProgramType      ProgramType     `json:"programType" bson:"programType,omitempty"`
	InstructorIds    []string        `json:"instructorIds" bson:"instructorIds,omitempty"`
	Students         []User          `json:"students" bson:"students,omitempty"`
	AssignmentIds    []string        `json:"assignmentIds" bson:"assignmentIds,omitempty"`
	QuizzeIds        []string        `json:"quizzeIds" bson:"quizzeIds,omitempty"`
	ForumID          string          `json:"forumId" bson:"forumId,omitempty"`
	ActivityIds      []string        `json:"activityIds" bson:"activityIds,omitempty"`
	GradeIds         []string        `json:"gradeIds" bson:"gradeIds,omitempty"`
	CreatedAt        *time.Time      `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt        *time.Time      `json:"updatedAt" bson:"updatedAt,omitempty"`
	DeletedAt        *time.Time      `json:"deletedAt" bson:"deletedAt,omitempty"`
}

type CourseProgress struct {
	LecturesCompleted    int `json:"lecturesCompleted" bson:"lecturesCompleted,omitempty"`
	AssignmentsCompleted int `json:"assignmentsCompleted" bson:"assignmentsCompleted,omitempty"`
	QuizzesCompleted     int `json:"quizzesCompleted" bson:"quizzesCompleted,omitempty"`
	OverallProgress      int `json:"overallProgress" bson:"overallProgress,omitempty"`
}

type CreatMediaInput struct {
	UserID      string           `json:"userId" bson:"userId,omitempty"`
	CourseID    string           `json:"courseID" bson:"courseID,omitempty"`
	Title       string           `json:"title" bson:"title,omitempty"`
	Description *string          `json:"description" bson:"description,omitempty"`
	Category    string           `json:"category" bson:"category,omitempty"`
	MediaType   MediaType        `json:"mediaType" bson:"mediaType,omitempty"`
	File        *CreateFileInput `json:"file" bson:"file,omitempty"`
}

type CreateActivityInput struct {
	UserID          string       `json:"userID" bson:"userID,omitempty"`
	CourseID        string       `json:"courseID" bson:"courseID,omitempty"`
	CourseContentID *string      `json:"courseContentID" bson:"courseContentID,omitempty"`
	ActivityType    ActivityType `json:"activityType" bson:"activityType,omitempty"`
}

type CreateCourseInput struct {
	Code             string       `json:"code" bson:"code,omitempty"`
	Title            string       `json:"title" bson:"title,omitempty"`
	UserID           string       `json:"userId" bson:"userId,omitempty"`
	ShortDescription string       `json:"shortDescription" bson:"shortDescription,omitempty"`
	Description      *string      `json:"description" bson:"description,omitempty"`
	Semester         string       `json:"semester" bson:"semester,omitempty"`
	StartDate        *time.Time   `json:"startDate" bson:"startDate,omitempty"`
	EndDate          *time.Time   `json:"endDate" bson:"endDate,omitempty"`
	CoverImageURL    *string      `json:"coverImageUrl" bson:"coverImageUrl,omitempty"`
	Type             CourseType   `json:"type" bson:"type,omitempty"`
	Status           CourseStatus `json:"status" bson:"status,omitempty"`
	ProgramType      ProgramType  `json:"programType" bson:"programType,omitempty"`
	InstructorIds    []string     `json:"instructorIds" bson:"instructorIds,omitempty"`
}

type CreateEvaluationCriteriaInput struct {
	PassingScore       int                 `json:"passingScore" bson:"passingScore,omitempty"`
	Weight             int                 `json:"weight" bson:"weight,omitempty"`
	ResubmissionPolicy *ResubmissionPolicy `json:"resubmissionPolicy" bson:"resubmissionPolicy,omitempty"`
	IsPassFail         bool                `json:"isPassFail" bson:"isPassFail,omitempty"`
	QuizID             string              `json:"quizId" bson:"quizId,omitempty"`
}

type CreateFileInput struct {
	Name     string `json:"name" bson:"name,omitempty"`
	MimeType string `json:"mimeType" bson:"mimeType,omitempty"`
	Size     int    `json:"size" bson:"size,omitempty"`
	URL      string `json:"url" bson:"url,omitempty"`
}

type CreateForumCommentInput struct {
	UserID   string   `json:"userId" bson:"userId,omitempty"`
	ParentID string   `json:"parentId" bson:"parentId,omitempty"`
	Content  string   `json:"content" bson:"content,omitempty"`
	CourseID string   `json:"courseId" bson:"courseId,omitempty"`
	PostID   string   `json:"postId" bson:"postId,omitempty"`
	Files    []string `json:"files" bson:"files,omitempty"`
}

type CreateForumInput struct {
	Name        string   `json:"name" bson:"name,omitempty"`
	Description *string  `json:"description" bson:"description,omitempty"`
	CourseID    string   `json:"courseId" bson:"courseId,omitempty"`
	Tags        []string `json:"tags" bson:"tags,omitempty"`
}

type CreateForumPostInput struct {
	Title    string   `json:"title" bson:"title,omitempty"`
	Content  string   `json:"content" bson:"content,omitempty"`
	CourseID string   `json:"courseId" bson:"courseId,omitempty"`
	ForumID  string   `json:"forumId" bson:"forumId,omitempty"`
	UserID   string   `json:"userId" bson:"userId,omitempty"`
	Tags     []string `json:"tags" bson:"tags,omitempty"`
	Files    []string `json:"files" bson:"files,omitempty"`
}

type CreateGradeInput struct {
	CourseID  string `json:"courseId" bson:"courseId,omitempty"`
	StudentID string `json:"studentId" bson:"studentId,omitempty"`
	QuizID    string `json:"quizId" bson:"quizId,omitempty"`
	Value     int    `json:"value" bson:"value,omitempty"`
	Criteria  string `json:"criteria" bson:"criteria,omitempty"`
	Comments  string `json:"comments" bson:"comments,omitempty"`
}

type CreateNotificationInput struct {
	SenderID    string           `json:"senderId" bson:"senderId,omitempty"`
	RecipientID string           `json:"recipientId" bson:"recipientId,omitempty"`
	CourseID    string           `json:"courseId" bson:"courseId,omitempty"`
	Text        string           `json:"text" bson:"text,omitempty"`
	Title       string           `json:"title" bson:"title,omitempty"`
	Type        NotificationType `json:"type" bson:"type,omitempty"`
	Link        *string          `json:"link" bson:"link,omitempty"`
}

type CreateQuestionInput struct {
	Type          QuestionType        `json:"type" bson:"type,omitempty"`
	Text          string              `json:"text" bson:"text,omitempty"`
	Choices       []AnswerChoiceInput `json:"choices" bson:"choices,omitempty"`
	CorrectAnswer string              `json:"correctAnswer" bson:"correctAnswer,omitempty"`
	Feedback      string              `json:"feedback" bson:"feedback,omitempty"`
	Hints         []string            `json:"hints" bson:"hints,omitempty"`
	Randomize     bool                `json:"randomize" bson:"randomize,omitempty"`
	PointValue    int                 `json:"pointValue" bson:"pointValue,omitempty"`
	Categories    []string            `json:"categories" bson:"categories,omitempty"`
	MatchingPairs []MatchingPairInput `json:"matchingPairs" bson:"matchingPairs,omitempty"`
}

type CreateQuizInput struct {
	Name             string                `json:"name" bson:"name,omitempty"`
	TimeLimit        int                   `json:"timeLimit" bson:"timeLimit,omitempty"`
	ShuffleQuestions bool                  `json:"shuffleQuestions" bson:"shuffleQuestions,omitempty"`
	Categories       []string              `json:"categories" bson:"categories,omitempty"`
	Questions        []CreateQuestionInput `json:"questions" bson:"questions,omitempty"`
}

type CreateTagInput struct {
	Name string `json:"name" bson:"name,omitempty"`
}

type CreateTargetInput struct {
	Name         string      `json:"name" bson:"name,omitempty"`
	Description  *string     `json:"description" bson:"description,omitempty"`
	StartDate    *time.Time  `json:"startDate" bson:"startDate,omitempty"`
	EndDate      *time.Time  `json:"endDate" bson:"endDate,omitempty"`
	CourseID     string      `json:"courseId" bson:"courseId,omitempty"`
	TargetType   *TargetType `json:"targetType" bson:"targetType,omitempty"`
	TargetMetric string      `json:"targetMetric" bson:"targetMetric,omitempty"`
	TargetValue  int         `json:"targetValue" bson:"targetValue,omitempty"`
	Units        *string     `json:"units" bson:"units,omitempty"`
}

type EvaluationCriteria struct {
	ID                 string              `json:"id" bson:"_id"`
	PassingScore       int                 `json:"passingScore" bson:"passingScore,omitempty"`
	ScoreDistribution  []ScoreDistribution `json:"scoreDistribution" bson:"scoreDistribution,omitempty"`
	GradingScale       []GradeScale        `json:"gradingScale" bson:"gradingScale,omitempty"`
	Weight             int                 `json:"weight" bson:"weight,omitempty"`
	Penalties          []Penalty           `json:"penalties" bson:"penalties,omitempty"`
	Bonuses            []Bonus             `json:"bonuses" bson:"bonuses,omitempty"`
	ResubmissionPolicy ResubmissionPolicy  `json:"resubmissionPolicy" bson:"resubmissionPolicy,omitempty"`
	IsPassFail         bool                `json:"isPassFail" bson:"isPassFail,omitempty"`
	QuizID             string              `json:"quizId" bson:"quizId,omitempty"`
	CreatedAt          *time.Time          `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt          *time.Time          `json:"updatedAt" bson:"updatedAt,omitempty"`
	DeletedAt          *time.Time          `json:"deletedAt" bson:"deletedAt,omitempty"`
}

type File struct {
	Name     string `json:"name" bson:"name,omitempty"`
	Mimetype string `json:"mimetype" bson:"mimetype,omitempty"`
	Encoding string `json:"encoding" bson:"encoding,omitempty"`
	Size     int    `json:"size" bson:"size,omitempty"`
	URL      string `json:"url" bson:"url,omitempty"`
}

type Forum struct {
	ID          string     `json:"id" bson:"_id"`
	Name        string     `json:"name" bson:"name,omitempty"`
	Description *string    `json:"description" bson:"description,omitempty"`
	CourseID    string     `json:"courseId" bson:"courseId,omitempty"`
	PostIds     []string   `json:"postIds" bson:"postIds,omitempty"`
	TagIds      []string   `json:"tagIds" bson:"tagIds,omitempty"`
	CreatedAt   *time.Time `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt   *time.Time `json:"updatedAt" bson:"updatedAt,omitempty"`
	DeletedAt   *time.Time `json:"deletedAt" bson:"deletedAt,omitempty"`
}

type ForumComment struct {
	ID        string     `json:"id" bson:"_id"`
	Content   string     `json:"content" bson:"content,omitempty"`
	CourseID  string     `json:"courseId" bson:"courseId,omitempty"`
	UserID    string     `json:"userId" bson:"userId,omitempty"`
	PostID    string     `json:"postId" bson:"postId,omitempty"`
	ParentID  string     `json:"parentId" bson:"parentId,omitempty"`
	FileIds   []string   `json:"fileIds" bson:"fileIds,omitempty"`
	Upvotes   int        `json:"upvotes" bson:"upvotes,omitempty"`
	Downvotes int        `json:"downvotes" bson:"downvotes,omitempty"`
	CreatedAt *time.Time `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt" bson:"updatedAt,omitempty"`
	DeletedAt *time.Time `json:"deletedAt" bson:"deletedAt,omitempty"`
}

type ForumPost struct {
	ID         string     `json:"id" bson:"_id"`
	Title      string     `json:"title" bson:"title,omitempty"`
	Content    string     `json:"content" bson:"content,omitempty"`
	CourseID   string     `json:"courseID" bson:"courseID,omitempty"`
	Author     string     `json:"author" bson:"author,omitempty"`
	CommentIds []string   `json:"commentIds" bson:"commentIds,omitempty"`
	FileIds    []string   `json:"fileIds" bson:"fileIds,omitempty"`
	ForumID    string     `json:"forumId" bson:"forumId,omitempty"`
	UserID     string     `json:"userId" bson:"userId,omitempty"`
	Tags       []string   `json:"tags" bson:"tags,omitempty"`
	Upvotes    int        `json:"upvotes" bson:"upvotes,omitempty"`
	Downvotes  int        `json:"downvotes" bson:"downvotes,omitempty"`
	CreatedAt  *time.Time `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt  *time.Time `json:"updatedAt" bson:"updatedAt,omitempty"`
	DeletedAt  *time.Time `json:"deletedAt" bson:"deletedAt,omitempty"`
}

type GlobalSetting struct {
	ID    string            `json:"id" bson:"_id"`
	Type  SettingType       `json:"type" bson:"type,omitempty"`
	Key   GlobalSettingKeys `json:"key" bson:"key,omitempty"`
	Value string            `json:"value" bson:"value,omitempty"`
}

type Grade struct {
	ID        string     `json:"id" bson:"_id"`
	StudentID string     `json:"studentId" bson:"studentId,omitempty"`
	CourseID  string     `json:"courseId" bson:"courseId,omitempty"`
	QuizID    string     `json:"quizId" bson:"quizId,omitempty"`
	Value     int        `json:"value" bson:"value,omitempty"`
	Criteria  string     `json:"criteria" bson:"criteria,omitempty"`
	Comments  string     `json:"comments" bson:"comments,omitempty"`
	CreatedAt *time.Time `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt" bson:"updatedAt,omitempty"`
	DeletedAt *time.Time `json:"deletedAt" bson:"deletedAt,omitempty"`
}

type GradeScale struct {
	ID       string `json:"id" bson:"_id"`
	MinScore int    `json:"minScore" bson:"minScore,omitempty"`
	MaxScore int    `json:"maxScore" bson:"maxScore,omitempty"`
	Grade    string `json:"grade" bson:"grade,omitempty"`
}

type Mail struct {
	ID            string   `json:"id" bson:"_id"`
	To            []string `json:"to" bson:"to,omitempty"`
	Subject       string   `json:"subject" bson:"subject,omitempty"`
	Body          string   `json:"body" bson:"body,omitempty"`
	AttachmentURL string   `json:"attachmentUrl" bson:"attachmentUrl,omitempty"`
	Status        string   `json:"status" bson:"status,omitempty"`
}

type MailInput struct {
	ID            string      `json:"id" bson:"_id"`
	To            []string    `json:"to" bson:"to,omitempty"`
	Subject       string      `json:"subject" bson:"subject,omitempty"`
	Content       interface{} `json:"content" bson:"content,omitempty"`
	AttachmentURL *string     `json:"attachmentUrl" bson:"attachmentUrl,omitempty"`
	Template      string      `json:"template" bson:"template,omitempty"`
}

type MatchingPair struct {
	ID       string    `json:"id" bson:"_id"`
	Question *Question `json:"question" bson:"question,omitempty"`
	Left     string    `json:"left" bson:"left,omitempty"`
	Right    string    `json:"right" bson:"right,omitempty"`
}

type MatchingPairInput struct {
	Left  string `json:"left" bson:"left,omitempty"`
	Right string `json:"right" bson:"right,omitempty"`
}

type Media struct {
	ID              string      `json:"id" bson:"_id"`
	CourseID        string      `json:"courseId" bson:"courseId,omitempty"`
	UserID          string      `json:"userId" bson:"userId,omitempty"`
	Title           string      `json:"title" bson:"title,omitempty"`
	Description     *string     `json:"description" bson:"description,omitempty"`
	Category        string      `json:"category" bson:"category,omitempty"`
	MediaType       MediaType   `json:"mediaType" bson:"mediaType,omitempty"`
	Tags            []string    `json:"tags" bson:"tags,omitempty"`
	VideoPlayerInfo *PlayerInfo `json:"videoPlayerInfo" bson:"videoPlayerInfo,omitempty"`
	File            *File       `json:"file" bson:"file,omitempty"`
	CreatedAt       *time.Time  `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt       *time.Time  `json:"updatedAt" bson:"updatedAt,omitempty"`
	DeletedAt       *time.Time  `json:"deletedAt" bson:"deletedAt,omitempty"`
}

type NewCourse struct {
	ID               string   `json:"id" bson:"_id"`
	UserID           string   `json:"userId" bson:"userId,omitempty"`
	Title            string   `json:"title" bson:"title,omitempty"`
	Code             string   `json:"code" bson:"code,omitempty"`
	CoverImg         string   `json:"coverImg" bson:"coverImg,omitempty"`
	Type             string   `json:"type" bson:"type,omitempty"`
	Semester         string   `json:"semester" bson:"semester,omitempty"`
	Program          string   `json:"program" bson:"program,omitempty"`
	Tutors           []string `json:"tutors" bson:"tutors,omitempty"`
	ShortDescription string   `json:"shortDescription" bson:"shortDescription,omitempty"`
	LongDescription  string   `json:"longDescription" bson:"longDescription,omitempty"`
}

type NewQualification struct {
	Degree         string `json:"degree" bson:"degree,omitempty"`
	Institution    string `json:"institution" bson:"institution,omitempty"`
	GraduationYear string `json:"graduationYear" bson:"graduationYear,omitempty"`
}

type NewReferee struct {
	UserID   string `json:"userId" bson:"userId,omitempty"`
	FullName string `json:"fullName" bson:"fullName,omitempty"`
	Email    string `json:"email" bson:"email,omitempty"`
	Phone    string `json:"phone" bson:"phone,omitempty"`
}

type NewSetting struct {
	Type      SettingType        `json:"type" bson:"type,omitempty"`
	UserKey   *UserSettingKeys   `json:"userKey" bson:"userKey,omitempty"`
	GlobalKey *GlobalSettingKeys `json:"globalKey" bson:"globalKey,omitempty"`
	Value     string             `json:"value" bson:"value,omitempty"`
}

type NewUser struct {
	FirstName string `json:"firstName" bson:"firstName,omitempty"`
	LastName  string `json:"lastName" bson:"lastName,omitempty"`
	Email     string `json:"email" bson:"email,omitempty"`
	Password  string `json:"password" bson:"password,omitempty"`
	Platform  string `json:"platform" bson:"platform,omitempty"`
	Program   string `json:"program" bson:"program,omitempty"`
}

type Notification struct {
	ID          string           `json:"id" bson:"_id"`
	SenderID    string           `json:"senderId" bson:"senderId,omitempty"`
	RecipientID string           `json:"recipientId" bson:"recipientId,omitempty"`
	CourseID    string           `json:"courseId" bson:"courseId,omitempty"`
	Seen        bool             `json:"seen" bson:"seen,omitempty"`
	Text        string           `json:"text" bson:"text,omitempty"`
	Title       string           `json:"title" bson:"title,omitempty"`
	Type        NotificationType `json:"type" bson:"type,omitempty"`
	Link        *string          `json:"link" bson:"link,omitempty"`
	CreatedAt   time.Time        `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt   time.Time        `json:"updatedAt" bson:"updatedAt,omitempty"`
	DeletedAt   time.Time        `json:"deletedAt" bson:"deletedAt,omitempty"`
}

type Penalty struct {
	ID          string `json:"id" bson:"_id"`
	Name        string `json:"name" bson:"name,omitempty"`
	Description string `json:"description" bson:"description,omitempty"`
	Percentage  int    `json:"percentage" bson:"percentage,omitempty"`
}

type Permission struct {
	ID          string              `json:"id" bson:"_id"`
	Role        Role                `json:"role" bson:"role,omitempty"`
	Model       AllowedModel        `json:"model" bson:"model,omitempty"`
	Permissions []AllowedPermission `json:"permissions" bson:"permissions,omitempty"`
}

type PermissionInput struct {
	Role        Role                `json:"role" bson:"role,omitempty"`
	Model       AllowedModel        `json:"model" bson:"model,omitempty"`
	Permissions []AllowedPermission `json:"permissions" bson:"permissions,omitempty"`
}

type PlayerInfo struct {
	CurrentTime  int     `json:"currentTime" bson:"currentTime,omitempty"`
	Duration     int     `json:"duration" bson:"duration,omitempty"`
	ThumbnailURL string  `json:"thumbnailUrl" bson:"thumbnailUrl,omitempty"`
	PosterURL    *string `json:"posterUrl" bson:"posterUrl,omitempty"`
}

type PlayerInfoInput struct {
	CurrentTime  *int    `json:"currentTime" bson:"currentTime,omitempty"`
	Duration     *int    `json:"duration" bson:"duration,omitempty"`
	ThumbnailURL *string `json:"thumbnailUrl" bson:"thumbnailUrl,omitempty"`
	PosterURL    *string `json:"posterUrl" bson:"posterUrl,omitempty"`
}

type Qualification struct {
	ID             string     `json:"id" bson:"_id"`
	Degree         string     `json:"degree" bson:"degree,omitempty"`
	Institution    string     `json:"institution" bson:"institution,omitempty"`
	GraduationYear string     `json:"graduationYear" bson:"graduationYear,omitempty"`
	CreatedAt      *time.Time `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt      *time.Time `json:"updatedAt" bson:"updatedAt,omitempty"`
	DeletedAt      *time.Time `json:"deletedAt" bson:"deletedAt,omitempty"`
}

type Question struct {
	ID            string         `json:"id" bson:"_id"`
	Type          QuestionType   `json:"type" bson:"type,omitempty"`
	Text          string         `json:"text" bson:"text,omitempty"`
	Choices       []AnswerChoice `json:"choices" bson:"choices,omitempty"`
	CorrectAnswer string         `json:"correctAnswer" bson:"correctAnswer,omitempty"`
	Feedback      string         `json:"feedback" bson:"feedback,omitempty"`
	Hints         []string       `json:"hints" bson:"hints,omitempty"`
	Randomize     bool           `json:"randomize" bson:"randomize,omitempty"`
	PointValue    int            `json:"pointValue" bson:"pointValue,omitempty"`
	Categories    []string       `json:"categories" bson:"categories,omitempty"`
	MatchingPairs []MatchingPair `json:"matchingPairs" bson:"matchingPairs,omitempty"`
}

type Quiz struct {
	ID                 string           `json:"id" bson:"_id"`
	Name               string           `json:"name" bson:"name,omitempty"`
	Description        string           `json:"description" bson:"description,omitempty"`
	QuizType           QuizType         `json:"quizType" bson:"quizType,omitempty"`
	Duration           int              `json:"duration" bson:"duration,omitempty"`
	PassingScore       int              `json:"passingScore" bson:"passingScore,omitempty"`
	ProctoringMethod   ProctoringMethod `json:"proctoringMethod" bson:"proctoringMethod,omitempty"`
	Questions          []Question       `json:"questions" bson:"questions,omitempty"`
	ResultsReleaseDate *time.Time       `json:"resultsReleaseDate" bson:"resultsReleaseDate,omitempty"`
	Certificate        bool             `json:"certificate" bson:"certificate,omitempty"`
	StartTime          time.Time        `json:"startTime" bson:"startTime,omitempty"`
	EndTime            time.Time        `json:"endTime" bson:"endTime,omitempty"`
	StartDate          time.Time        `json:"startDate" bson:"startDate,omitempty"`
	DueDate            string           `json:"dueDate" bson:"dueDate,omitempty"`
	TimeLimit          int              `json:"timeLimit" bson:"timeLimit,omitempty"`
	ShuffleQuestions   bool             `json:"shuffleQuestions" bson:"shuffleQuestions,omitempty"`
	RandomizeQuestions *bool            `json:"randomizeQuestions" bson:"randomizeQuestions,omitempty"`
	RandomizeAnswers   *bool            `json:"randomizeAnswers" bson:"randomizeAnswers,omitempty"`
	Categories         []string         `json:"categories" bson:"categories,omitempty"`
	CourseID           string           `json:"courseId" bson:"courseId,omitempty"`
	QuestionIds        []string         `json:"questionIds" bson:"questionIds,omitempty"`
	GradeIds           []string         `json:"gradeIds" bson:"gradeIds,omitempty"`
	SubmissionIds      []*string        `json:"submissionIds" bson:"submissionIds,omitempty"`
	IsLocked           bool             `json:"isLocked" bson:"isLocked,omitempty"`
	WaitTime           int              `json:"waitTime" bson:"waitTime,omitempty"`
	Weight             int              `json:"weight" bson:"weight,omitempty"`
	CreatedAt          time.Time        `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt          time.Time        `json:"updatedAt" bson:"updatedAt,omitempty"`
	DeletedAt          time.Time        `json:"deletedAt" bson:"deletedAt,omitempty"`
}

type Referee struct {
	ID        string     `json:"id" bson:"_id"`
	FullName  string     `json:"fullName" bson:"fullName,omitempty"`
	Email     string     `json:"email" bson:"email,omitempty"`
	Phone     string     `json:"phone" bson:"phone,omitempty"`
	CreatedAt *time.Time `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt" bson:"updatedAt,omitempty"`
	DeletedAt *time.Time `json:"deletedAt" bson:"deletedAt,omitempty"`
}

type Reminder struct {
	ID        string    `json:"id" bson:"_id"`
	Target    *Target   `json:"target" bson:"target,omitempty"`
	User      *User     `json:"user" bson:"user,omitempty"`
	Message   string    `json:"message" bson:"message,omitempty"`
	SendTime  time.Time `json:"sendTime" bson:"sendTime,omitempty"`
	Sent      bool      `json:"sent" bson:"sent,omitempty"`
	CreatedAt time.Time `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt time.Time `json:"updatedAt" bson:"updatedAt,omitempty"`
}

type ScoreDistribution struct {
	ID         string `json:"id" bson:"_id"`
	MinScore   int    `json:"minScore" bson:"minScore,omitempty"`
	MaxScore   int    `json:"maxScore" bson:"maxScore,omitempty"`
	Grade      string `json:"grade" bson:"grade,omitempty"`
	Percentage int    `json:"percentage" bson:"percentage,omitempty"`
}

type Submission struct {
	ID          string    `json:"id" bson:"_id"`
	QuizID      string    `json:"quizID" bson:"quizID,omitempty"`
	UserID      string    `json:"userID" bson:"userID,omitempty"`
	StartTime   time.Time `json:"startTime" bson:"startTime,omitempty"`
	EndTime     time.Time `json:"endTime" bson:"endTime,omitempty"`
	Answers     []Answer  `json:"answers" bson:"answers,omitempty"`
	Points      int       `json:"points" bson:"points,omitempty"`
	Grade       float64   `json:"grade" bson:"grade,omitempty"`
	Weight      int       `json:"weight" bson:"weight,omitempty"`
	Feedback    []string  `json:"feedback" bson:"feedback,omitempty"`
	StartedAt   time.Time `json:"startedAt" bson:"startedAt,omitempty"`
	CompletedAt time.Time `json:"completedAt" bson:"completedAt,omitempty"`
	CreatedAt   time.Time `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt   time.Time `json:"updatedAt" bson:"updatedAt,omitempty"`
}

type SubmissionInput struct {
	Quiz      *UpdateQuizInput `json:"quiz" bson:"quiz,omitempty"`
	UserID    string           `json:"userID" bson:"userID,omitempty"`
	StartTime time.Time        `json:"startTime" bson:"startTime,omitempty"`
	EndTime   time.Time        `json:"endTime" bson:"endTime,omitempty"`
	Answers   []AnswerInput    `json:"answers" bson:"answers,omitempty"`
	Points    int              `json:"points" bson:"points,omitempty"`
	Grade     float64          `json:"grade" bson:"grade,omitempty"`
	Weight    int              `json:"weight" bson:"weight,omitempty"`
	Feedback  []string         `json:"feedback" bson:"feedback,omitempty"`
	StartedAt time.Time        `json:"startedAt" bson:"startedAt,omitempty"`
}

type Tag struct {
	ID        string   `json:"id" bson:"_id"`
	Name      string   `json:"name" bson:"name,omitempty"`
	PostIds   []string `json:"postIds" bson:"postIds,omitempty"`
	CourseIds []string `json:"courseIds" bson:"courseIds,omitempty"`
}

type Target struct {
	ID             string         `json:"id" bson:"_id"`
	Name           string         `json:"name" bson:"name,omitempty"`
	Description    *string        `json:"description" bson:"description,omitempty"`
	DueDate        *time.Time     `json:"dueDate" bson:"dueDate,omitempty"`
	StartDate      *time.Time     `json:"startDate" bson:"startDate,omitempty"`
	CourseID       string         `json:"courseId" bson:"courseId,omitempty"`
	CompletionDate *time.Time     `json:"completionDate" bson:"completionDate,omitempty"`
	IsCompleted    bool           `json:"isCompleted" bson:"isCompleted,omitempty"`
	TargetType     TargetType     `json:"targetType" bson:"targetType,omitempty"`
	TargetValue    *int           `json:"targetValue" bson:"targetValue,omitempty"`
	CurrentValue   *int           `json:"currentValue" bson:"currentValue,omitempty"`
	TargetMetric   string         `json:"targetMetric" bson:"targetMetric,omitempty"`
	Reminders      []*Reminder    `json:"reminders" bson:"reminders,omitempty"`
	Units          string         `json:"units" bson:"units,omitempty"`
	RepeatInterval RepeatInterval `json:"repeatInterval" bson:"repeatInterval,omitempty"`
	RepeatEndDate  *time.Time     `json:"repeatEndDate" bson:"repeatEndDate,omitempty"`
	CreatedAt      *time.Time     `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt      *time.Time     `json:"updatedAt" bson:"updatedAt,omitempty"`
}

type Token struct {
	Token     string `json:"token" bson:"token,omitempty"`
	ExpiresAt int64  `json:"expiresAt" bson:"expiresAt,omitempty"`
}

type UpdateActivityInput struct {
	ID              string       `json:"id" bson:"_id"`
	CourseContentID *string      `json:"courseContentID" bson:"courseContentID,omitempty"`
	ActivityType    ActivityType `json:"activityType" bson:"activityType,omitempty"`
}

type UpdateCourseInput struct {
	ID               string       `json:"id" bson:"_id"`
	Code             string       `json:"code" bson:"code,omitempty"`
	Title            string       `json:"title" bson:"title,omitempty"`
	ShortDescription string       `json:"shortDescription" bson:"shortDescription,omitempty"`
	Description      *string      `json:"description" bson:"description,omitempty"`
	Semester         string       `json:"semester" bson:"semester,omitempty"`
	StartDate        *time.Time   `json:"startDate" bson:"startDate,omitempty"`
	EndDate          *time.Time   `json:"endDate" bson:"endDate,omitempty"`
	MatricNumber     string       `json:"matricNumber" bson:"matricNumber,omitempty"`
	CoverImageURL    *string      `json:"coverImageUrl" bson:"coverImageUrl,omitempty"`
	Type             CourseType   `json:"type" bson:"type,omitempty"`
	Status           CourseStatus `json:"status" bson:"status,omitempty"`
	ProgramType      ProgramType  `json:"programType" bson:"programType,omitempty"`
	InstructorIds    []string     `json:"instructorIds" bson:"instructorIds,omitempty"`
	StudentIds       []string     `json:"studentIds" bson:"studentIds,omitempty"`
	CourseContentIds []string     `json:"courseContentIds" bson:"courseContentIds,omitempty"`
	AssignmentIds    []string     `json:"assignmentIds" bson:"assignmentIds,omitempty"`
	QuizIds          []string     `json:"quizIds" bson:"quizIds,omitempty"`
	ForumID          *string      `json:"forumId" bson:"forumId,omitempty"`
	ActivityIds      []string     `json:"activityIds" bson:"activityIds,omitempty"`
	GradeIds         []string     `json:"gradeIds" bson:"gradeIds,omitempty"`
}

type UpdateEvaluationCriteriaInput struct {
	PassingScore       *int                `json:"passingScore" bson:"passingScore,omitempty"`
	Weight             *int                `json:"weight" bson:"weight,omitempty"`
	ResubmissionPolicy *ResubmissionPolicy `json:"resubmissionPolicy" bson:"resubmissionPolicy,omitempty"`
	IsPassFail         *bool               `json:"isPassFail" bson:"isPassFail,omitempty"`
	QuizID             *string             `json:"quizId" bson:"quizId,omitempty"`
}

type UpdateFileInput struct {
	Name      string     `json:"name" bson:"name,omitempty"`
	Mimetype  string     `json:"mimetype" bson:"mimetype,omitempty"`
	Encoding  string     `json:"encoding" bson:"encoding,omitempty"`
	Size      int        `json:"size" bson:"size,omitempty"`
	URL       string     `json:"url" bson:"url,omitempty"`
	CreatedAt *time.Time `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt" bson:"updatedAt,omitempty"`
	DeletedAt *time.Time `json:"deletedAt" bson:"deletedAt,omitempty"`
}

type UpdateForumCommentInput struct {
	Content *string  `json:"content" bson:"content,omitempty"`
	Files   []string `json:"files" bson:"files,omitempty"`
}

type UpdateForumInput struct {
	Name        *string  `json:"name" bson:"name,omitempty"`
	Description *string  `json:"description" bson:"description,omitempty"`
	Tags        []string `json:"tags" bson:"tags,omitempty"`
}

type UpdateForumPostInput struct {
	Title   *string  `json:"title" bson:"title,omitempty"`
	Content *string  `json:"content" bson:"content,omitempty"`
	Tags    []string `json:"tags" bson:"tags,omitempty"`
	Files   []string `json:"files" bson:"files,omitempty"`
}

type UpdateGradeInput struct {
	ID        string `json:"id" bson:"_id"`
	StudentID string `json:"studentId" bson:"studentId,omitempty"`
	CourseID  string `json:"courseId" bson:"courseId,omitempty"`
	QuizID    string `json:"quizId" bson:"quizId,omitempty"`
	Value     int    `json:"value" bson:"value,omitempty"`
	Criteria  string `json:"criteria" bson:"criteria,omitempty"`
	Comments  string `json:"comments" bson:"comments,omitempty"`
}

type UpdateMediaInput struct {
	ID              string           `json:"id" bson:"_id"`
	Title           string           `json:"title" bson:"title,omitempty"`
	Description     *string          `json:"description" bson:"description,omitempty"`
	Category        string           `json:"category" bson:"category,omitempty"`
	MediaType       MediaType        `json:"mediaType" bson:"mediaType,omitempty"`
	Duration        int64            `json:"duration" bson:"duration,omitempty"`
	VideoPlayerInfo *PlayerInfoInput `json:"videoPlayerInfo" bson:"videoPlayerInfo,omitempty"`
	File            *UpdateFileInput `json:"file" bson:"file,omitempty"`
}

type UpdateNotificationInput struct {
	Read *bool `json:"read" bson:"read,omitempty"`
}

type UpdateProspective struct {
	FirstName              *string            `json:"firstName" bson:"firstName,omitempty"`
	LastName               *string            `json:"lastName" bson:"lastName,omitempty"`
	Email                  *string            `json:"email" bson:"email,omitempty"`
	Dob                    *string            `json:"dob" bson:"dob,omitempty"`
	Phone                  *string            `json:"phone" bson:"phone,omitempty"`
	Address                *string            `json:"address" bson:"address,omitempty"`
	City                   *string            `json:"city" bson:"city,omitempty"`
	State                  *string            `json:"state" bson:"state,omitempty"`
	Country                *string            `json:"country" bson:"country,omitempty"`
	Zip                    *string            `json:"zip" bson:"zip,omitempty"`
	Nationality            *string            `json:"nationality" bson:"nationality,omitempty"`
	Platform               *string            `json:"platform" bson:"platform,omitempty"`
	Program                *string            `json:"program" bson:"program,omitempty"`
	SalvationBrief         string             `json:"salvationBrief" bson:"salvationBrief,omitempty"`
	GodsWorkings           []string           `json:"godsWorkings" bson:"godsWorkings,omitempty"`
	Reason                 string             `json:"reason" bson:"reason,omitempty"`
	ChurchName             string             `json:"churchName" bson:"churchName,omitempty"`
	ChurchAddress          *string            `json:"churchAddress" bson:"churchAddress,omitempty"`
	PastorName             *string            `json:"pastorName" bson:"pastorName,omitempty"`
	PastorEmail            *string            `json:"pastorEmail" bson:"pastorEmail,omitempty"`
	PastorPhone            *string            `json:"pastorPhone" bson:"pastorPhone,omitempty"`
	ChurchInvolved         *string            `json:"churchInvolved" bson:"churchInvolved,omitempty"`
	HealthConditions       []*string          `json:"healthConditions" bson:"healthConditions,omitempty"`
	HealthIssueDescription *string            `json:"healthIssueDescription" bson:"healthIssueDescription,omitempty"`
	Status                 RegistrationStatus `json:"status" bson:"status,omitempty"`
}

type UpdateQuestionInput struct {
	ID            string              `json:"id" bson:"_id"`
	Type          QuestionType        `json:"type" bson:"type,omitempty"`
	Text          string              `json:"text" bson:"text,omitempty"`
	Choices       []AnswerChoiceInput `json:"choices" bson:"choices,omitempty"`
	CorrectAnswer string              `json:"correctAnswer" bson:"correctAnswer,omitempty"`
	Feedback      string              `json:"feedback" bson:"feedback,omitempty"`
	Hints         []string            `json:"hints" bson:"hints,omitempty"`
	Randomize     bool                `json:"randomize" bson:"randomize,omitempty"`
	PointValue    int                 `json:"pointValue" bson:"pointValue,omitempty"`
	Categories    []string            `json:"categories" bson:"categories,omitempty"`
	MatchingPairs []MatchingPairInput `json:"matchingPairs" bson:"matchingPairs,omitempty"`
}

type UpdateQuizInput struct {
	ID               string                `json:"id" bson:"_id"`
	Name             string                `json:"name" bson:"name,omitempty"`
	TimeLimit        int                   `json:"timeLimit" bson:"timeLimit,omitempty"`
	ShuffleQuestions bool                  `json:"shuffleQuestions" bson:"shuffleQuestions,omitempty"`
	Categories       []string              `json:"categories" bson:"categories,omitempty"`
	Questions        []UpdateQuestionInput `json:"questions" bson:"questions,omitempty"`
}

type UpdateSetting struct {
	Value *string `json:"value" bson:"value,omitempty"`
}

type UpdateTagInput struct {
	Name *string `json:"name" bson:"name,omitempty"`
}

type UpdateTargetInput struct {
	Name        *string    `json:"name" bson:"name,omitempty"`
	Description *string    `json:"description" bson:"description,omitempty"`
	StartDate   *time.Time `json:"startDate" bson:"startDate,omitempty"`
	EndDate     *time.Time `json:"endDate" bson:"endDate,omitempty"`
	CourseID    *string    `json:"courseId" bson:"courseId,omitempty"`
	TargetValue *int       `json:"targetValue" bson:"targetValue,omitempty"`
	Units       *string    `json:"units" bson:"units,omitempty"`
}

type User struct {
	ID                     string              `json:"id" bson:"_id"`
	FirstName              string              `json:"firstName" bson:"firstName,omitempty"`
	LastName               string              `json:"lastName" bson:"lastName,omitempty"`
	MiddleName             string              `json:"middleName" bson:"middleName,omitempty"`
	FullName               string              `json:"fullName" bson:"fullName,omitempty"`
	Email                  string              `json:"email" bson:"email,omitempty"`
	Role                   Role                `json:"role" bson:"role,omitempty"`
	PermissionIds          []string            `json:"permissionIds" bson:"permissionIds,omitempty"`
	Phone                  string              `json:"phone" bson:"phone,omitempty"`
	AvatarURL              string              `json:"avatarUrl" bson:"avatarUrl,omitempty"`
	Dob                    string              `json:"dob" bson:"dob,omitempty"`
	Gender                 string              `json:"gender" bson:"gender,omitempty"`
	Address                string              `json:"address" bson:"address,omitempty"`
	City                   string              `json:"city" bson:"city,omitempty"`
	State                  string              `json:"state" bson:"state,omitempty"`
	Country                string              `json:"country" bson:"country,omitempty"`
	Zip                    string              `json:"zip" bson:"zip,omitempty"`
	Nationality            string              `json:"nationality" bson:"nationality,omitempty"`
	Profession             string              `json:"profession" bson:"profession,omitempty"`
	PasswordSalt           string              `json:"-" bson:"passwordSalt,omitempty"`
	PasswordHash           string              `json:"-" bson:"passwordHash,omitempty"`
	Permissions            []*string           `json:"permissions" bson:"permissions,omitempty"`
	Username               string              `json:"username" bson:"username,omitempty"`
	IsVerified             bool                `json:"isVerified" bson:"isVerified,omitempty"`
	About                  string              `json:"about" bson:"about,omitempty"`
	Wallet                 float64             `json:"wallet" bson:"wallet,omitempty"`
	TimeZone               string              `json:"timeZone" bson:"timeZone,omitempty"`
	Progress               int                 `json:"progress" bson:"progress,omitempty"`
	AccessToken            *Token              `json:"accessToken" bson:"accessToken,omitempty"`
	RefreshToken           *Token              `json:"refreshToken" bson:"refreshToken,omitempty"`
	VerifycationToken      *Token              `json:"verifycationToken" bson:"verifycationToken,omitempty"`
	IsAuthenticated        bool                `json:"isAuthenticated" bson:"isAuthenticated,omitempty"`
	Status                 *RegistrationStatus `json:"status" bson:"status,omitempty"`
	MatricNumber           string              `json:"matricNumber" bson:"matricNumber,omitempty"`
	Platform               string              `json:"platform" bson:"platform,omitempty"`
	Program                string              `json:"program" bson:"program,omitempty"`
	RegNumber              string              `json:"regNumber" bson:"regNumber,omitempty"`
	Files                  []string            `json:"files" bson:"files,omitempty"`
	Courses                []string            `json:"courses" bson:"courses,omitempty"`
	SalvationBrief         string              `json:"salvationBrief" bson:"salvationBrief,omitempty"`
	GodsWorkings           []string            `json:"godsWorkings" bson:"godsWorkings,omitempty"`
	Reason                 string              `json:"reason" bson:"reason,omitempty"`
	ChurchName             string              `json:"churchName" bson:"churchName,omitempty"`
	ChurchAddress          string              `json:"churchAddress" bson:"churchAddress,omitempty"`
	PastorName             string              `json:"pastorName" bson:"pastorName,omitempty"`
	PastorEmail            string              `json:"pastorEmail" bson:"pastorEmail,omitempty"`
	PastorPhone            string              `json:"pastorPhone" bson:"pastorPhone,omitempty"`
	ChurchInvolved         string              `json:"churchInvolved" bson:"churchInvolved,omitempty"`
	HealthConditions       []string            `json:"healthConditions" bson:"healthConditions,omitempty"`
	HealthIssueDescription string              `json:"healthIssueDescription" bson:"healthIssueDescription,omitempty"`
	Scholarship            *bool               `json:"scholarship" bson:"scholarship,omitempty"`
	ScholarshipReason      string              `json:"scholarshipReason" bson:"scholarshipReason,omitempty"`
	Qualifications         []Qualification     `json:"qualifications" bson:"qualifications,omitempty"`
	Referees               []Referee           `json:"referees" bson:"referees,omitempty"`
	Notifications          []Notification      `json:"notifications" bson:"notifications,omitempty"`
	CreatedAt              *time.Time          `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt              *time.Time          `json:"updatedAt" bson:"updatedAt,omitempty"`
	DeletedAt              *time.Time          `json:"deletedAt" bson:"deletedAt,omitempty"`
	ConfirmedAt            *time.Time          `json:"confirmedAt" bson:"confirmedAt,omitempty"`
	ConfirmationMailSentAt *time.Time          `json:"confirmationMailSentAt" bson:"confirmationMailSentAt,omitempty"`
}

type UserSetting struct {
	ID     string          `json:"id" bson:"_id"`
	UserID string          `json:"userId" bson:"userId,omitempty"`
	Type   SettingType     `json:"type" bson:"type,omitempty"`
	Key    UserSettingKeys `json:"key" bson:"key,omitempty"`
	Value  string          `json:"value" bson:"value,omitempty"`
}

type VerifyInput struct {
	Email    string  `json:"email" bson:"email,omitempty"`
	Password *string `json:"password" bson:"password,omitempty"`
	Code     string  `json:"code" bson:"code,omitempty"`
	Resend   *bool   `json:"resend" bson:"resend,omitempty"`
}

type ActivityType string

const (
	ActivityTypeCourseView              ActivityType = "COURSE_VIEW"
	ActivityTypeCourseEnrolled          ActivityType = "COURSE_ENROLLED"
	ActivityTypeCourseCompleted         ActivityType = "COURSE_COMPLETED"
	ActivityTypeCourseProgress          ActivityType = "COURSE_PROGRESS"
	ActivityTypeForumPostCreated        ActivityType = "FORUM_POST_CREATED"
	ActivityTypeForumPostUpdated        ActivityType = "FORUM_POST_UPDATED"
	ActivityTypeForumCommentCreated     ActivityType = "FORUM_COMMENT_CREATED"
	ActivityTypeForumCommentUpdated     ActivityType = "FORUM_COMMENT_UPDATED"
	ActivityTypeGradeReceived           ActivityType = "GRADE_RECEIVED"
	ActivityTypeQuizTaken               ActivityType = "QUIZ_TAKEN"
	ActivityTypeQuizGradeReceived       ActivityType = "QUIZ_GRADE_RECEIVED"
	ActivityTypeAssignmentSubmitted     ActivityType = "ASSIGNMENT_SUBMITTED"
	ActivityTypeAssignmentGradeReceived ActivityType = "ASSIGNMENT_GRADE_RECEIVED"
	ActivityTypeResourceAccessed        ActivityType = "RESOURCE_ACCESSED"
	ActivityTypeMediaInteraction        ActivityType = "MEDIA_INTERACTION"
	ActivityTypePageView                ActivityType = "PAGE_VIEW"
)

var AllActivityType = []ActivityType{
	ActivityTypeCourseView,
	ActivityTypeCourseEnrolled,
	ActivityTypeCourseCompleted,
	ActivityTypeCourseProgress,
	ActivityTypeForumPostCreated,
	ActivityTypeForumPostUpdated,
	ActivityTypeForumCommentCreated,
	ActivityTypeForumCommentUpdated,
	ActivityTypeGradeReceived,
	ActivityTypeQuizTaken,
	ActivityTypeQuizGradeReceived,
	ActivityTypeAssignmentSubmitted,
	ActivityTypeAssignmentGradeReceived,
	ActivityTypeResourceAccessed,
	ActivityTypeMediaInteraction,
	ActivityTypePageView,
}

func (e ActivityType) IsValid() bool {
	switch e {
	case ActivityTypeCourseView, ActivityTypeCourseEnrolled, ActivityTypeCourseCompleted, ActivityTypeCourseProgress, ActivityTypeForumPostCreated, ActivityTypeForumPostUpdated, ActivityTypeForumCommentCreated, ActivityTypeForumCommentUpdated, ActivityTypeGradeReceived, ActivityTypeQuizTaken, ActivityTypeQuizGradeReceived, ActivityTypeAssignmentSubmitted, ActivityTypeAssignmentGradeReceived, ActivityTypeResourceAccessed, ActivityTypeMediaInteraction, ActivityTypePageView:
		return true
	}
	return false
}

func (e ActivityType) String() string {
	return string(e)
}

func (e *ActivityType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActivityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActivityType", str)
	}
	return nil
}

func (e ActivityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AllowedModel string

const (
	AllowedModelCourse        AllowedModel = "COURSE"
	AllowedModelActivity      AllowedModel = "ACTIVITY"
	AllowedModelCourseContent AllowedModel = "COURSE_CONTENT"
	AllowedModelFile          AllowedModel = "FILE"
	AllowedModelForum         AllowedModel = "FORUM"
	AllowedModelForumPost     AllowedModel = "FORUM_POST"
	AllowedModelForumComment  AllowedModel = "FORUM_COMMENT"
	AllowedModelGrade         AllowedModel = "GRADE"
	AllowedModelQuiz          AllowedModel = "QUIZ"
	AllowedModelQuestion      AllowedModel = "QUESTION"
	AllowedModelSubmission    AllowedModel = "SUBMISSION"
	AllowedModelAnswerChoice  AllowedModel = "ANSWER_CHOICE"
	AllowedModelMatchingPair  AllowedModel = "MATCHING_PAIR"
	AllowedModelNotification  AllowedModel = "NOTIFICATION"
	AllowedModelTarget        AllowedModel = "TARGET"
	AllowedModelUser          AllowedModel = "USER"
)

var AllAllowedModel = []AllowedModel{
	AllowedModelCourse,
	AllowedModelActivity,
	AllowedModelCourseContent,
	AllowedModelFile,
	AllowedModelForum,
	AllowedModelForumPost,
	AllowedModelForumComment,
	AllowedModelGrade,
	AllowedModelQuiz,
	AllowedModelQuestion,
	AllowedModelSubmission,
	AllowedModelAnswerChoice,
	AllowedModelMatchingPair,
	AllowedModelNotification,
	AllowedModelTarget,
	AllowedModelUser,
}

func (e AllowedModel) IsValid() bool {
	switch e {
	case AllowedModelCourse, AllowedModelActivity, AllowedModelCourseContent, AllowedModelFile, AllowedModelForum, AllowedModelForumPost, AllowedModelForumComment, AllowedModelGrade, AllowedModelQuiz, AllowedModelQuestion, AllowedModelSubmission, AllowedModelAnswerChoice, AllowedModelMatchingPair, AllowedModelNotification, AllowedModelTarget, AllowedModelUser:
		return true
	}
	return false
}

func (e AllowedModel) String() string {
	return string(e)
}

func (e *AllowedModel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AllowedModel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AllowedModel", str)
	}
	return nil
}

func (e AllowedModel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AllowedPermission string

const (
	AllowedPermissionCreate            AllowedPermission = "CREATE"
	AllowedPermissionRead              AllowedPermission = "READ"
	AllowedPermissionUpdate            AllowedPermission = "UPDATE"
	AllowedPermissionDelete            AllowedPermission = "DELETE"
	AllowedPermissionUpdatePermissions AllowedPermission = "UPDATE_PERMISSIONS"
	AllowedPermissionGrantPermissions  AllowedPermission = "GRANT_PERMISSIONS"
	AllowedPermissionRevokePermissions AllowedPermission = "REVOKE_PERMISSIONS"
)

var AllAllowedPermission = []AllowedPermission{
	AllowedPermissionCreate,
	AllowedPermissionRead,
	AllowedPermissionUpdate,
	AllowedPermissionDelete,
	AllowedPermissionUpdatePermissions,
	AllowedPermissionGrantPermissions,
	AllowedPermissionRevokePermissions,
}

func (e AllowedPermission) IsValid() bool {
	switch e {
	case AllowedPermissionCreate, AllowedPermissionRead, AllowedPermissionUpdate, AllowedPermissionDelete, AllowedPermissionUpdatePermissions, AllowedPermissionGrantPermissions, AllowedPermissionRevokePermissions:
		return true
	}
	return false
}

func (e AllowedPermission) String() string {
	return string(e)
}

func (e *AllowedPermission) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AllowedPermission(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AllowedPermission", str)
	}
	return nil
}

func (e AllowedPermission) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CourseStatus string

const (
	CourseStatusDelayed    CourseStatus = "DELAYED"
	CourseStatusInProgress CourseStatus = "IN_PROGRESS"
	CourseStatusCompleted  CourseStatus = "COMPLETED"
)

var AllCourseStatus = []CourseStatus{
	CourseStatusDelayed,
	CourseStatusInProgress,
	CourseStatusCompleted,
}

func (e CourseStatus) IsValid() bool {
	switch e {
	case CourseStatusDelayed, CourseStatusInProgress, CourseStatusCompleted:
		return true
	}
	return false
}

func (e CourseStatus) String() string {
	return string(e)
}

func (e *CourseStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CourseStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CourseStatus", str)
	}
	return nil
}

func (e CourseStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CourseType string

const (
	CourseTypePracticum   CourseType = "PRACTICUM"
	CourseTypeLessons     CourseType = "LESSONS"
	CourseTypeShortCourse CourseType = "SHORT_COURSE"
)

var AllCourseType = []CourseType{
	CourseTypePracticum,
	CourseTypeLessons,
	CourseTypeShortCourse,
}

func (e CourseType) IsValid() bool {
	switch e {
	case CourseTypePracticum, CourseTypeLessons, CourseTypeShortCourse:
		return true
	}
	return false
}

func (e CourseType) String() string {
	return string(e)
}

func (e *CourseType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CourseType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CourseType", str)
	}
	return nil
}

func (e CourseType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GlobalSettingKeys string

const (
	GlobalSettingKeysEnrollmentOpen         GlobalSettingKeys = "ENROLLMENT_OPEN"
	GlobalSettingKeysMaxEnrollment          GlobalSettingKeys = "MAX_ENROLLMENT"
	GlobalSettingKeysDefaultTimezone        GlobalSettingKeys = "DEFAULT_TIMEZONE"
	GlobalSettingKeysDefaultLanguage        GlobalSettingKeys = "DEFAULT_LANGUAGE"
	GlobalSettingKeysShowInstructorInfo     GlobalSettingKeys = "SHOW_INSTRUCTOR_INFO"
	GlobalSettingKeysAllowStudentMessages   GlobalSettingKeys = "ALLOW_STUDENT_MESSAGES"
	GlobalSettingKeysCoursePassingGrade     GlobalSettingKeys = "COURSE_PASSING_GRADE"
	GlobalSettingKeysShowPopularCourses     GlobalSettingKeys = "SHOW_POPULAR_COURSES"
	GlobalSettingKeysShowRecommendedCourses GlobalSettingKeys = "SHOW_RECOMMENDED_COURSES"
	GlobalSettingKeysDefaultCourseTemplate  GlobalSettingKeys = "DEFAULT_COURSE_TEMPLATE"
	GlobalSettingKeysShowAllCourses         GlobalSettingKeys = "SHOW_ALL_COURSES"
	GlobalSettingKeysAllowCourseDiscovery   GlobalSettingKeys = "ALLOW_COURSE_DISCOVERY"
	GlobalSettingKeysEnableBadges           GlobalSettingKeys = "ENABLE_BADGES"
	GlobalSettingKeysShowCourseTags         GlobalSettingKeys = "SHOW_COURSE_TAGS"
	GlobalSettingKeysAllowCourseComments    GlobalSettingKeys = "ALLOW_COURSE_COMMENTS"
	GlobalSettingKeysEnableSsoLogin         GlobalSettingKeys = "ENABLE_SSO_LOGIN"
	GlobalSettingKeysShowAnnouncements      GlobalSettingKeys = "SHOW_ANNOUNCEMENTS"
	GlobalSettingKeysShowCourseSchedule     GlobalSettingKeys = "SHOW_COURSE_SCHEDULE"
)

var AllGlobalSettingKeys = []GlobalSettingKeys{
	GlobalSettingKeysEnrollmentOpen,
	GlobalSettingKeysMaxEnrollment,
	GlobalSettingKeysDefaultTimezone,
	GlobalSettingKeysDefaultLanguage,
	GlobalSettingKeysShowInstructorInfo,
	GlobalSettingKeysAllowStudentMessages,
	GlobalSettingKeysCoursePassingGrade,
	GlobalSettingKeysShowPopularCourses,
	GlobalSettingKeysShowRecommendedCourses,
	GlobalSettingKeysDefaultCourseTemplate,
	GlobalSettingKeysShowAllCourses,
	GlobalSettingKeysAllowCourseDiscovery,
	GlobalSettingKeysEnableBadges,
	GlobalSettingKeysShowCourseTags,
	GlobalSettingKeysAllowCourseComments,
	GlobalSettingKeysEnableSsoLogin,
	GlobalSettingKeysShowAnnouncements,
	GlobalSettingKeysShowCourseSchedule,
}

func (e GlobalSettingKeys) IsValid() bool {
	switch e {
	case GlobalSettingKeysEnrollmentOpen, GlobalSettingKeysMaxEnrollment, GlobalSettingKeysDefaultTimezone, GlobalSettingKeysDefaultLanguage, GlobalSettingKeysShowInstructorInfo, GlobalSettingKeysAllowStudentMessages, GlobalSettingKeysCoursePassingGrade, GlobalSettingKeysShowPopularCourses, GlobalSettingKeysShowRecommendedCourses, GlobalSettingKeysDefaultCourseTemplate, GlobalSettingKeysShowAllCourses, GlobalSettingKeysAllowCourseDiscovery, GlobalSettingKeysEnableBadges, GlobalSettingKeysShowCourseTags, GlobalSettingKeysAllowCourseComments, GlobalSettingKeysEnableSsoLogin, GlobalSettingKeysShowAnnouncements, GlobalSettingKeysShowCourseSchedule:
		return true
	}
	return false
}

func (e GlobalSettingKeys) String() string {
	return string(e)
}

func (e *GlobalSettingKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GlobalSettingKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GlobalSettingKeys", str)
	}
	return nil
}

func (e GlobalSettingKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MediaType string

const (
	MediaTypeImage       MediaType = "IMAGE"
	MediaTypeVideo       MediaType = "VIDEO"
	MediaTypeAudio       MediaType = "AUDIO"
	MediaTypePDF         MediaType = "PDF"
	MediaTypeWordDoc     MediaType = "WORD_DOC"
	MediaTypeText        MediaType = "TEXT"
	MediaTypePpt         MediaType = "PPT"
	MediaTypeSpreadsheet MediaType = "SPREADSHEET"
	MediaTypeArchive     MediaType = "ARCHIVE"
	MediaTypeOthers      MediaType = "OTHERS"
)

var AllMediaType = []MediaType{
	MediaTypeImage,
	MediaTypeVideo,
	MediaTypeAudio,
	MediaTypePDF,
	MediaTypeWordDoc,
	MediaTypeText,
	MediaTypePpt,
	MediaTypeSpreadsheet,
	MediaTypeArchive,
	MediaTypeOthers,
}

func (e MediaType) IsValid() bool {
	switch e {
	case MediaTypeImage, MediaTypeVideo, MediaTypeAudio, MediaTypePDF, MediaTypeWordDoc, MediaTypeText, MediaTypePpt, MediaTypeSpreadsheet, MediaTypeArchive, MediaTypeOthers:
		return true
	}
	return false
}

func (e MediaType) String() string {
	return string(e)
}

func (e *MediaType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaType", str)
	}
	return nil
}

func (e MediaType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NotificationType string

const (
	NotificationTypeMessage      NotificationType = "MESSAGE"
	NotificationTypeAnnouncement NotificationType = "ANNOUNCEMENT"
	NotificationTypeCourseUpdate NotificationType = "COURSE_UPDATE"
	NotificationTypeGradeUpdate  NotificationType = "GRADE_UPDATE"
	NotificationTypeForumUpdate  NotificationType = "FORUM_UPDATE"
)

var AllNotificationType = []NotificationType{
	NotificationTypeMessage,
	NotificationTypeAnnouncement,
	NotificationTypeCourseUpdate,
	NotificationTypeGradeUpdate,
	NotificationTypeForumUpdate,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeMessage, NotificationTypeAnnouncement, NotificationTypeCourseUpdate, NotificationTypeGradeUpdate, NotificationTypeForumUpdate:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProctoringMethod string

const (
	ProctoringMethodNone      ProctoringMethod = "NONE"
	ProctoringMethodManual    ProctoringMethod = "MANUAL"
	ProctoringMethodAutomated ProctoringMethod = "AUTOMATED"
)

var AllProctoringMethod = []ProctoringMethod{
	ProctoringMethodNone,
	ProctoringMethodManual,
	ProctoringMethodAutomated,
}

func (e ProctoringMethod) IsValid() bool {
	switch e {
	case ProctoringMethodNone, ProctoringMethodManual, ProctoringMethodAutomated:
		return true
	}
	return false
}

func (e ProctoringMethod) String() string {
	return string(e)
}

func (e *ProctoringMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProctoringMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProctoringMethod", str)
	}
	return nil
}

func (e ProctoringMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProgramType string

const (
	ProgramTypePgdt    ProgramType = "PGDT"
	ProgramTypeDiploma ProgramType = "DIPLOMA"
)

var AllProgramType = []ProgramType{
	ProgramTypePgdt,
	ProgramTypeDiploma,
}

func (e ProgramType) IsValid() bool {
	switch e {
	case ProgramTypePgdt, ProgramTypeDiploma:
		return true
	}
	return false
}

func (e ProgramType) String() string {
	return string(e)
}

func (e *ProgramType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProgramType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProgramType", str)
	}
	return nil
}

func (e ProgramType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type QuestionType string

const (
	QuestionTypeMultipleChoice  QuestionType = "MULTIPLE_CHOICE"
	QuestionTypeMultipleCorrect QuestionType = "MULTIPLE_CORRECT"
	QuestionTypeShortAnswer     QuestionType = "SHORT_ANSWER"
	QuestionTypeEssay           QuestionType = "ESSAY"
	QuestionTypeMatching        QuestionType = "MATCHING"
	QuestionTypeTrueFalse       QuestionType = "TRUE_FALSE"
)

var AllQuestionType = []QuestionType{
	QuestionTypeMultipleChoice,
	QuestionTypeMultipleCorrect,
	QuestionTypeShortAnswer,
	QuestionTypeEssay,
	QuestionTypeMatching,
	QuestionTypeTrueFalse,
}

func (e QuestionType) IsValid() bool {
	switch e {
	case QuestionTypeMultipleChoice, QuestionTypeMultipleCorrect, QuestionTypeShortAnswer, QuestionTypeEssay, QuestionTypeMatching, QuestionTypeTrueFalse:
		return true
	}
	return false
}

func (e QuestionType) String() string {
	return string(e)
}

func (e *QuestionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QuestionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QuestionType", str)
	}
	return nil
}

func (e QuestionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type QuizType string

const (
	QuizTypeExam       QuizType = "EXAM"
	QuizTypeAssignment QuizType = "ASSIGNMENT"
)

var AllQuizType = []QuizType{
	QuizTypeExam,
	QuizTypeAssignment,
}

func (e QuizType) IsValid() bool {
	switch e {
	case QuizTypeExam, QuizTypeAssignment:
		return true
	}
	return false
}

func (e QuizType) String() string {
	return string(e)
}

func (e *QuizType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QuizType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QuizType", str)
	}
	return nil
}

func (e QuizType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RegistrationStatus string

const (
	RegistrationStatusCreated    RegistrationStatus = "CREATED"
	RegistrationStatusInProgress RegistrationStatus = "IN_PROGRESS"
	RegistrationStatusCompleted  RegistrationStatus = "COMPLETED"
	RegistrationStatusRejected   RegistrationStatus = "REJECTED"
)

var AllRegistrationStatus = []RegistrationStatus{
	RegistrationStatusCreated,
	RegistrationStatusInProgress,
	RegistrationStatusCompleted,
	RegistrationStatusRejected,
}

func (e RegistrationStatus) IsValid() bool {
	switch e {
	case RegistrationStatusCreated, RegistrationStatusInProgress, RegistrationStatusCompleted, RegistrationStatusRejected:
		return true
	}
	return false
}

func (e RegistrationStatus) String() string {
	return string(e)
}

func (e *RegistrationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RegistrationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RegistrationStatus", str)
	}
	return nil
}

func (e RegistrationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RepeatInterval string

const (
	RepeatIntervalDay   RepeatInterval = "DAY"
	RepeatIntervalWeek  RepeatInterval = "WEEK"
	RepeatIntervalMonth RepeatInterval = "MONTH"
	RepeatIntervalYear  RepeatInterval = "YEAR"
)

var AllRepeatInterval = []RepeatInterval{
	RepeatIntervalDay,
	RepeatIntervalWeek,
	RepeatIntervalMonth,
	RepeatIntervalYear,
}

func (e RepeatInterval) IsValid() bool {
	switch e {
	case RepeatIntervalDay, RepeatIntervalWeek, RepeatIntervalMonth, RepeatIntervalYear:
		return true
	}
	return false
}

func (e RepeatInterval) String() string {
	return string(e)
}

func (e *RepeatInterval) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RepeatInterval(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RepeatInterval", str)
	}
	return nil
}

func (e RepeatInterval) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ResubmissionPolicy string

const (
	ResubmissionPolicyAllowed     ResubmissionPolicy = "ALLOWED"
	ResubmissionPolicyNotAllowed  ResubmissionPolicy = "NOT_ALLOWED"
	ResubmissionPolicyLimitNumber ResubmissionPolicy = "LIMIT_NUMBER"
	ResubmissionPolicyLimitTime   ResubmissionPolicy = "LIMIT_TIME"
)

var AllResubmissionPolicy = []ResubmissionPolicy{
	ResubmissionPolicyAllowed,
	ResubmissionPolicyNotAllowed,
	ResubmissionPolicyLimitNumber,
	ResubmissionPolicyLimitTime,
}

func (e ResubmissionPolicy) IsValid() bool {
	switch e {
	case ResubmissionPolicyAllowed, ResubmissionPolicyNotAllowed, ResubmissionPolicyLimitNumber, ResubmissionPolicyLimitTime:
		return true
	}
	return false
}

func (e ResubmissionPolicy) String() string {
	return string(e)
}

func (e *ResubmissionPolicy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResubmissionPolicy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResubmissionPolicy", str)
	}
	return nil
}

func (e ResubmissionPolicy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleStudent    Role = "STUDENT"
	RoleTeacher    Role = "TEACHER"
	RoleAdmin      Role = "ADMIN"
	RoleSuperAdmin Role = "SUPER_ADMIN"
	RoleSupport    Role = "SUPPORT"
	RoleAlumni     Role = "ALUMNI"
	RolePartner    Role = "PARTNER"
	RoleGuest      Role = "GUEST"
)

var AllRole = []Role{
	RoleStudent,
	RoleTeacher,
	RoleAdmin,
	RoleSuperAdmin,
	RoleSupport,
	RoleAlumni,
	RolePartner,
	RoleGuest,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleStudent, RoleTeacher, RoleAdmin, RoleSuperAdmin, RoleSupport, RoleAlumni, RolePartner, RoleGuest:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SettingType string

const (
	SettingTypeBoolean SettingType = "BOOLEAN"
	SettingTypeString  SettingType = "STRING"
	SettingTypeNumber  SettingType = "NUMBER"
	SettingTypeDate    SettingType = "DATE"
	SettingTypeTime    SettingType = "TIME"
)

var AllSettingType = []SettingType{
	SettingTypeBoolean,
	SettingTypeString,
	SettingTypeNumber,
	SettingTypeDate,
	SettingTypeTime,
}

func (e SettingType) IsValid() bool {
	switch e {
	case SettingTypeBoolean, SettingTypeString, SettingTypeNumber, SettingTypeDate, SettingTypeTime:
		return true
	}
	return false
}

func (e SettingType) String() string {
	return string(e)
}

func (e *SettingType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SettingType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SettingType", str)
	}
	return nil
}

func (e SettingType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TargetType string

const (
	TargetTypeTarget  TargetType = "TARGET"
	TargetTypeMinimum TargetType = "MINIMUM"
	TargetTypeMaximum TargetType = "MAXIMUM"
)

var AllTargetType = []TargetType{
	TargetTypeTarget,
	TargetTypeMinimum,
	TargetTypeMaximum,
}

func (e TargetType) IsValid() bool {
	switch e {
	case TargetTypeTarget, TargetTypeMinimum, TargetTypeMaximum:
		return true
	}
	return false
}

func (e TargetType) String() string {
	return string(e)
}

func (e *TargetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TargetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TargetType", str)
	}
	return nil
}

func (e TargetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserSettingKeys string

const (
	UserSettingKeysEmailNotificationsEnabled  UserSettingKeys = "EMAIL_NOTIFICATIONS_ENABLED"
	UserSettingKeysDefaultTimezone            UserSettingKeys = "DEFAULT_TIMEZONE"
	UserSettingKeysDefaultLanguage            UserSettingKeys = "DEFAULT_LANGUAGE"
	UserSettingKeysDarkModeEnabled            UserSettingKeys = "DARK_MODE_ENABLED"
	UserSettingKeysShowUnfinishedCourses      UserSettingKeys = "SHOW_UNFINISHED_COURSES"
	UserSettingKeysShowCompletedCourses       UserSettingKeys = "SHOW_COMPLETED_COURSES"
	UserSettingKeysAutoEnrollmentEnabled      UserSettingKeys = "AUTO_ENROLLMENT_ENABLED"
	UserSettingKeysShowCourseProgress         UserSettingKeys = "SHOW_COURSE_PROGRESS"
	UserSettingKeysDefaultFontSize            UserSettingKeys = "DEFAULT_FONT_SIZE"
	UserSettingKeysEnableTts                  UserSettingKeys = "ENABLE_TTS"
	UserSettingKeysShowEnrolledCoursesCount   UserSettingKeys = "SHOW_ENROLLED_COURSES_COUNT"
	UserSettingKeysShowInstructorAvailability UserSettingKeys = "SHOW_INSTRUCTOR_AVAILABILITY"
	UserSettingKeysShowRelatedCourses         UserSettingKeys = "SHOW_RELATED_COURSES"
	UserSettingKeysShowCourseRatings          UserSettingKeys = "SHOW_COURSE_RATINGS"
	UserSettingKeysShowCourseReviews          UserSettingKeys = "SHOW_COURSE_REVIEWS"
	UserSettingKeysAllowPushNotifications     UserSettingKeys = "ALLOW_PUSH_NOTIFICATIONS"
	UserSettingKeysEnableOfflineMode          UserSettingKeys = "ENABLE_OFFLINE_MODE"
	UserSettingKeysShowCourseActivityFeed     UserSettingKeys = "SHOW_COURSE_ACTIVITY_FEED"
)

var AllUserSettingKeys = []UserSettingKeys{
	UserSettingKeysEmailNotificationsEnabled,
	UserSettingKeysDefaultTimezone,
	UserSettingKeysDefaultLanguage,
	UserSettingKeysDarkModeEnabled,
	UserSettingKeysShowUnfinishedCourses,
	UserSettingKeysShowCompletedCourses,
	UserSettingKeysAutoEnrollmentEnabled,
	UserSettingKeysShowCourseProgress,
	UserSettingKeysDefaultFontSize,
	UserSettingKeysEnableTts,
	UserSettingKeysShowEnrolledCoursesCount,
	UserSettingKeysShowInstructorAvailability,
	UserSettingKeysShowRelatedCourses,
	UserSettingKeysShowCourseRatings,
	UserSettingKeysShowCourseReviews,
	UserSettingKeysAllowPushNotifications,
	UserSettingKeysEnableOfflineMode,
	UserSettingKeysShowCourseActivityFeed,
}

func (e UserSettingKeys) IsValid() bool {
	switch e {
	case UserSettingKeysEmailNotificationsEnabled, UserSettingKeysDefaultTimezone, UserSettingKeysDefaultLanguage, UserSettingKeysDarkModeEnabled, UserSettingKeysShowUnfinishedCourses, UserSettingKeysShowCompletedCourses, UserSettingKeysAutoEnrollmentEnabled, UserSettingKeysShowCourseProgress, UserSettingKeysDefaultFontSize, UserSettingKeysEnableTts, UserSettingKeysShowEnrolledCoursesCount, UserSettingKeysShowInstructorAvailability, UserSettingKeysShowRelatedCourses, UserSettingKeysShowCourseRatings, UserSettingKeysShowCourseReviews, UserSettingKeysAllowPushNotifications, UserSettingKeysEnableOfflineMode, UserSettingKeysShowCourseActivityFeed:
		return true
	}
	return false
}

func (e UserSettingKeys) String() string {
	return string(e)
}

func (e *UserSettingKeys) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserSettingKeys(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserSettingKeys", str)
	}
	return nil
}

func (e UserSettingKeys) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
